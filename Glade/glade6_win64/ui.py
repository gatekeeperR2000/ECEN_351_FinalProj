# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ui
else:
    import _ui

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PY_VERSION_HEX = _ui.PY_VERSION_HEX
CHARWIDTH = _ui.CHARWIDTH
CHARHEIGHT = _ui.CHARHEIGHT

def round_32(*args):
    return _ui.round_32(*args)

def round_64(*args):
    return _ui.round_64(*args)
UNKNOWN = _ui.UNKNOWN
CELLVIEW = _ui.CELLVIEW
CELL = _ui.CELL
VIEW = _ui.VIEW
INST = _ui.INST
RECTANGLE = _ui.RECTANGLE
TEXT = _ui.TEXT
ARRAY = _ui.ARRAY
PATH = _ui.PATH
POLYGON = _ui.POLYGON
VIAINST = _ui.VIAINST
NET = _ui.NET
PIN = _ui.PIN
SEGMENT = _ui.SEGMENT
LINE = _ui.LINE
VERTEX = _ui.VERTEX
HSEG = _ui.HSEG
VSEG = _ui.VSEG
ELLIPSE = _ui.ELLIPSE
ARC = _ui.ARC
MPP = _ui.MPP
SIGNAL = _ui.SIGNAL
INSTPIN = _ui.INSTPIN
FIGGROUP = _ui.FIGGROUP
COUPLING = _ui.COUPLING
R0 = _ui.R0
R90 = _ui.R90
R180 = _ui.R180
R270 = _ui.R270
MX = _ui.MX
MXR90 = _ui.MXR90
MY = _ui.MY
MYR90 = _ui.MYR90
DB_UNPLACED = _ui.DB_UNPLACED
DB_PLACED = _ui.DB_PLACED
DB_FIXED = _ui.DB_FIXED
DB_COVER = _ui.DB_COVER
DB_UNKNOWN = _ui.DB_UNKNOWN
DB_SRC_NONE = _ui.DB_SRC_NONE
DB_SRC_NETLIST = _ui.DB_SRC_NETLIST
DB_SRC_DIST = _ui.DB_SRC_DIST
DB_SRC_USER = _ui.DB_SRC_USER
DB_SRC_TIMING = _ui.DB_SRC_TIMING
DB_RING = _ui.DB_RING
DB_PADRING = _ui.DB_PADRING
DB_BLOCKRING = _ui.DB_BLOCKRING
DB_STRIPE = _ui.DB_STRIPE
DB_FOLLOWPIN = _ui.DB_FOLLOWPIN
DB_IOWIRE = _ui.DB_IOWIRE
DB_COREWIRE = _ui.DB_COREWIRE
DB_BLOCKWIRE = _ui.DB_BLOCKWIRE
DB_BLOCKAGEWIRE = _ui.DB_BLOCKAGEWIRE
DB_FILLWIRE = _ui.DB_FILLWIRE
DB_DRCFILL = _ui.DB_DRCFILL
DB_ROUTEDWIRE = _ui.DB_ROUTEDWIRE
DB_FIXEDWIRE = _ui.DB_FIXEDWIRE
DB_COVERWIRE = _ui.DB_COVERWIRE
DB_NOSHIELD = _ui.DB_NOSHIELD
DB_TRUNCATED = _ui.DB_TRUNCATED
DB_ROUND = _ui.DB_ROUND
DB_EXTENDED = _ui.DB_EXTENDED
DB_VAREXTEND = _ui.DB_VAREXTEND
DB_OCTAGONAL = _ui.DB_OCTAGONAL
topLeft = _ui.topLeft
centreLeft = _ui.centreLeft
bottomLeft = _ui.bottomLeft
topCentre = _ui.topCentre
centreCentre = _ui.centreCentre
bottomCentre = _ui.bottomCentre
topRight = _ui.topRight
centreRight = _ui.centreRight
bottomRight = _ui.bottomRight
maskLayout = _ui.maskLayout
schematic = _ui.schematic
symbol = _ui.symbol
abstract = _ui.abstract
autoLayout = _ui.autoLayout
verilog = _ui.verilog
NUM_RECORDS = _ui.NUM_RECORDS
GDS_HEADER = _ui.GDS_HEADER
GDS_BGNLIB = _ui.GDS_BGNLIB
GDS_LIBNAME = _ui.GDS_LIBNAME
GDS_UNITS = _ui.GDS_UNITS
GDS_ENDLIB = _ui.GDS_ENDLIB
GDS_BGNSTR = _ui.GDS_BGNSTR
GDS_STRNAME = _ui.GDS_STRNAME
GDS_ENDSTR = _ui.GDS_ENDSTR
GDS_BOUNDARY = _ui.GDS_BOUNDARY
GDS_PATH = _ui.GDS_PATH
GDS_SREF = _ui.GDS_SREF
GDS_AREF = _ui.GDS_AREF
GDS_TEXT = _ui.GDS_TEXT
GDS_LAYER = _ui.GDS_LAYER
GDS_DATATYPE = _ui.GDS_DATATYPE
GDS_WIDTH = _ui.GDS_WIDTH
GDS_XY = _ui.GDS_XY
GDS_ENDEL = _ui.GDS_ENDEL
GDS_SNAME = _ui.GDS_SNAME
GDS_COLROW = _ui.GDS_COLROW
GDS_TEXTNODE = _ui.GDS_TEXTNODE
GDS_NODE = _ui.GDS_NODE
GDS_TEXTTYPE = _ui.GDS_TEXTTYPE
GDS_PRESENTATION = _ui.GDS_PRESENTATION
GDS_SPACING = _ui.GDS_SPACING
GDS_STRING = _ui.GDS_STRING
GDS_STRANS = _ui.GDS_STRANS
GDS_MAG = _ui.GDS_MAG
GDS_ANGLE = _ui.GDS_ANGLE
GDS_UINTEGER = _ui.GDS_UINTEGER
GDS_USTRING = _ui.GDS_USTRING
GDS_REFLIBS = _ui.GDS_REFLIBS
GDS_FONTS = _ui.GDS_FONTS
GDS_PATHTYPE = _ui.GDS_PATHTYPE
GDS_GENERATIONS = _ui.GDS_GENERATIONS
GDS_ATTRTABLE = _ui.GDS_ATTRTABLE
GDS_STYPTABLE = _ui.GDS_STYPTABLE
GDS_STRTYPE = _ui.GDS_STRTYPE
GDS_ELFLAGS = _ui.GDS_ELFLAGS
GDS_ELKEY = _ui.GDS_ELKEY
GDS_LINKTYPE = _ui.GDS_LINKTYPE
GDS_LINKKEYS = _ui.GDS_LINKKEYS
GDS_NODETYPE = _ui.GDS_NODETYPE
GDS_PROPATTR = _ui.GDS_PROPATTR
GDS_PROPVALUE = _ui.GDS_PROPVALUE
GDS_BOX = _ui.GDS_BOX
GDS_BOXTYPE = _ui.GDS_BOXTYPE
GDS_PLEX = _ui.GDS_PLEX
GDS_BGNEXTN = _ui.GDS_BGNEXTN
GDS_ENDEXTN = _ui.GDS_ENDEXTN
GDS_TAPENUM = _ui.GDS_TAPENUM
GDS_TAPECODE = _ui.GDS_TAPECODE
GDS_STRCLASS = _ui.GDS_STRCLASS
GDS_RESERVED = _ui.GDS_RESERVED
GDS_FORMAT = _ui.GDS_FORMAT
GDS_MASK = _ui.GDS_MASK
GDS_ENDMASKS = _ui.GDS_ENDMASKS
GDS_LIBDIRSIZE = _ui.GDS_LIBDIRSIZE
GDS_SRFNAME = _ui.GDS_SRFNAME
GDS_LIBSECUR = _ui.GDS_LIBSECUR
GDS_BORDER = _ui.GDS_BORDER
GDS_SOFTFENCE = _ui.GDS_SOFTFENCE
GDS_HARDFENCE = _ui.GDS_HARDFENCE
GDS_SOFTWIRE = _ui.GDS_SOFTWIRE
GDS_HARDWIRE = _ui.GDS_HARDWIRE
GDS_PATHPORT = _ui.GDS_PATHPORT
GDS_NODEPORT = _ui.GDS_NODEPORT
GDS_USERCONSTRAINT = _ui.GDS_USERCONSTRAINT
GDS_SPACER_ERROR = _ui.GDS_SPACER_ERROR
GDS_CONTACT = _ui.GDS_CONTACT
path2rect = _ui.path2rect
path2hvseg = _ui.path2hvseg
path2path = _ui.path2path
allLayers = _ui.allLayers
techLayers = _ui.techLayers
singleLayer = _ui.singleLayer
MAX_MSG_LENGTH = _ui.MAX_MSG_LENGTH
class db(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.db_swiginit(self, _ui.new_db())
    __swig_destroy__ = _ui.delete_db

    @staticmethod
    def version():
        return _ui.db_version()

    @staticmethod
    def setHasGui(b):
        return _ui.db_setHasGui(b)

    @staticmethod
    def hasGui():
        return _ui.db_hasGui()

    @staticmethod
    def getLibList():
        return _ui.db_getLibList()

    @staticmethod
    def getNumLibs():
        return _ui.db_getNumLibs()

    @staticmethod
    def addLib(lib):
        return _ui.db_addLib(lib)

    @staticmethod
    def deleteLib(lib):
        return _ui.db_deleteLib(lib)

    @staticmethod
    def getLibByName(name):
        return _ui.db_getLibByName(name)

    @staticmethod
    def createLib(name):
        return _ui.db_createLib(name)

    @staticmethod
    def dbAddGroup(grp):
        return _ui.db_dbAddGroup(grp)

    @staticmethod
    def dbGetGroup(idx):
        return _ui.db_dbGetGroup(idx)

    @staticmethod
    def dbRemoveGroup(idx):
        return _ui.db_dbRemoveGroup(idx)

    @staticmethod
    def dbGroupTableSize():
        return _ui.db_dbGroupTableSize()

    @staticmethod
    def dbAddPropList(p):
        return _ui.db_dbAddPropList(p)

    @staticmethod
    def dbGetPropList(idx):
        return _ui.db_dbGetPropList(idx)

    @staticmethod
    def dbSetPropList(idx, p):
        return _ui.db_dbSetPropList(idx, p)

    @staticmethod
    def dbRemovePropList(idx):
        return _ui.db_dbRemovePropList(idx)

    @staticmethod
    def dbPropListTableSize():
        return _ui.db_dbPropListTableSize()

    @staticmethod
    def setLog(fn):
        return _ui.db_setLog(fn)

    @staticmethod
    def setLogNoPrompt(fn):
        return _ui.db_setLogNoPrompt(fn)

    @staticmethod
    def Output(s):
        return _ui.db_Output(s)

    @staticmethod
    def OutputNoPrompt(s):
        return _ui.db_OutputNoPrompt(s)

    @staticmethod
    def setCellView(cv):
        return _ui.db_setCellView(cv)

    @staticmethod
    def getCellView():
        return _ui.db_getCellView()

    def pyInitialise(self):
        return _ui.db_pyInitialise(self)
    pyGlobals = property(_ui.db_pyGlobals_get, _ui.db_pyGlobals_set)
    pyLocals = property(_ui.db_pyLocals_get, _ui.db_pyLocals_set)

    @staticmethod
    def setPyGlobals(globals):
        return _ui.db_setPyGlobals(globals)

    @staticmethod
    def setPyLocals(locals):
        return _ui.db_setPyLocals(locals)

    @staticmethod
    def error(*args):
        return _ui.db_error(*args)

    @staticmethod
    def errorNoPrompt(*args):
        return _ui.db_errorNoPrompt(*args)

    @staticmethod
    def warn(*args):
        return _ui.db_warn(*args)

    @staticmethod
    def warnNoPrompt(*args):
        return _ui.db_warnNoPrompt(*args)

    @staticmethod
    def info(*args):
        return _ui.db_info(*args)

    @staticmethod
    def infoNoPrompt(*args):
        return _ui.db_infoNoPrompt(*args)

    @staticmethod
    def msg(*args):
        return _ui.db_msg(*args)

    @staticmethod
    def msgNoPrompt(*args):
        return _ui.db_msgNoPrompt(*args)

    @staticmethod
    def startTimer():
        return _ui.db_startTimer()

    @staticmethod
    def getElapsed():
        return _ui.db_getElapsed()

    @staticmethod
    def maxErrCount():
        return _ui.db_maxErrCount()

    @staticmethod
    def setMaxErrCount(val):
        return _ui.db_setMaxErrCount(val)

# Register db in _ui:
_ui.db_swigregister(db)
cvar = _ui.cvar

def db_version():
    return _ui.db_version()

def db_setHasGui(b):
    return _ui.db_setHasGui(b)

def db_hasGui():
    return _ui.db_hasGui()

def db_getLibList():
    return _ui.db_getLibList()

def db_getNumLibs():
    return _ui.db_getNumLibs()

def db_addLib(lib):
    return _ui.db_addLib(lib)

def db_deleteLib(lib):
    return _ui.db_deleteLib(lib)

def db_getLibByName(name):
    return _ui.db_getLibByName(name)

def db_createLib(name):
    return _ui.db_createLib(name)

def db_dbAddGroup(grp):
    return _ui.db_dbAddGroup(grp)

def db_dbGetGroup(idx):
    return _ui.db_dbGetGroup(idx)

def db_dbRemoveGroup(idx):
    return _ui.db_dbRemoveGroup(idx)

def db_dbGroupTableSize():
    return _ui.db_dbGroupTableSize()

def db_dbAddPropList(p):
    return _ui.db_dbAddPropList(p)

def db_dbGetPropList(idx):
    return _ui.db_dbGetPropList(idx)

def db_dbSetPropList(idx, p):
    return _ui.db_dbSetPropList(idx, p)

def db_dbRemovePropList(idx):
    return _ui.db_dbRemovePropList(idx)

def db_dbPropListTableSize():
    return _ui.db_dbPropListTableSize()

def db_setLog(fn):
    return _ui.db_setLog(fn)

def db_setLogNoPrompt(fn):
    return _ui.db_setLogNoPrompt(fn)

def db_Output(s):
    return _ui.db_Output(s)

def db_OutputNoPrompt(s):
    return _ui.db_OutputNoPrompt(s)

def db_setCellView(cv):
    return _ui.db_setCellView(cv)

def db_getCellView():
    return _ui.db_getCellView()

def db_setPyGlobals(globals):
    return _ui.db_setPyGlobals(globals)

def db_setPyLocals(locals):
    return _ui.db_setPyLocals(locals)

def db_error(*args):
    return _ui.db_error(*args)

def db_errorNoPrompt(*args):
    return _ui.db_errorNoPrompt(*args)

def db_warn(*args):
    return _ui.db_warn(*args)

def db_warnNoPrompt(*args):
    return _ui.db_warnNoPrompt(*args)

def db_info(*args):
    return _ui.db_info(*args)

def db_infoNoPrompt(*args):
    return _ui.db_infoNoPrompt(*args)

def db_msg(*args):
    return _ui.db_msg(*args)

def db_msgNoPrompt(*args):
    return _ui.db_msgNoPrompt(*args)

def db_startTimer():
    return _ui.db_startTimer()

def db_getElapsed():
    return _ui.db_getElapsed()

def db_maxErrCount():
    return _ui.db_maxErrCount()

def db_setMaxErrCount(val):
    return _ui.db_setMaxErrCount(val)


def getColourMap(value, min, max, a=128, log=True):
    return _ui.getColourMap(value, min, max, a, log)

def appWindow():
    return _ui.appWindow()

def getOrient(o):
    return _ui.getOrient(o)

def getDEFOrient(o):
    return _ui.getDEFOrient(o)

def findOrient(src, dest):
    return _ui.findOrient(src, dest)

def setOrient(s):
    return _ui.setOrient(s)

def orientToDegrees(o):
    return _ui.orientToDegrees(o)

def getPresentation(a):
    return _ui.getPresentation(a)

def setPresentation(s):
    return _ui.setPresentation(s)

def translateAlign(align, origin, box):
    return _ui.translateAlign(align, origin, box)

def translateRotation(orient, box, align):
    return _ui.translateRotation(orient, box, align)

def translateOrientation(inst, presentation, nOrient, textBox, align):
    return _ui.translateOrientation(inst, presentation, nOrient, textBox, align)

def db_DateTime():
    return _ui.db_DateTime()

def dbStrdup(str):
    return _ui.dbStrdup(str)

def dbRound(val):
    return _ui.dbRound(val)

def areaPolygon(pts, num):
    return _ui.areaPolygon(pts, num)

def compressPoints(*args):
    return _ui.compressPoints(*args)

def compressPathPoints(*args):
    return _ui.compressPathPoints(*args)

def setFirstVertex(*args):
    return _ui.setFirstVertex(*args)

def ptInPoly(*args):
    return _ui.ptInPoly(*args)

def isLeft(P0, P1, P2):
    return _ui.isLeft(P0, P1, P2)

def isLeft2(x0, y0, x1, y1, P2):
    return _ui.isLeft2(x0, y0, x1, y1, P2)

def contains(*args):
    return _ui.contains(*args)

def overlaps(ptlist1, numPts1, ptlist2, numPts2, touching):
    return _ui.overlaps(ptlist1, numPts1, ptlist2, numPts2, touching)

def clip(*args):
    return _ui.clip(*args)

def checkCCW(ptlist, size):
    return _ui.checkCCW(ptlist, size)

def createPolygon(*args):
    return _ui.createPolygon(*args)

def stretchPathPts(ptlist, nPoints, delta, seg, lock45, lockEnds=False):
    return _ui.stretchPathPts(ptlist, nPoints, delta, seg, lock45, lockEnds)

def stretchPolyPts(ptlist, nPoints, delta, seg, lock45):
    return _ui.stretchPolyPts(ptlist, nPoints, delta, seg, lock45)

def shortLyrName(name):
    return _ui.shortLyrName(name)

def getPCellArgs(pCellName):
    return _ui.getPCellArgs(pCellName)

def getInstAttribute(inst, attribute, visible=None):
    return _ui.getInstAttribute(inst, attribute, visible)

def getCellAttribute(cv, attribute, visible=None):
    return _ui.getCellAttribute(cv, attribute, visible)

def splitIntoExpressions(s):
    return _ui.splitIntoExpressions(s)

def parseNLPLabel(inst, label, visible=None):
    return _ui.parseNLPLabel(inst, label, visible)

def parseNLPFormatString(inst, format):
    return _ui.parseNLPFormatString(inst, format)

def pyEvalString(s):
    return _ui.pyEvalString(s)

def roundPoly(old_pts, new_pts, inner_radius, outer_radius, segs, bias=False):
    return _ui.roundPoly(old_pts, new_pts, inner_radius, outer_radius, segs, bias)

def sizePoly(polygon, numPoints, bias):
    return _ui.sizePoly(polygon, numPoints, bias)

def getPropAsFloat(item):
    return _ui.getPropAsFloat(item)

def getQStringAsFloat(s):
    return _ui.getQStringAsFloat(s)

def busbits(name, begin, end, step):
    return _ui.busbits(name, begin, end, step)

def makeSpiceName(name, master):
    return _ui.makeSpiceName(name, master)

def createSpiceName(cv, master):
    return _ui.createSpiceName(cv, master)

def makePCellName(cellName, propList):
    return _ui.makePCellName(cellName, propList)

def numShapesInCellView(cv):
    return _ui.numShapesInCellView(cv)

def reorder_polygon(P):
    return _ui.reorder_polygon(P)

def minkowski_sum(P, Q):
    return _ui.minkowski_sum(P, Q)

def getViewTypeByName(name):
    return _ui.getViewTypeByName(name)
class dbObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.dbObj_swiginit(self, _ui.new_dbObj())
    __swig_destroy__ = _ui.delete_dbObj

    def objType(self):
        return _ui.dbObj_objType(self)

    def objName(self):
        return _ui.dbObj_objName(self)

    def setGroup(self, grp):
        return _ui.dbObj_setGroup(self, grp)

    def group(self):
        return _ui.dbObj_group(self)

    def offGrid(self, grid):
        return _ui.dbObj_offGrid(self, grid)

    def bBox(self, *args):
        return _ui.dbObj_bBox(self, *args)

    def qBox(self):
        return _ui.dbObj_qBox(self)

    def left(self):
        return _ui.dbObj_left(self)

    def right(self):
        return _ui.dbObj_right(self)

    def bottom(self):
        return _ui.dbObj_bottom(self)

    def top(self):
        return _ui.dbObj_top(self)

    def coord(self, disc):
        return _ui.dbObj_coord(self, disc)

    def setLeft(self, p):
        return _ui.dbObj_setLeft(self, p)

    def setRight(self, p):
        return _ui.dbObj_setRight(self, p)

    def setBottom(self, p):
        return _ui.dbObj_setBottom(self, p)

    def setTop(self, p):
        return _ui.dbObj_setTop(self, p)

    def isValid(self):
        return _ui.dbObj_isValid(self)

    def isInst(self):
        return _ui.dbObj_isInst(self)

    def isShape(self):
        return _ui.dbObj_isShape(self)

    def isViaInst(self):
        return _ui.dbObj_isViaInst(self)

    def isSeg(self):
        return _ui.dbObj_isSeg(self)

    def isVertex(self):
        return _ui.dbObj_isVertex(self)

    def dbFindProp(self, propName, csen=True):
        return _ui.dbObj_dbFindProp(self, propName, csen)

    def dbFindPropType(self, propName):
        return _ui.dbObj_dbFindPropType(self, propName)

    def dbSetPropVisible(self, propName, v):
        return _ui.dbObj_dbSetPropVisible(self, propName, v)

    def dbIsPropVisible(self, propName):
        return _ui.dbObj_dbIsPropVisible(self, propName)

    def dbSetPropEditable(self, propName, v):
        return _ui.dbObj_dbSetPropEditable(self, propName, v)

    def dbIsPropEditable(self, propName):
        return _ui.dbObj_dbIsPropEditable(self, propName)

    def dbSetPropCallback(self, propName, s):
        return _ui.dbObj_dbSetPropCallback(self, propName, s)

    def dbGetPropCallback(self, propName):
        return _ui.dbObj_dbGetPropCallback(self, propName)

    def dbSetPropChoices(self, propName, s):
        return _ui.dbObj_dbSetPropChoices(self, propName, s)

    def dbGetPropChoices(self, propName):
        return _ui.dbObj_dbGetPropChoices(self, propName)

    def dbAddProp(self, *args):
        return _ui.dbObj_dbAddProp(self, *args)

    def dbReplaceProp(self, *args):
        return _ui.dbObj_dbReplaceProp(self, *args)

    def dbGetListProp(self, propName, csen=True):
        return _ui.dbObj_dbGetListProp(self, propName, csen)

    def dbGetStringProp(self, propName, csen=True):
        return _ui.dbObj_dbGetStringProp(self, propName, csen)

    def dbGetIntProp(self, propName, csen=True):
        return _ui.dbObj_dbGetIntProp(self, propName, csen)

    def dbGetFloatProp(self, propName, csen=True):
        return _ui.dbObj_dbGetFloatProp(self, propName, csen)

    def dbGetBoolProp(self, propName, csen=True):
        return _ui.dbObj_dbGetBoolProp(self, propName, csen)

    def dbGetPropList(self):
        return _ui.dbObj_dbGetPropList(self)

    def dbSetPropList(self, list):
        return _ui.dbObj_dbSetPropList(self, list)

    def dbDeleteProp(self, propName):
        return _ui.dbObj_dbDeleteProp(self, propName)

    def dbGetProp(self, propName, csen=True):
        return _ui.dbObj_dbGetProp(self, propName, csen)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.dbObj_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.dbObj_getVertexAdjPts(self, v, pt1, pt2)

    def getSegsInRect(self, r, segs):
        return _ui.dbObj_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.dbObj_getVertsInRect(self, r, verts)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.dbObj_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, v):
        return _ui.dbObj_getNearestVertex(self, p, v)

    def scale(self, scale, grid):
        return _ui.dbObj_scale(self, scale, grid)

    def Move(self, _from, delta, opt=True):
        return _ui.dbObj_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.dbObj_Copy(self, _from, delta, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.dbObj_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.dbObj_Stretch(self, *args)

    def transform(self, *args):
        return _ui.dbObj_transform(self, *args)

    def setNet(self, n, check=True):
        return _ui.dbObj_setNet(self, n, check)

    def getNet(self):
        return _ui.dbObj_getNet(self)

    def getNetName(self):
        return _ui.dbObj_getNetName(self)

    def layer(self):
        return _ui.dbObj_layer(self)

    def setSpecial(self, flag):
        return _ui.dbObj_setSpecial(self, flag)

    def isSpecial(self):
        return _ui.dbObj_isSpecial(self)

    def toArc(self):
        return _ui.dbObj_toArc(self)

    def toArray(self):
        return _ui.dbObj_toArray(self)

    def toCell(self):
        return _ui.dbObj_toCell(self)

    def toCellView(self):
        return _ui.dbObj_toCellView(self)

    def toEllipse(self):
        return _ui.dbObj_toEllipse(self)

    def toGroup(self):
        return _ui.dbObj_toGroup(self)

    def toHSeg(self):
        return _ui.dbObj_toHSeg(self)

    def toInst(self):
        return _ui.dbObj_toInst(self)

    def toLabel(self):
        return _ui.dbObj_toLabel(self)

    def toLine(self):
        return _ui.dbObj_toLine(self)

    def toPath(self):
        return _ui.dbObj_toPath(self)

    def toPolygon(self):
        return _ui.dbObj_toPolygon(self)

    def toRectangle(self):
        return _ui.dbObj_toRectangle(self)

    def toSegment(self):
        return _ui.dbObj_toSegment(self)

    def toShape(self):
        return _ui.dbObj_toShape(self)

    def toViaInst(self):
        return _ui.dbObj_toViaInst(self)

    def toView(self):
        return _ui.dbObj_toView(self)

    def toVertex(self):
        return _ui.dbObj_toVertex(self)

    def toVSeg(self):
        return _ui.dbObj_toVSeg(self)

    def getPropList(self):
        return _ui.dbObj_getPropList(self)

    def setPropList(self, list):
        return _ui.dbObj_setPropList(self, list)

# Register dbObj in _ui:
_ui.dbObj_swigregister(dbObj)

stringType = _ui.stringType
booleanType = _ui.booleanType
integerType = _ui.integerType
floatType = _ui.floatType
listType = _ui.listType
unknownType = _ui.unknownType
class propValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    s = property(_ui.propValue_s_get, _ui.propValue_s_set)
    b = property(_ui.propValue_b_get, _ui.propValue_b_set)
    i = property(_ui.propValue_i_get, _ui.propValue_i_set)
    f = property(_ui.propValue_f_get, _ui.propValue_f_set)

    def __init__(self):
        _ui.propValue_swiginit(self, _ui.new_propValue())
    __swig_destroy__ = _ui.delete_propValue

# Register propValue in _ui:
_ui.propValue_swigregister(propValue)

class prop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ui.delete_prop

    def __init__(self, *args):
        _ui.prop_swiginit(self, _ui.new_prop(*args))

    def __eq__(self, _from):
        return _ui.prop___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.prop___ne__(self, _from)

    def data(self):
        return _ui.prop_data(self)

    def setData(self, *args):
        return _ui.prop_setData(self, *args)

    def name(self):
        return _ui.prop_name(self)

    def setName(self, name):
        return _ui.prop_setName(self, name)

    def getType(self):
        return _ui.prop_getType(self)

    def setType(self, type):
        return _ui.prop_setType(self, type)

    def isVisible(self):
        return _ui.prop_isVisible(self)

    def setVisible(self, visible):
        return _ui.prop_setVisible(self, visible)

    def isEditable(self):
        return _ui.prop_isEditable(self)

    def setEditable(self, editable):
        return _ui.prop_setEditable(self, editable)

    def callback(self):
        return _ui.prop_callback(self)

    def setCallback(self, fn):
        return _ui.prop_setCallback(self, fn)

    def choices(self):
        return _ui.prop_choices(self)

    def setChoices(self, name):
        return _ui.prop_setChoices(self, name)

# Register prop in _ui:
_ui.prop_swigregister(prop)

class pListItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.pListItem_swiginit(self, _ui.new_pListItem())

    def getProp(self):
        return _ui.pListItem_getProp(self)

    def setProp(self, p):
        return _ui.pListItem_setProp(self, p)

    def next(self):
        return _ui.pListItem_next(self)

    def setNext(self, next):
        return _ui.pListItem_setNext(self, next)

    def destroy(self):
        return _ui.pListItem_destroy(self)
    __swig_destroy__ = _ui.delete_pListItem

# Register pListItem in _ui:
_ui.pListItem_swigregister(pListItem)

class properties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.properties_swiginit(self, _ui.new_properties())
    __swig_destroy__ = _ui.delete_properties

    def addProp(self, *args):
        return _ui.properties_addProp(self, *args)

    def replaceProp(self, *args):
        return _ui.properties_replaceProp(self, *args)

    def getListProp(self, propName, csen=True):
        return _ui.properties_getListProp(self, propName, csen)

    def getStringProp(self, propName, csen=True):
        return _ui.properties_getStringProp(self, propName, csen)

    def getIntProp(self, propName, csen=True):
        return _ui.properties_getIntProp(self, propName, csen)

    def getFloatProp(self, propName, csen=True):
        return _ui.properties_getFloatProp(self, propName, csen)

    def getBoolProp(self, propName, csen=True):
        return _ui.properties_getBoolProp(self, propName, csen)

    def findProp(self, propName, csen=True):
        return _ui.properties_findProp(self, propName, csen)

    def getPropType(self, propName):
        return _ui.properties_getPropType(self, propName)

    def setPropVisible(self, propName, v):
        return _ui.properties_setPropVisible(self, propName, v)

    def isPropVisible(self, propName):
        return _ui.properties_isPropVisible(self, propName)

    def setPropEditable(self, propName, v):
        return _ui.properties_setPropEditable(self, propName, v)

    def isPropEditable(self, propName):
        return _ui.properties_isPropEditable(self, propName)

    def setPropCallback(self, propName, s):
        return _ui.properties_setPropCallback(self, propName, s)

    def propCallback(self, propName):
        return _ui.properties_propCallback(self, propName)

    def setPropChoices(self, propName, s):
        return _ui.properties_setPropChoices(self, propName, s)

    def propChoices(self, propName):
        return _ui.properties_propChoices(self, propName)

    def getPropList(self):
        return _ui.properties_getPropList(self)

    def setPropList(self, list):
        return _ui.properties_setPropList(self, list)

    def deleteProp(self, propName):
        return _ui.properties_deleteProp(self, propName)

# Register properties in _ui:
_ui.properties_swigregister(properties)


def copyPropList(plist):
    return _ui.copyPropList(plist)

def deletePropList(plist):
    return _ui.deletePropList(plist)

def deleteProp(name, plist):
    return _ui.deleteProp(name, plist)
class shape(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.shape_swiginit(self, _ui.new_shape())
    __swig_destroy__ = _ui.delete_shape

    def layer(self, *args):
        return _ui.shape_layer(self, *args)

    def setNet(self, n, check=True):
        return _ui.shape_setNet(self, n, check)

    def getNet(self):
        return _ui.shape_getNet(self)

    def changeNet(self, n):
        return _ui.shape_changeNet(self, n)

    def setStyle(self, val):
        return _ui.shape_setStyle(self, val)

    def getStyle(self):
        return _ui.shape_getStyle(self)

    def setType(self, val):
        return _ui.shape_setType(self, val)

    def getType(self):
        return _ui.shape_getType(self)

    def getTypeStr(self):
        return _ui.shape_getTypeStr(self)

    def setShape(self, val):
        return _ui.shape_setShape(self, val)

    def getShape(self):
        return _ui.shape_getShape(self)

    def getShapeStr(self):
        return _ui.shape_getShapeStr(self)

    def orient(self, *args):
        return _ui.shape_orient(self, *args)

    def getOrientStr(self):
        return _ui.shape_getOrientStr(self)

    def setSpecial(self, val):
        return _ui.shape_setSpecial(self, val)

    def isSpecial(self):
        return _ui.shape_isSpecial(self)

    def setPin(self, val):
        return _ui.shape_setPin(self, val)

    def isPin(self):
        return _ui.shape_isPin(self)

    def getNetName(self):
        return _ui.shape_getNetName(self)

    def bias(self, bias, Xgrid, Ygrid, layer=-1):
        return _ui.shape_bias(self, bias, Xgrid, Ygrid, layer)

    def nPoints(self):
        return _ui.shape_nPoints(self)

    def ptlist(self, *args):
        return _ui.shape_ptlist(self, *args)

    def shapeToPoly(self, _from):
        return _ui.shape_shapeToPoly(self, _from)

    def length(self):
        return _ui.shape_length(self)

    def area(self):
        return _ui.shape_area(self)

    def perimeter(self):
        return _ui.shape_perimeter(self)

    def ptInPoly(self, *args):
        return _ui.shape_ptInPoly(self, *args)

    def manhattan(self):
        return _ui.shape_manhattan(self)

    def __eq__(self, other):
        return _ui.shape___eq__(self, other)

    def __ne__(self, other):
        return _ui.shape___ne__(self, other)

    def __lt__(self, other):
        return _ui.shape___lt__(self, other)

# Register shape in _ui:
_ui.shape_swigregister(shape)

class inst(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.inst_swiginit(self, _ui.new_inst())
    __swig_destroy__ = _ui.delete_inst

    def left(self):
        return _ui.inst_left(self)

    def right(self):
        return _ui.inst_right(self)

    def bottom(self):
        return _ui.inst_bottom(self)

    def top(self):
        return _ui.inst_top(self)

    def coord(self, disc):
        return _ui.inst_coord(self, disc)

    def offGrid(self, grid):
        return _ui.inst_offGrid(self, grid)

    def orient(self, *args):
        return _ui.inst_orient(self, *args)

    def status(self, *args):
        return _ui.inst_status(self, *args)

    def getPlacementStatusStr(self):
        return _ui.inst_getPlacementStatusStr(self)

    def source(self, *args):
        return _ui.inst_source(self, *args)

    def getPlacementSourceStr(self):
        return _ui.inst_getPlacementSourceStr(self)

    def bound(self, *args):
        return _ui.inst_bound(self, *args)

    def anyAngle(self, *args):
        return _ui.inst_anyAngle(self, *args)

    def angle(self, *args):
        return _ui.inst_angle(self, *args)

    def mag(self, *args):
        return _ui.inst_mag(self, *args)

    def libName(self):
        return _ui.inst_libName(self)

    def lib(self):
        return _ui.inst_lib(self)

    def cellName(self, *args):
        return _ui.inst_cellName(self, *args)

    def viewName(self, *args):
        return _ui.inst_viewName(self, *args)

    def instName(self, *args):
        return _ui.inst_instName(self, *args)

    def setMaster(self, cv):
        return _ui.inst_setMaster(self, cv)

    def getMaster(self):
        return _ui.inst_getMaster(self)

    def origin(self, *args):
        return _ui.inst_origin(self, *args)

    def bBox(self, *args):
        return _ui.inst_bBox(self, *args)

    def qBox(self):
        return _ui.inst_qBox(self)

    def updateBbox(self):
        return _ui.inst_updateBbox(self)

    def getBoundary(self):
        return _ui.inst_getBoundary(self)

    def objType(self):
        return _ui.inst_objType(self)

    def objName(self):
        return _ui.inst_objName(self)

    def getHPWL(self, x, y):
        return _ui.inst_getHPWL(self, x, y)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.inst_getNearestEdge(self, p, edge, c, e)

    def transform(self, *args):
        return _ui.inst_transform(self, *args)

    def numRows(self, *args):
        return _ui.inst_numRows(self, *args)

    def numCols(self, *args):
        return _ui.inst_numCols(self, *args)

    def rowSpacing(self, *args):
        return _ui.inst_rowSpacing(self, *args)

    def rowXSpacing(self, *args):
        return _ui.inst_rowXSpacing(self, *args)

    def rowYSpacing(self, *args):
        return _ui.inst_rowYSpacing(self, *args)

    def colSpacing(self, *args):
        return _ui.inst_colSpacing(self, *args)

    def colXSpacing(self, *args):
        return _ui.inst_colXSpacing(self, *args)

    def colYSpacing(self, *args):
        return _ui.inst_colYSpacing(self, *args)

    def scale(self, scaleFactor, grid):
        return _ui.inst_scale(self, scaleFactor, grid)

    def Move(self, cv, delta, opt=True):
        return _ui.inst_Move(self, cv, delta, opt)

    def Copy(self, cv, delta, lyr=-1):
        return _ui.inst_Copy(self, cv, delta, lyr)

    def Flatten(self, cv, trans, hier=True):
        return _ui.inst_Flatten(self, cv, trans, hier)

    def dbCreateInstPin(self, n, name, warn=True):
        return _ui.inst_dbCreateInstPin(self, n, name, warn)

    def dbDeleteInstPin(self, *args):
        return _ui.inst_dbDeleteInstPin(self, *args)

    def dbFindInstPinByName(self, name):
        return _ui.inst_dbFindInstPinByName(self, name)

    def instPins(self):
        return _ui.inst_instPins(self)

    def addInstPin(self, ip):
        return _ui.inst_addInstPin(self, ip)

    def getNumInstPins(self):
        return _ui.inst_getNumInstPins(self)

    def nPoints(self):
        return _ui.inst_nPoints(self)

    def ptlist(self):
        return _ui.inst_ptlist(self)

    def layer(self):
        return _ui.inst_layer(self)

    def mFactor(self):
        return _ui.inst_mFactor(self)

    def numBits(self):
        return _ui.inst_numBits(self)

    def setSpecial(self, flag):
        return _ui.inst_setSpecial(self, flag)

    def isSpecial(self):
        return _ui.inst_isSpecial(self)

    def dbPrint(self, fp):
        return _ui.inst_dbPrint(self, fp)

    def write(self, s):
        return _ui.inst_write(self, s)

    def getInstPins(self):
        return _ui.inst_getInstPins(self)

# Register inst in _ui:
_ui.inst_swigregister(inst)

class ellipse(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.ellipse_swiginit(self, _ui.new_ellipse())
    __swig_destroy__ = _ui.delete_ellipse

    def left(self):
        return _ui.ellipse_left(self)

    def right(self):
        return _ui.ellipse_right(self)

    def bottom(self):
        return _ui.ellipse_bottom(self)

    def top(self):
        return _ui.ellipse_top(self)

    def coord(self, disc):
        return _ui.ellipse_coord(self, disc)

    def setLeft(self, val):
        return _ui.ellipse_setLeft(self, val)

    def setRight(self, val):
        return _ui.ellipse_setRight(self, val)

    def setBottom(self, val):
        return _ui.ellipse_setBottom(self, val)

    def setTop(self, val):
        return _ui.ellipse_setTop(self, val)

    def origin(self):
        return _ui.ellipse_origin(self)

    def setOrigin(self, *args):
        return _ui.ellipse_setOrigin(self, *args)

    def width(self, *args):
        return _ui.ellipse_width(self, *args)

    def height(self, *args):
        return _ui.ellipse_height(self, *args)

    def qBox(self):
        return _ui.ellipse_qBox(self)

    def setXRadius(self, r):
        return _ui.ellipse_setXRadius(self, r)

    def setYRadius(self, r):
        return _ui.ellipse_setYRadius(self, r)

    def xRadius(self):
        return _ui.ellipse_xRadius(self)

    def yRadius(self):
        return _ui.ellipse_yRadius(self)

    def setNumChords(self, c):
        return _ui.ellipse_setNumChords(self, c)

    def numChords(self):
        return _ui.ellipse_numChords(self)

    def bBox(self, *args):
        return _ui.ellipse_bBox(self, *args)

    def objType(self):
        return _ui.ellipse_objType(self)

    def objName(self):
        return _ui.ellipse_objName(self)

    def area(self):
        return _ui.ellipse_area(self)

    def perimeter(self):
        return _ui.ellipse_perimeter(self)

    def createPolygon(self, pts, numPoints):
        return _ui.ellipse_createPolygon(self, pts, numPoints)

    def ptlist(self):
        return _ui.ellipse_ptlist(self)

    def nPoints(self):
        return _ui.ellipse_nPoints(self)

    def offGrid(self, grid):
        return _ui.ellipse_offGrid(self, grid)

    def manhattan(self):
        return _ui.ellipse_manhattan(self)

    def transform(self, *args):
        return _ui.ellipse_transform(self, *args)

    def ptInPoly(self, *args):
        return _ui.ellipse_ptInPoly(self, *args)

    def Move(self, _from, delta, opt=True):
        return _ui.ellipse_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.ellipse_Copy(self, _from, delta, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.ellipse_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.ellipse_Stretch(self, *args)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.ellipse_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.ellipse_scale(self, scale, grid)

    def shapeToPoly(self, _from):
        return _ui.ellipse_shapeToPoly(self, _from)

    def dbPrint(self, fp):
        return _ui.ellipse_dbPrint(self, fp)

    def write(self, s):
        return _ui.ellipse_write(self, s)

    def __eq__(self, other):
        return _ui.ellipse___eq__(self, other)

    def __ne__(self, other):
        return _ui.ellipse___ne__(self, other)

    def __lt__(self, other):
        return _ui.ellipse___lt__(self, other)

    def __getitem__(self, i):
        return _ui.ellipse___getitem__(self, i)

# Register ellipse in _ui:
_ui.ellipse_swigregister(ellipse)

class arc(ellipse):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.arc_swiginit(self, _ui.new_arc())
    __swig_destroy__ = _ui.delete_arc

    def setStartAngle(self, angle):
        return _ui.arc_setStartAngle(self, angle)

    def setSpanAngle(self, angle):
        return _ui.arc_setSpanAngle(self, angle)

    def startAngle(self):
        return _ui.arc_startAngle(self)

    def spanAngle(self):
        return _ui.arc_spanAngle(self)

    def bBox(self):
        return _ui.arc_bBox(self)

    def qBox(self):
        return _ui.arc_qBox(self)

    def objType(self):
        return _ui.arc_objType(self)

    def objName(self):
        return _ui.arc_objName(self)

    def area(self):
        return _ui.arc_area(self)

    def perimeter(self):
        return _ui.arc_perimeter(self)

    def createPolygon(self, pts, numPoints):
        return _ui.arc_createPolygon(self, pts, numPoints)

    def offGrid(self, grid):
        return _ui.arc_offGrid(self, grid)

    def manhattan(self):
        return _ui.arc_manhattan(self)

    def transform(self, *args):
        return _ui.arc_transform(self, *args)

    def Move(self, cv, delta, opt=True):
        return _ui.arc_Move(self, cv, delta, opt)

    def Copy(self, cv, delta, lyr=-1):
        return _ui.arc_Copy(self, cv, delta, lyr)

    def Flatten(self, cv, trans, hier=True):
        return _ui.arc_Flatten(self, cv, trans, hier)

    def Stretch(self, *args):
        return _ui.arc_Stretch(self, *args)

    def shapeToPoly(self, _from):
        return _ui.arc_shapeToPoly(self, _from)

    def dbPrint(self, fp):
        return _ui.arc_dbPrint(self, fp)

    def write(self, s):
        return _ui.arc_write(self, s)

# Register arc in _ui:
_ui.arc_swigregister(arc)

class array(inst):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.array_swiginit(self, _ui.new_array())
    __swig_destroy__ = _ui.delete_array

    def numRows(self, *args):
        return _ui.array_numRows(self, *args)

    def numCols(self, *args):
        return _ui.array_numCols(self, *args)

    def rowSpacing(self, *args):
        return _ui.array_rowSpacing(self, *args)

    def rowXSpacing(self, *args):
        return _ui.array_rowXSpacing(self, *args)

    def rowYSpacing(self, *args):
        return _ui.array_rowYSpacing(self, *args)

    def colSpacing(self, *args):
        return _ui.array_colSpacing(self, *args)

    def colXSpacing(self, *args):
        return _ui.array_colXSpacing(self, *args)

    def colYSpacing(self, *args):
        return _ui.array_colYSpacing(self, *args)

    def bBox(self, *args):
        return _ui.array_bBox(self, *args)

    def qBox(self):
        return _ui.array_qBox(self)

    def updateBbox(self):
        return _ui.array_updateBbox(self)

    def objType(self):
        return _ui.array_objType(self)

    def objName(self):
        return _ui.array_objName(self)

    def scale(self, scaleFactor, grid):
        return _ui.array_scale(self, scaleFactor, grid)

    def Move(self, cv, delta, opt=True):
        return _ui.array_Move(self, cv, delta, opt)

    def Copy(self, cv, delta, lyr=-1):
        return _ui.array_Copy(self, cv, delta, lyr)

    def Flatten(self, cv, trans, hier=True):
        return _ui.array_Flatten(self, cv, trans, hier)

    def offGrid(self, grid):
        return _ui.array_offGrid(self, grid)

    def dbPrint(self, fp):
        return _ui.array_dbPrint(self, fp)

    def write(self, s):
        return _ui.array_write(self, s)

# Register array in _ui:
_ui.array_swigregister(array)

class cell(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.cell_swiginit(self, _ui.new_cell())
    __swig_destroy__ = _ui.delete_cell

    def cellViews(self):
        return _ui.cell_cellViews(self)

    def name(self, *args):
        return _ui.cell_name(self, *args)

    def addCellView(self, cv):
        return _ui.cell_addCellView(self, cv)

    def dbFindCellViewByView(self, viewName):
        return _ui.cell_dbFindCellViewByView(self, viewName)

    def objType(self):
        return _ui.cell_objType(self)

    def objName(self):
        return _ui.cell_objName(self)

    def layer(self):
        return _ui.cell_layer(self)

    def getCellViews(self):
        return _ui.cell_getCellViews(self)

# Register cell in _ui:
_ui.cell_swigregister(cell)

TILEOP_AND = _ui.TILEOP_AND
TILEOP_OR2 = _ui.TILEOP_OR2
TILEOP_NOT2 = _ui.TILEOP_NOT2
TILEOP_XOR = _ui.TILEOP_XOR
TILEOP_OR1 = _ui.TILEOP_OR1
TILEOP_NOT1 = _ui.TILEOP_NOT1
TILEOP_SIZE = _ui.TILEOP_SIZE
TILEOP_AREA = _ui.TILEOP_AREA
OP_AND = _ui.OP_AND
OP_OR2 = _ui.OP_OR2
OP_OR1 = _ui.OP_OR1
OP_NOT2 = _ui.OP_NOT2
OP_NOT1 = _ui.OP_NOT1
OP_XOR = _ui.OP_XOR
OP_SIZE = _ui.OP_SIZE
OP_OVERUNDERSIZE = _ui.OP_OVERUNDERSIZE
OP_SELECTTOUCH = _ui.OP_SELECTTOUCH
OP_SELECTOVERLAP = _ui.OP_SELECTOVERLAP
OP_SELECTABUT = _ui.OP_SELECTABUT
class LayerCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, l1, l2):
        return _ui.LayerCmp___call__(self, l1, l2)

    def __init__(self):
        _ui.LayerCmp_swiginit(self, _ui.new_LayerCmp())
    __swig_destroy__ = _ui.delete_LayerCmp

# Register LayerCmp in _ui:
_ui.LayerCmp_swigregister(LayerCmp)

microns = _ui.microns
inches = _ui.inches
class cellView(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.cellView_swiginit(self, _ui.new_cellView())
    __swig_destroy__ = _ui.delete_cellView

    def dbCreateArc(self, origin, xRadius, yRadius, startAngle, spanAngle, layer):
        return _ui.cellView_dbCreateArc(self, origin, xRadius, yRadius, startAngle, spanAngle, layer)

    def dbCreateArray(self, *args):
        return _ui.cellView_dbCreateArray(self, *args)

    def dbCreateCircle(self, origin, radius, layer, numSegs=128):
        return _ui.cellView_dbCreateCircle(self, origin, radius, layer, numSegs)

    def dbCreateEllipse(self, origin, xRadius, yRadius, layer, numSegs=128):
        return _ui.cellView_dbCreateEllipse(self, origin, xRadius, yRadius, layer, numSegs)

    def dbCreateGroup(self, name, origin, orient):
        return _ui.cellView_dbCreateGroup(self, name, origin, orient)

    def dbCreateHole(self, *args):
        return _ui.cellView_dbCreateHole(self, *args)

    def dbCreateHSeg(self, x1, y1, x2, y2, lyr, net=None, width=0, style=DB_TRUNCATED, createNet=True, begExt=0, endExt=0):
        return _ui.cellView_dbCreateHSeg(self, x1, y1, x2, y2, lyr, net, width, style, createNet, begExt, endExt)

    def dbCreateInst(self, *args):
        return _ui.cellView_dbCreateInst(self, *args)

    def dbCreateLabel(self, origin, theLabel, orient, mag, presentation, lyr):
        return _ui.cellView_dbCreateLabel(self, origin, theLabel, orient, mag, presentation, lyr)

    def dbCreateLine(self, *args):
        return _ui.cellView_dbCreateLine(self, *args)

    def dbCreateCoupling(self, p1, p2, layer):
        return _ui.cellView_dbCreateCoupling(self, p1, p2, layer)

    def dbCreateLpp(self, lyr):
        return _ui.cellView_dbCreateLpp(self, lyr)

    def dbCreateMPP(self, *args):
        return _ui.cellView_dbCreateMPP(self, *args)

    def dbCreateNet(self, name):
        return _ui.cellView_dbCreateNet(self, name)

    def dbCreatePath(self, *args):
        return _ui.cellView_dbCreatePath(self, *args)

    def dbCreatePin(self, name, net, dir):
        return _ui.cellView_dbCreatePin(self, name, net, dir)

    def dbCreatePolygon(self, *args):
        return _ui.cellView_dbCreatePolygon(self, *args)

    def dbCreatePort(self, pin, shape):
        return _ui.cellView_dbCreatePort(self, pin, shape)

    def dbCreateRect(self, *args):
        return _ui.cellView_dbCreateRect(self, *args)

    def dbCreateViaInst(self, name, xy, orient=R0):
        return _ui.cellView_dbCreateViaInst(self, name, xy, orient)

    def dbCreateVSeg(self, x1, y1, x2, y2, lyr, net=None, width=0, style=DB_TRUNCATED, createNet=True, begExt=0, endExt=0):
        return _ui.cellView_dbCreateVSeg(self, x1, y1, x2, y2, lyr, net, width, style, createNet, begExt, endExt)

    def dbFindGroupByName(self, name):
        return _ui.cellView_dbFindGroupByName(self, name)

    def dbFindInstByName(self, name):
        return _ui.cellView_dbFindInstByName(self, name)

    def dbFindInstByNameNoCase(self, name):
        return _ui.cellView_dbFindInstByNameNoCase(self, name)

    def dbFindInstsByRegExp(self, name):
        return _ui.cellView_dbFindInstsByRegExp(self, name)

    def dbFindNetByName(self, name):
        return _ui.cellView_dbFindNetByName(self, name)

    def dbFindNetByNameNoCase(self, name):
        return _ui.cellView_dbFindNetByNameNoCase(self, name)

    def dbFindNetsByRegExp(self, name):
        return _ui.cellView_dbFindNetsByRegExp(self, name)

    def dbFindPinByName(self, name):
        return _ui.cellView_dbFindPinByName(self, name)

    def dbFindPinByNameNoCase(self, name):
        return _ui.cellView_dbFindPinByNameNoCase(self, name)

    def dbFindPinsByRegExp(self, name):
        return _ui.cellView_dbFindPinsByRegExp(self, name)

    def dbGetOverlaps(self, *args):
        return _ui.cellView_dbGetOverlaps(self, *args)

    def dbGetHierOverlaps(self, *args):
        return _ui.cellView_dbGetHierOverlaps(self, *args)

    def dbFindHierOverlaps(self, r, lyr, allLayers=False, stop=99, start=0):
        return _ui.cellView_dbFindHierOverlaps(self, r, lyr, allLayers, stop, start)

    def dbDeleteObj(self, *args):
        return _ui.cellView_dbDeleteObj(self, *args)

    def dbMergeNet(self, _from, to):
        return _ui.cellView_dbMergeNet(self, _from, to)

    def dbCreatePCell(self, fileName):
        return _ui.cellView_dbCreatePCell(self, fileName)

    def dbCreatePCellInst(self, libName, cellName, viewName, origin, orient=R0, numRows=1, numCols=1, rowSpacing=0, colSpacing=0):
        return _ui.cellView_dbCreatePCellInst(self, libName, cellName, viewName, origin, orient, numRows, numCols, rowSpacing, colSpacing)

    def dbUpdatePCell(self, i):
        return _ui.cellView_dbUpdatePCell(self, i)

    def setPcell(self, flag):
        return _ui.cellView_setPcell(self, flag)

    def isPcell(self):
        return _ui.cellView_isPcell(self)

    def setSubMaster(self, flag):
        return _ui.cellView_setSubMaster(self, flag)

    def isSubMaster(self):
        return _ui.cellView_isSubMaster(self)

    def setPCellName(self, name):
        return _ui.cellView_setPCellName(self, name)

    def getPCellName(self):
        return _ui.cellView_getPCellName(self)

    def setPCellFile(self, name):
        return _ui.cellView_setPCellFile(self, name)

    def getPCellFile(self):
        return _ui.cellView_getPCellFile(self)

    def clear(self):
        return _ui.cellView_clear(self)

    def bBox(self, *args):
        return _ui.cellView_bBox(self, *args)

    def qBox(self):
        return _ui.cellView_qBox(self)

    def left(self):
        return _ui.cellView_left(self)

    def right(self):
        return _ui.cellView_right(self)

    def bottom(self):
        return _ui.cellView_bottom(self)

    def top(self):
        return _ui.cellView_top(self)

    def getWidth(self):
        return _ui.cellView_getWidth(self)

    def getHeight(self):
        return _ui.cellView_getHeight(self)

    def clearBbox(self):
        return _ui.cellView_clearBbox(self)

    def updateBbox(self):
        return _ui.cellView_updateBbox(self)

    def getBoundary(self):
        return _ui.cellView_getBoundary(self)

    def objType(self):
        return _ui.cellView_objType(self)

    def objName(self):
        return _ui.cellView_objName(self)

    def getNumShapes(self, *args):
        return _ui.cellView_getNumShapes(self, *args)

    def getInstHashTable(self):
        return _ui.cellView_getInstHashTable(self)

    def getNumInsts(self):
        return _ui.cellView_getNumInsts(self)

    def getNumViaInsts(self):
        return _ui.cellView_getNumViaInsts(self)

    def getNetHashTable(self):
        return _ui.cellView_getNetHashTable(self)

    def getNumNets(self):
        return _ui.cellView_getNumNets(self)

    def getPinHashTable(self):
        return _ui.cellView_getPinHashTable(self)

    def getNumPins(self):
        return _ui.cellView_getNumPins(self)

    def libName(self):
        return _ui.cellView_libName(self)

    def cellName(self, *args):
        return _ui.cellView_cellName(self, *args)

    def viewName(self, *args):
        return _ui.cellView_viewName(self, *args)

    def getLppList(self):
        return _ui.cellView_getLppList(self)

    def setLppList(self, newlist):
        return _ui.cellView_setLppList(self, newlist)

    def getLpp(self, *args):
        return _ui.cellView_getLpp(self, *args)

    def getNumLpps(self):
        return _ui.cellView_getNumLpps(self)

    def setEditable(self, b):
        return _ui.cellView_setEditable(self, b)

    def editable(self):
        return _ui.cellView_editable(self)

    def setDirty(self, d):
        return _ui.cellView_setDirty(self, d)

    def isDirty(self):
        return _ui.cellView_isDirty(self)

    def isEdited(self):
        return _ui.cellView_isEdited(self)

    def setEdited(self, cond):
        return _ui.cellView_setEdited(self, cond)

    def lib(self, *args):
        return _ui.cellView_lib(self, *args)

    def createDate(self, *args):
        return _ui.cellView_createDate(self, *args)

    def modDate(self, *args):
        return _ui.cellView_modDate(self, *args)

    def incModCount(self):
        return _ui.cellView_incModCount(self)

    def decModCount(self):
        return _ui.cellView_decModCount(self)

    def modCount(self):
        return _ui.cellView_modCount(self)

    def getNearestEdge(self, p, edge, dist):
        return _ui.cellView_getNearestEdge(self, p, edge, dist)

    def getNearestObj(self, q, dist):
        return _ui.cellView_getNearestObj(self, q, dist)

    def getNearestSeg(self, q, dist, level=0):
        return _ui.cellView_getNearestSeg(self, q, dist, level)

    def getNearestVertex(self, q, dist, level=0):
        return _ui.cellView_getNearestVertex(self, q, dist, level)

    def optimiseTrees(self):
        return _ui.cellView_optimiseTrees(self)

    def isOptimised(self):
        return _ui.cellView_isOptimised(self)

    def update(self, edited=True):
        return _ui.cellView_update(self, edited)

    def roundCorners(self, shp, inner_radius, outer_radius, segs, snap):
        return _ui.cellView_roundCorners(self, shp, inner_radius, outer_radius, segs, snap)

    def dbGetNLPPropList(self):
        return _ui.cellView_dbGetNLPPropList(self)

    def dbuPerUU(self, *args):
        return _ui.cellView_dbuPerUU(self, *args)

    def dbu(self, *args):
        return _ui.cellView_dbu(self, *args)

    def userUnits(self, *args):
        return _ui.cellView_userUnits(self, *args)

    def units(self):
        return _ui.cellView_units(self)

    def setCell(self, c):
        return _ui.cellView_setCell(self, c)

    def getCell(self):
        return _ui.cellView_getCell(self)

    def setView(self, v):
        return _ui.cellView_setView(self, v)

    def getView(self):
        return _ui.cellView_getView(self)

    def addInst(self, i, name=None):
        return _ui.cellView_addInst(self, i, name)

    def deleteInst(self, obj, opt=True):
        return _ui.cellView_deleteInst(self, obj, opt)

    def instSizeHint(self, size):
        return _ui.cellView_instSizeHint(self, size)

    def addViaInst(self, v):
        return _ui.cellView_addViaInst(self, v)

    def deleteViaInst(self, v, opt=True):
        return _ui.cellView_deleteViaInst(self, v, opt)

    def viaInstSizeHint(self, size):
        return _ui.cellView_viaInstSizeHint(self, size)

    def addNet(self, n):
        return _ui.cellView_addNet(self, n)

    def deleteNet(self, n):
        return _ui.cellView_deleteNet(self, n)

    def netSizeHint(self, size):
        return _ui.cellView_netSizeHint(self, size)

    def addPin(self, p):
        return _ui.cellView_addPin(self, p)

    def deletePin(self, p):
        return _ui.cellView_deletePin(self, p)

    def pinSizeHint(self, size):
        return _ui.cellView_pinSizeHint(self, size)

    def addShape(self, s):
        return _ui.cellView_addShape(self, s)

    def deleteShape(self, s, opt=True):
        return _ui.cellView_deleteShape(self, s, opt)

    def shapeSizeHint(self, layer, size):
        return _ui.cellView_shapeSizeHint(self, layer, size)

    def addLpp(self, lpp, lyr):
        return _ui.cellView_addLpp(self, lpp, lyr)

    def deleteLpp(self, lpp):
        return _ui.cellView_deleteLpp(self, lpp)

    def findNearestHierSeg(self, cv, p, trans, edge, dist, distance, hierLevel, level):
        return _ui.cellView_findNearestHierSeg(self, cv, p, trans, edge, dist, distance, hierLevel, level)

    def findNearestHierVertex(self, cv, p, trans, vert, dist, distance, hierLevel, level):
        return _ui.cellView_findNearestHierVertex(self, cv, p, trans, vert, dist, distance, hierLevel, level)

    def findHierOverlaps(self, cv, r, lyr, allLayers, trans, hierLevel, start, stop, count):
        return _ui.cellView_findHierOverlaps(self, cv, r, lyr, allLayers, trans, hierLevel, start, stop, count)

    def getSegsInRect(self, r, segs):
        return _ui.cellView_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.cellView_getVertsInRect(self, r, verts)

    def setSpecial(self, flag):
        return _ui.cellView_setSpecial(self, flag)

    def isSpecial(self):
        return _ui.cellView_isSpecial(self)

    def setHidden(self, flag):
        return _ui.cellView_setHidden(self, flag)

    def isHidden(self):
        return _ui.cellView_isHidden(self)

    def write(self, s):
        return _ui.cellView_write(self, s)

    def dbPrint(self, fp):
        return _ui.cellView_dbPrint(self, fp)

    def setTopLevel(self, top):
        return _ui.cellView_setTopLevel(self, top)

    def isTopLevel(self):
        return _ui.cellView_isTopLevel(self)

    def snapPathCentre(self, *args):
        return _ui.cellView_snapPathCentre(self, *args)

    def snapPathOutline(self, *args):
        return _ui.cellView_snapPathOutline(self, *args)

    def layer(self):
        return _ui.cellView_layer(self)

    def incrActiveThreads(self):
        return _ui.cellView_incrActiveThreads(self)

    def decrActiveThreads(self):
        return _ui.cellView_decrActiveThreads(self)

    def isActiveThreadsDone(self):
        return _ui.cellView_isActiveThreadsDone(self)

    def getInsts(self):
        return _ui.cellView_getInsts(self)

    def getPyObject(self):
        return _ui.cellView_getPyObject(self)

    def getInstsByRegExp(self, name):
        return _ui.cellView_getInstsByRegExp(self, name)

    def getNets(self):
        return _ui.cellView_getNets(self)

    def getNetsByRegExp(self, name):
        return _ui.cellView_getNetsByRegExp(self, name)

    def getPins(self):
        return _ui.cellView_getPins(self)

    def getPinsByRegExp(self, name):
        return _ui.cellView_getPinsByRegExp(self, name)

    def getLpps(self):
        return _ui.cellView_getLpps(self)

    def getOverlaps(self, r, lyr, allLayers=False, instsToo=False, viaInstsToo=False):
        return _ui.cellView_getOverlaps(self, r, lyr, allLayers, instsToo, viaInstsToo)

    def getHierOverlaps(self, *args):
        return _ui.cellView_getHierOverlaps(self, *args)

    def getShapes(self, lpp):
        return _ui.cellView_getShapes(self, lpp)

# Register cellView in _ui:
_ui.cellView_swigregister(cellView)

class optimiseTreeTask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lpp, cv):
        _ui.optimiseTreeTask_swiginit(self, _ui.new_optimiseTreeTask(lpp, cv))

    def run(self):
        return _ui.optimiseTreeTask_run(self)
    __swig_destroy__ = _ui.delete_optimiseTreeTask

# Register optimiseTreeTask in _ui:
_ui.optimiseTreeTask_swigregister(optimiseTreeTask)

class instIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cv):
        _ui.instIterator_swiginit(self, _ui.new_instIterator(cv))
    __swig_destroy__ = _ui.delete_instIterator

    def __ref__(self):
        return _ui.instIterator___ref__(self)

    def value(self):
        return _ui.instIterator_value(self)

    def next(self):
        return _ui.instIterator_next(self)

    def end(self):
        return _ui.instIterator_end(self)

# Register instIterator in _ui:
_ui.instIterator_swigregister(instIterator)

class netIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cv):
        _ui.netIterator_swiginit(self, _ui.new_netIterator(cv))
    __swig_destroy__ = _ui.delete_netIterator

    def __ref__(self):
        return _ui.netIterator___ref__(self)

    def value(self):
        return _ui.netIterator_value(self)

    def next(self):
        return _ui.netIterator_next(self)

    def end(self):
        return _ui.netIterator_end(self)

# Register netIterator in _ui:
_ui.netIterator_swigregister(netIterator)

class pinIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cv):
        _ui.pinIterator_swiginit(self, _ui.new_pinIterator(cv))
    __swig_destroy__ = _ui.delete_pinIterator

    def __ref__(self):
        return _ui.pinIterator___ref__(self)

    def value(self):
        return _ui.pinIterator_value(self)

    def next(self):
        return _ui.pinIterator_next(self)

    def end(self):
        return _ui.pinIterator_end(self)

# Register pinIterator in _ui:
_ui.pinIterator_swigregister(pinIterator)

class lppIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cv):
        _ui.lppIterator_swiginit(self, _ui.new_lppIterator(cv))
    __swig_destroy__ = _ui.delete_lppIterator

    def __ref__(self):
        return _ui.lppIterator___ref__(self)

    def value(self):
        return _ui.lppIterator_value(self)

    def next(self):
        return _ui.lppIterator_next(self)

    def end(self):
        return _ui.lppIterator_end(self)

# Register lppIterator in _ui:
_ui.lppIterator_swigregister(lppIterator)

class dbObjIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, list):
        _ui.dbObjIterator_swiginit(self, _ui.new_dbObjIterator(list))
    __swig_destroy__ = _ui.delete_dbObjIterator

    def __ref__(self):
        return _ui.dbObjIterator___ref__(self)

    def value(self):
        return _ui.dbObjIterator_value(self)

    def next(self):
        return _ui.dbObjIterator_next(self)

    def end(self):
        return _ui.dbObjIterator_end(self)

# Register dbObjIterator in _ui:
_ui.dbObjIterator_swigregister(dbObjIterator)

class shapeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, list):
        _ui.shapeIterator_swiginit(self, _ui.new_shapeIterator(list))
    __swig_destroy__ = _ui.delete_shapeIterator

    def __ref__(self):
        return _ui.shapeIterator___ref__(self)

    def value(self):
        return _ui.shapeIterator_value(self)

    def next(self):
        return _ui.shapeIterator_next(self)

    def end(self):
        return _ui.shapeIterator_end(self)

# Register shapeIterator in _ui:
_ui.shapeIterator_swigregister(shapeIterator)

class coupling(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.coupling_swiginit(self, _ui.new_coupling())
    __swig_destroy__ = _ui.delete_coupling

    def setP0(self, p):
        return _ui.coupling_setP0(self, p)

    def getP0(self):
        return _ui.coupling_getP0(self)

    def setP1(self, p):
        return _ui.coupling_setP1(self, p)

    def getP1(self):
        return _ui.coupling_getP1(self)

    def getQP0(self):
        return _ui.coupling_getQP0(self)

    def getQP1(self):
        return _ui.coupling_getQP1(self)

    def left(self):
        return _ui.coupling_left(self)

    def right(self):
        return _ui.coupling_right(self)

    def bottom(self):
        return _ui.coupling_bottom(self)

    def top(self):
        return _ui.coupling_top(self)

    def coord(self, disc):
        return _ui.coupling_coord(self, disc)

    def nPoints(self):
        return _ui.coupling_nPoints(self)

    def ptlist(self):
        return _ui.coupling_ptlist(self)

    def offGrid(self, grid):
        return _ui.coupling_offGrid(self, grid)

    def manhattan(self):
        return _ui.coupling_manhattan(self)

    def setCap(self, c):
        return _ui.coupling_setCap(self, c)

    def getCap(self):
        return _ui.coupling_getCap(self)

    def getCapValue(self):
        return _ui.coupling_getCapValue(self)

    def getNet1Name(self):
        return _ui.coupling_getNet1Name(self)

    def getNet2Name(self):
        return _ui.coupling_getNet2Name(self)

    def setColor(self, c):
        return _ui.coupling_setColor(self, c)

    def getColor(self):
        return _ui.coupling_getColor(self)

    def setWidth(self, c):
        return _ui.coupling_setWidth(self, c)

    def getWidth(self):
        return _ui.coupling_getWidth(self)

    def bBox(self, *args):
        return _ui.coupling_bBox(self, *args)

    def qBox(self):
        return _ui.coupling_qBox(self)

    def objType(self):
        return _ui.coupling_objType(self)

    def objName(self):
        return _ui.coupling_objName(self)

    def reshape(self, x, y, nPoints):
        return _ui.coupling_reshape(self, x, y, nPoints)

    def ptInPoly(self, *args):
        return _ui.coupling_ptInPoly(self, *args)

    def ptInRect(self, *args):
        return _ui.coupling_ptInRect(self, *args)

    def length(self):
        return _ui.coupling_length(self)

    def getLength(self):
        return _ui.coupling_getLength(self)

    def transform(self, *args):
        return _ui.coupling_transform(self, *args)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.coupling_getNearestEdge(self, p, edge, c, e)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.coupling_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.coupling_getVertexAdjPts(self, v, pt1, pt2)

    def getNearestVertex(self, p, v):
        return _ui.coupling_getNearestVertex(self, p, v)

    def getSegsInRect(self, r, segs):
        return _ui.coupling_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.coupling_getVertsInRect(self, r, verts)

    def getTransformPoints(self, trans, pts, scale=1.0):
        return _ui.coupling_getTransformPoints(self, trans, pts, scale)

    def Move(self, _from, delta, opt=True):
        return _ui.coupling_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.coupling_Copy(self, _from, delta, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.coupling_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.coupling_Stretch(self, *args)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.coupling_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.coupling_scale(self, scale, grid)

    def shapeToPoly(self, _from):
        return _ui.coupling_shapeToPoly(self, _from)

    def write(self, s):
        return _ui.coupling_write(self, s)

    def __eq__(self, other):
        return _ui.coupling___eq__(self, other)

    def __ne__(self, other):
        return _ui.coupling___ne__(self, other)

    def __lt__(self, other):
        return _ui.coupling___lt__(self, other)

# Register coupling in _ui:
_ui.coupling_swigregister(coupling)

class Edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoIntersection = _ui.Edge_NoIntersection
    BoundedIntersection = _ui.Edge_BoundedIntersection
    UnboundedIntersection = _ui.Edge_UnboundedIntersection

    def __init__(self, *args):
        _ui.Edge_swiginit(self, _ui.new_Edge(*args))
    __swig_destroy__ = _ui.delete_Edge

    def getP0(self):
        return _ui.Edge_getP0(self)

    def getP1(self):
        return _ui.Edge_getP1(self)

    def setP0(self, p):
        return _ui.Edge_setP0(self, p)

    def setP1(self, p):
        return _ui.Edge_setP1(self, p)

    def offset(self, dx, dy):
        return _ui.Edge_offset(self, dx, dy)

    def __eq__(self, _from):
        return _ui.Edge___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.Edge___ne__(self, _from)

    def length(self):
        return _ui.Edge_length(self)

    def isHorizontal(self):
        return _ui.Edge_isHorizontal(self)

    def isVertical(self):
        return _ui.Edge_isVertical(self)

    def isOrthogonal(self):
        return _ui.Edge_isOrthogonal(self)

    def isDiagonal(self):
        return _ui.Edge_isDiagonal(self)

    def deltaX(self):
        return _ui.Edge_deltaX(self)

    def deltaY(self):
        return _ui.Edge_deltaY(self)

    def contains(self, p, includeEnds=True):
        return _ui.Edge_contains(self, p, includeEnds)

    def crosses(self, *args):
        return _ui.Edge_crosses(self, *args)

    def pointToEdge(self, p):
        return _ui.Edge_pointToEdge(self, p)

    def distance(self, e):
        return _ui.Edge_distance(self, e)

    def intersectsAt(self, other):
        return _ui.Edge_intersectsAt(self, other)

    def intersects(self, *args):
        return _ui.Edge_intersects(self, *args)

    def isColinear(self, other):
        return _ui.Edge_isColinear(self, other)

    def parallel(self, other):
        return _ui.Edge_parallel(self, other)

    def left(self, p):
        return _ui.Edge_left(self, p)

    def nearestPoint(self, p):
        return _ui.Edge_nearestPoint(self, p)

    def normalTo(self, p):
        return _ui.Edge_normalTo(self, p)

    def projects(self, e1, e2, e3, e4):
        return _ui.Edge_projects(self, e1, e2, e3, e4)
    p0 = property(_ui.Edge_p0_get, _ui.Edge_p0_set)
    p1 = property(_ui.Edge_p1_get, _ui.Edge_p1_set)

# Register Edge in _ui:
_ui.Edge_swigregister(Edge)

class EdgeF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoIntersection = _ui.EdgeF_NoIntersection
    BoundedIntersection = _ui.EdgeF_BoundedIntersection
    UnboundedIntersection = _ui.EdgeF_UnboundedIntersection

    def __init__(self, *args):
        _ui.EdgeF_swiginit(self, _ui.new_EdgeF(*args))
    __swig_destroy__ = _ui.delete_EdgeF

    def getP0(self):
        return _ui.EdgeF_getP0(self)

    def getP1(self):
        return _ui.EdgeF_getP1(self)

    def setP0(self, p):
        return _ui.EdgeF_setP0(self, p)

    def setP1(self, p):
        return _ui.EdgeF_setP1(self, p)

    def offset(self, *args):
        return _ui.EdgeF_offset(self, *args)

    def __eq__(self, _from):
        return _ui.EdgeF___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.EdgeF___ne__(self, _from)

    def length(self):
        return _ui.EdgeF_length(self)

    def isHorizontal(self):
        return _ui.EdgeF_isHorizontal(self)

    def isVertical(self):
        return _ui.EdgeF_isVertical(self)

    def isOrthogonal(self):
        return _ui.EdgeF_isOrthogonal(self)

    def isDiagonal(self):
        return _ui.EdgeF_isDiagonal(self)

    def deltaX(self):
        return _ui.EdgeF_deltaX(self)

    def deltaY(self):
        return _ui.EdgeF_deltaY(self)

    def contains(self, *args):
        return _ui.EdgeF_contains(self, *args)

    def crosses(self, *args):
        return _ui.EdgeF_crosses(self, *args)

    def pointToEdge(self, *args):
        return _ui.EdgeF_pointToEdge(self, *args)

    def distance(self, e):
        return _ui.EdgeF_distance(self, e)

    def intersectsAt(self, other):
        return _ui.EdgeF_intersectsAt(self, other)

    def intersects(self, *args):
        return _ui.EdgeF_intersects(self, *args)

    def isColinear(self, other):
        return _ui.EdgeF_isColinear(self, other)

    def parallel(self, other):
        return _ui.EdgeF_parallel(self, other)

    def left(self, p):
        return _ui.EdgeF_left(self, p)

    def nearestPoint(self, p):
        return _ui.EdgeF_nearestPoint(self, p)

    def normalTo(self, p):
        return _ui.EdgeF_normalTo(self, p)

    def projects(self, e1, e2, e3, e4):
        return _ui.EdgeF_projects(self, e1, e2, e3, e4)
    p0 = property(_ui.EdgeF_p0_get, _ui.EdgeF_p0_set)
    p1 = property(_ui.EdgeF_p1_get, _ui.EdgeF_p1_set)

# Register EdgeF in _ui:
_ui.EdgeF_swigregister(EdgeF)

class group(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.group_swiginit(self, _ui.new_group())
    __swig_destroy__ = _ui.delete_group

    def objType(self):
        return _ui.group_objType(self)

    def objName(self):
        return _ui.group_objName(self)

    def setName(self, s):
        return _ui.group_setName(self, s)

    def name(self):
        return _ui.group_name(self)

    def bBox(self, *args):
        return _ui.group_bBox(self, *args)

    def qBox(self):
        return _ui.group_qBox(self)

    def left(self):
        return _ui.group_left(self)

    def right(self):
        return _ui.group_right(self)

    def bottom(self):
        return _ui.group_bottom(self)

    def top(self):
        return _ui.group_top(self)

    def coord(self, disc):
        return _ui.group_coord(self, disc)

    def orient(self, *args):
        return _ui.group_orient(self, *args)

    def origin(self, *args):
        return _ui.group_origin(self, *args)

    def addObject(self, obj):
        return _ui.group_addObject(self, obj)

    def deleteObj(self, obj):
        return _ui.group_deleteObj(self, obj)

    def size(self):
        return _ui.group_size(self)

    def members(self):
        return _ui.group_members(self)

    def clear(self):
        return _ui.group_clear(self)

    def member(self, obj):
        return _ui.group_member(self, obj)

    def nPoints(self):
        return _ui.group_nPoints(self)

    def ptlist(self, *args):
        return _ui.group_ptlist(self, *args)

    def coords(self):
        return _ui.group_coords(self)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.group_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, v):
        return _ui.group_getNearestVertex(self, p, v)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.group_getSegAdjPts(self, seg, pt1, pt2)

    def getSegsInRect(self, r, segs):
        return _ui.group_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.group_getVertsInRect(self, r, verts)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.group_getVertexAdjPts(self, v, pt1, pt2)

    def ptInPoly(self, *args):
        return _ui.group_ptInPoly(self, *args)

    def Move(self, _from, delta, opt=True):
        return _ui.group_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.group_Copy(self, _from, delta, lyr)

    def transform(self, *args):
        return _ui.group_transform(self, *args)

    def layer(self):
        return _ui.group_layer(self)

# Register group in _ui:
_ui.group_swigregister(group)

class dbHierObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.dbHierObj_swiginit(self, _ui.new_dbHierObj(*args))
    __swig_destroy__ = _ui.delete_dbHierObj

    def __eq__(self, other):
        return _ui.dbHierObj___eq__(self, other)

    def __ne__(self, other):
        return _ui.dbHierObj___ne__(self, other)

    def __lt__(self, other):
        return _ui.dbHierObj___lt__(self, other)

    def object(self):
        return _ui.dbHierObj_object(self)

    def transform(self):
        return _ui.dbHierObj_transform(self)

    def layer(self):
        return _ui.dbHierObj_layer(self)

    def cv(self):
        return _ui.dbHierObj_cv(self)

# Register dbHierObj in _ui:
_ui.dbHierObj_swigregister(dbHierObj)

TRUNCATE = _ui.TRUNCATE
ROUNDED = _ui.ROUNDED
EXTEND = _ui.EXTEND
VAREXTEND = _ui.VAREXTEND
OCTAGONAL = _ui.OCTAGONAL
class HSeg(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.HSeg_swiginit(self, _ui.new_HSeg(*args))
    __swig_destroy__ = _ui.delete_HSeg

    def left(self):
        return _ui.HSeg_left(self)

    def right(self):
        return _ui.HSeg_right(self)

    def bottom(self):
        return _ui.HSeg_bottom(self)

    def top(self):
        return _ui.HSeg_top(self)

    def coord(self, disc):
        return _ui.HSeg_coord(self, disc)

    def offGrid(self, grid):
        return _ui.HSeg_offGrid(self, grid)

    def manhattan(self):
        return _ui.HSeg_manhattan(self)

    def setStyle(self, val):
        return _ui.HSeg_setStyle(self, val)

    def getStyle(self):
        return _ui.HSeg_getStyle(self)

    def setType(self, val):
        return _ui.HSeg_setType(self, val)

    def getType(self):
        return _ui.HSeg_getType(self)

    def getTypeStr(self):
        return _ui.HSeg_getTypeStr(self)

    def setShape(self, val):
        return _ui.HSeg_setShape(self, val)

    def getShape(self):
        return _ui.HSeg_getShape(self)

    def getShapeStr(self):
        return _ui.HSeg_getShapeStr(self)

    def orient(self, *args):
        return _ui.HSeg_orient(self, *args)

    def getOrientStr(self):
        return _ui.HSeg_getOrientStr(self)

    def setSpecial(self, val):
        return _ui.HSeg_setSpecial(self, val)

    def isSpecial(self):
        return _ui.HSeg_isSpecial(self)

    def setHasNet(self, val):
        return _ui.HSeg_setHasNet(self, val)

    def hasNet(self):
        return _ui.HSeg_hasNet(self)

    def setCv(self, cv):
        return _ui.HSeg_setCv(self, cv)

    def cv(self):
        return _ui.HSeg_cv(self)

    def setPoints(self, x1, y1, x2, y2):
        return _ui.HSeg_setPoints(self, x1, y1, x2, y2)

    def setNet(self, n, check=True):
        return _ui.HSeg_setNet(self, n, check)

    def getNet(self):
        return _ui.HSeg_getNet(self)

    def setIndex(self, i):
        return _ui.HSeg_setIndex(self, i)

    def index(self):
        return _ui.HSeg_index(self)

    def bBox(self, *args):
        return _ui.HSeg_bBox(self, *args)

    def qBox(self):
        return _ui.HSeg_qBox(self)

    def objType(self):
        return _ui.HSeg_objType(self)

    def objName(self):
        return _ui.HSeg_objName(self)

    def layer(self):
        return _ui.HSeg_layer(self)

    def width(self):
        return _ui.HSeg_width(self)

    def area(self):
        return _ui.HSeg_area(self)

    def perimeter(self):
        return _ui.HSeg_perimeter(self)

    def getFirstVertex(self):
        return _ui.HSeg_getFirstVertex(self)

    def getLastVertex(self):
        return _ui.HSeg_getLastVertex(self)

    def extent(self):
        return _ui.HSeg_extent(self)

    def setExtent(self, e):
        return _ui.HSeg_setExtent(self, e)

    def origin(self):
        return _ui.HSeg_origin(self)

    def setOrigin(self, x, y):
        return _ui.HSeg_setOrigin(self, x, y)

    def ptInPoly(self, *args):
        return _ui.HSeg_ptInPoly(self, *args)

    def Move(self, cv, delta, opt=True):
        return _ui.HSeg_Move(self, cv, delta, opt)

    def Copy(self, cv, delta, lyr=-1):
        return _ui.HSeg_Copy(self, cv, delta, lyr)

    def Flatten(self, cv, trans, hier=True):
        return _ui.HSeg_Flatten(self, cv, trans, hier)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.HSeg_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, vert):
        return _ui.HSeg_getNearestVertex(self, p, vert)

    def getSegsInRect(self, r, segs):
        return _ui.HSeg_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.HSeg_getVertsInRect(self, r, verts)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.HSeg_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.HSeg_getVertexAdjPts(self, v, pt1, pt2)

    def transform(self, *args):
        return _ui.HSeg_transform(self, *args)

    def getNetName(self):
        return _ui.HSeg_getNetName(self)

    def length(self):
        return _ui.HSeg_length(self)

    def ptlist(self):
        return _ui.HSeg_ptlist(self)

    def nPoints(self):
        return _ui.HSeg_nPoints(self)

    def bias(self, bias, Xgrid, Ygrid):
        return _ui.HSeg_bias(self, bias, Xgrid, Ygrid)

    def scale(self, scale, grid):
        return _ui.HSeg_scale(self, scale, grid)

    def dbPrint(self, fp):
        return _ui.HSeg_dbPrint(self, fp)

    def write(self, s):
        return _ui.HSeg_write(self, s)

# Register HSeg in _ui:
_ui.HSeg_swigregister(HSeg)

class instPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, i, n, name, warn=True):
        _ui.instPin_swiginit(self, _ui.new_instPin(i, n, name, warn))
    __swig_destroy__ = _ui.delete_instPin

    def objType(self):
        return _ui.instPin_objType(self)

    def objName(self):
        return _ui.instPin_objName(self)

    def setInst(self, i):
        return _ui.instPin_setInst(self, i)

    def getInst(self):
        return _ui.instPin_getInst(self)

    def setName(self, name):
        return _ui.instPin_setName(self, name)

    def getName(self):
        return _ui.instPin_getName(self)

    def setNet(self, n):
        return _ui.instPin_setNet(self, n)

    def getNet(self):
        return _ui.instPin_getNet(self)

    def setPin(self, p):
        return _ui.instPin_setPin(self, p)

    def getPin(self):
        return _ui.instPin_getPin(self)

    def setSpecial(self, val):
        return _ui.instPin_setSpecial(self, val)

    def isSpecial(self):
        return _ui.instPin_isSpecial(self)

    def setBound(self, val):
        return _ui.instPin_setBound(self, val)

    def isBound(self):
        return _ui.instPin_isBound(self)

    def setWired(self, val):
        return _ui.instPin_setWired(self, val)

    def isWired(self):
        return _ui.instPin_isWired(self)

    def getPortLoc(self):
        return _ui.instPin_getPortLoc(self)

    def getNumPorts(self):
        return _ui.instPin_getNumPorts(self)

    def isSupplyPin(self):
        return _ui.instPin_isSupplyPin(self)

# Register instPin in _ui:
_ui.instPin_swigregister(instPin)

normal = _ui.normal
cdlLabel = _ui.cdlLabel
pyLabel = _ui.pyLabel
maskLabel = _ui.maskLabel
instLabel = _ui.instLabel
pinLabel = _ui.pinLabel
deviceLabel = _ui.deviceLabel
deviceAnnotate = _ui.deviceAnnotate
class label(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.label_swiginit(self, _ui.new_label(*args))
    __swig_destroy__ = _ui.delete_label

    def left(self):
        return _ui.label_left(self)

    def right(self):
        return _ui.label_right(self)

    def bottom(self):
        return _ui.label_bottom(self)

    def top(self):
        return _ui.label_top(self)

    def coord(self, disc):
        return _ui.label_coord(self, disc)

    def offGrid(self, grid):
        return _ui.label_offGrid(self, grid)

    def manhattan(self):
        return _ui.label_manhattan(self)

    def theLabel(self, *args):
        return _ui.label_theLabel(self, *args)

    def height(self, *args):
        return _ui.label_height(self, *args)

    def width(self, *args):
        return _ui.label_width(self, *args)

    def orient(self, *args):
        return _ui.label_orient(self, *args)

    def origin(self, *args):
        return _ui.label_origin(self, *args)

    def setType(self, type):
        return _ui.label_setType(self, type)

    def getType(self):
        return _ui.label_getType(self)

    def align(self, *args):
        return _ui.label_align(self, *args)

    def overline(self, *args):
        return _ui.label_overline(self, *args)

    def underline(self, *args):
        return _ui.label_underline(self, *args)

    def strikethru(self, *args):
        return _ui.label_strikethru(self, *args)

    def flags(self, *args):
        return _ui.label_flags(self, *args)

    def bBox(self, *args):
        return _ui.label_bBox(self, *args)

    def qBox(self):
        return _ui.label_qBox(self)

    def textBox(self):
        return _ui.label_textBox(self)

    def objType(self):
        return _ui.label_objType(self)

    def objName(self):
        return _ui.label_objName(self)

    def nPoints(self):
        return _ui.label_nPoints(self)

    def ptlist(self):
        return _ui.label_ptlist(self)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.label_getNearestEdge(self, p, edge, c, e)

    def transform(self, *args):
        return _ui.label_transform(self, *args)

    def ptInPoly(self, *args):
        return _ui.label_ptInPoly(self, *args)

    def Move(self, cv, delta, opt=True):
        return _ui.label_Move(self, cv, delta, opt)

    def Copy(self, cv, delta, lyr=-1):
        return _ui.label_Copy(self, cv, delta, lyr)

    def Flatten(self, cv, trans, hier=True):
        return _ui.label_Flatten(self, cv, trans, hier)

    def Stretch(self, *args):
        return _ui.label_Stretch(self, *args)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.label_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.label_scale(self, scale, grid)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.label_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.label_getVertexAdjPts(self, v, pt1, pt2)

    def getTextOrient(self):
        return _ui.label_getTextOrient(self)

    def length(self):
        return _ui.label_length(self)

    def adjustBbox(self, textBox):
        return _ui.label_adjustBbox(self, textBox)

    def shapeToPoly(self, _from):
        return _ui.label_shapeToPoly(self, _from)

    def dbPrint(self, fp):
        return _ui.label_dbPrint(self, fp)

    def write(self, s):
        return _ui.label_write(self, s)

    def __eq__(self, other):
        return _ui.label___eq__(self, other)

    def __ne__(self, other):
        return _ui.label___ne__(self, other)

    def __lt__(self, other):
        return _ui.label___lt__(self, other)

# Register label in _ui:
_ui.label_swigregister(label)

F_HOLLOW = _ui.F_HOLLOW
F_SOLID = _ui.F_SOLID
F_STIPPLE = _ui.F_STIPPLE
F_CROSSED = _ui.F_CROSSED
F_UNKNOWN = _ui.F_UNKNOWN
T_CUT = _ui.T_CUT
T_MASTERSLICE = _ui.T_MASTERSLICE
T_ROUTING = _ui.T_ROUTING
T_BLOCKAGE = _ui.T_BLOCKAGE
T_PIN = _ui.T_PIN
T_OVERLAP = _ui.T_OVERLAP
T_WELL = _ui.T_WELL
T_DIFFUSION = _ui.T_DIFFUSION
T_POLY = _ui.T_POLY
T_IMPLANT = _ui.T_IMPLANT
T_NONE = _ui.T_NONE
R_NONE = _ui.R_NONE
R_SPACING = _ui.R_SPACING
R_ENCLOSURE = _ui.R_ENCLOSURE
R_EXTENSION = _ui.R_EXTENSION
R_OVERLAP = _ui.R_OVERLAP
LAYER_HORIZONTAL = _ui.LAYER_HORIZONTAL
LAYER_VERTICAL = _ui.LAYER_VERTICAL
LAYER_NONE = _ui.LAYER_NONE
class techRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.techRule_swiginit(self, _ui.new_techRule(*args))

    def setOtherLayer(self, lyr1):
        return _ui.techRule_setOtherLayer(self, lyr1)

    def otherLayer(self):
        return _ui.techRule_otherLayer(self)

    def setValue(self, val):
        return _ui.techRule_setValue(self, val)

    def value(self):
        return _ui.techRule_value(self)

    def setReversed(self, val):
        return _ui.techRule_setReversed(self, val)

    def isReversed(self):
        return _ui.techRule_isReversed(self)

    def setType(self, type):
        return _ui.techRule_setType(self, type)

    def getType(self):
        return _ui.techRule_getType(self)
    __swig_destroy__ = _ui.delete_techRule

# Register techRule in _ui:
_ui.techRule_swigregister(techRule)

class Layer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.Layer_swiginit(self, _ui.new_Layer())
    __swig_destroy__ = _ui.delete_Layer

    def clear(self):
        return _ui.Layer_clear(self)

    def clearTwoLayerRules(self):
        return _ui.Layer_clearTwoLayerRules(self)

    def twoLayerRules(self):
        return _ui.Layer_twoLayerRules(self)

    def addTwoLayerRule(self, rule):
        return _ui.Layer_addTwoLayerRule(self, rule)

    def clearTwoLayerSpaceRules(self):
        return _ui.Layer_clearTwoLayerSpaceRules(self)

    def enclosureRules(self):
        return _ui.Layer_enclosureRules(self)

    def addEnclosureRule(self, rule):
        return _ui.Layer_addEnclosureRule(self, rule)

    def clearEnclosureRules(self):
        return _ui.Layer_clearEnclosureRules(self)

    def extensionRules(self):
        return _ui.Layer_extensionRules(self)

    def addExtensionRule(self, rule):
        return _ui.Layer_addExtensionRule(self, rule)

    def clearExtensionRules(self):
        return _ui.Layer_clearExtensionRules(self)

    def overlapRules(self):
        return _ui.Layer_overlapRules(self)

    def addOverlapRule(self, rule):
        return _ui.Layer_addOverlapRule(self, rule)

    def clearOverlapRules(self):
        return _ui.Layer_clearOverlapRules(self)
    m_layerNum = property(_ui.Layer_m_layerNum_get, _ui.Layer_m_layerNum_set)
    m_pLayerName = property(_ui.Layer_m_pLayerName_get, _ui.Layer_m_pLayerName_set)
    m_pPurpose = property(_ui.Layer_m_pPurpose_get, _ui.Layer_m_pPurpose_set)
    m_gdsLayer = property(_ui.Layer_m_gdsLayer_get, _ui.Layer_m_gdsLayer_set)
    m_gdsDataType = property(_ui.Layer_m_gdsDataType_get, _ui.Layer_m_gdsDataType_set)
    m_gdsExportPairs = property(_ui.Layer_m_gdsExportPairs_get, _ui.Layer_m_gdsExportPairs_set)
    m_argb = property(_ui.Layer_m_argb_get, _ui.Layer_m_argb_set)
    m_lpBits = property(_ui.Layer_m_lpBits_get, _ui.Layer_m_lpBits_set)
    m_fillType = property(_ui.Layer_m_fillType_get, _ui.Layer_m_fillType_set)
    m_lineStyle = property(_ui.Layer_m_lineStyle_get, _ui.Layer_m_lineStyle_set)
    m_layerType = property(_ui.Layer_m_layerType_get, _ui.Layer_m_layerType_set)
    m_lineWidth = property(_ui.Layer_m_lineWidth_get, _ui.Layer_m_lineWidth_set)
    m_visible = property(_ui.Layer_m_visible_get, _ui.Layer_m_visible_set)
    m_selectable = property(_ui.Layer_m_selectable_get, _ui.Layer_m_selectable_set)
    m_isUsed = property(_ui.Layer_m_isUsed_get, _ui.Layer_m_isUsed_set)
    m_isActive = property(_ui.Layer_m_isActive_get, _ui.Layer_m_isActive_set)
    m_isValid = property(_ui.Layer_m_isValid_get, _ui.Layer_m_isValid_set)
    m_pFillStyle = property(_ui.Layer_m_pFillStyle_get, _ui.Layer_m_pFillStyle_set)
    m_pLineStyle = property(_ui.Layer_m_pLineStyle_get, _ui.Layer_m_pLineStyle_set)
    m_LayerWidth = property(_ui.Layer_m_LayerWidth_get, _ui.Layer_m_LayerWidth_set)
    m_LayerDiagWidth = property(_ui.Layer_m_LayerDiagWidth_get, _ui.Layer_m_LayerDiagWidth_set)
    m_WrongWayLayerWidth = property(_ui.Layer_m_WrongWayLayerWidth_get, _ui.Layer_m_WrongWayLayerWidth_set)
    m_LayerSpace = property(_ui.Layer_m_LayerSpace_get, _ui.Layer_m_LayerSpace_set)
    m_LayerDiagSpace = property(_ui.Layer_m_LayerDiagSpace_get, _ui.Layer_m_LayerDiagSpace_set)
    m_TwoLayerSpace = property(_ui.Layer_m_TwoLayerSpace_get, _ui.Layer_m_TwoLayerSpace_set)
    m_LayerArea = property(_ui.Layer_m_LayerArea_get, _ui.Layer_m_LayerArea_set)
    m_LayerHoleArea = property(_ui.Layer_m_LayerHoleArea_get, _ui.Layer_m_LayerHoleArea_set)
    m_LayerEnc = property(_ui.Layer_m_LayerEnc_get, _ui.Layer_m_LayerEnc_set)
    m_LayerExt = property(_ui.Layer_m_LayerExt_get, _ui.Layer_m_LayerExt_set)
    m_LayerOvlp = property(_ui.Layer_m_LayerOvlp_get, _ui.Layer_m_LayerOvlp_set)
    m_pitch = property(_ui.Layer_m_pitch_get, _ui.Layer_m_pitch_set)
    m_offset = property(_ui.Layer_m_offset_get, _ui.Layer_m_offset_set)
    m_direction = property(_ui.Layer_m_direction_get, _ui.Layer_m_direction_set)
    m_resistance = property(_ui.Layer_m_resistance_get, _ui.Layer_m_resistance_set)
    m_areaCap = property(_ui.Layer_m_areaCap_get, _ui.Layer_m_areaCap_set)
    m_edgeCap = property(_ui.Layer_m_edgeCap_get, _ui.Layer_m_edgeCap_set)
    m_order = property(_ui.Layer_m_order_get, _ui.Layer_m_order_set)
    m_maskNum = property(_ui.Layer_m_maskNum_get, _ui.Layer_m_maskNum_set)
    m_pPen = property(_ui.Layer_m_pPen_get, _ui.Layer_m_pPen_set)
    m_pBrush = property(_ui.Layer_m_pBrush_get, _ui.Layer_m_pBrush_set)
    m_dimFactor = property(_ui.Layer_m_dimFactor_get, _ui.Layer_m_dimFactor_set)
    m_height = property(_ui.Layer_m_height_get, _ui.Layer_m_height_set)
    m_thickness = property(_ui.Layer_m_thickness_get, _ui.Layer_m_thickness_set)
    m_epsilon = property(_ui.Layer_m_epsilon_get, _ui.Layer_m_epsilon_set)
    m_dashes = property(_ui.Layer_m_dashes_get, _ui.Layer_m_dashes_set)

# Register Layer in _ui:
_ui.Layer_swigregister(Layer)

MAX_VIA_COUNT = _ui.MAX_VIA_COUNT
MAX_SEG_COUNT = _ui.MAX_SEG_COUNT
MAX_NONDEFRULE_COUNT = _ui.MAX_NONDEFRULE_COUNT
MAX_STYLE_COUNT = _ui.MAX_STYLE_COUNT
class nonDefLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.nonDefLayer_swiginit(self, _ui.new_nonDefLayer(*args))
    layer = property(_ui.nonDefLayer_layer_get, _ui.nonDefLayer_layer_set)
    width = property(_ui.nonDefLayer_width_get, _ui.nonDefLayer_width_set)
    diagWidth = property(_ui.nonDefLayer_diagWidth_get, _ui.nonDefLayer_diagWidth_set)
    spacing = property(_ui.nonDefLayer_spacing_get, _ui.nonDefLayer_spacing_set)
    extension = property(_ui.nonDefLayer_extension_get, _ui.nonDefLayer_extension_set)
    __swig_destroy__ = _ui.delete_nonDefLayer

# Register nonDefLayer in _ui:
_ui.nonDefLayer_swigregister(nonDefLayer)

class nonDefRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        _ui.nonDefRule_swiginit(self, _ui.new_nonDefRule(name))
    __swig_destroy__ = _ui.delete_nonDefRule

    def ruleName(self):
        return _ui.nonDefRule_ruleName(self)

    def addLayer(self, lyr):
        return _ui.nonDefRule_addLayer(self, lyr)

    def getLayerMap(self):
        return _ui.nonDefRule_getLayerMap(self)

# Register nonDefRule in _ui:
_ui.nonDefRule_swigregister(nonDefRule)

class library(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.library_swiginit(self, _ui.new_library(*args))
    __swig_destroy__ = _ui.delete_library

    def dbFindCellViewByName(self, cellName, viewName):
        return _ui.library_dbFindCellViewByName(self, cellName, viewName)

    def dbFindCellByName(self, cellName):
        return _ui.library_dbFindCellByName(self, cellName)

    def dbFindViewByName(self, viewName):
        return _ui.library_dbFindViewByName(self, viewName)

    def dbOpenCellView(self, cellName, viewName, mode):
        return _ui.library_dbOpenCellView(self, cellName, viewName, mode)

    def dbDeleteCellView(self, cellName, viewName, deleteOnDisk=True, check=True):
        return _ui.library_dbDeleteCellView(self, cellName, viewName, deleteOnDisk, check)

    def dbRenameCellView(self, newCellName, newViewName, origCellName, origViewName, deleteOnDisk=True):
        return _ui.library_dbRenameCellView(self, newCellName, newViewName, origCellName, origViewName, deleteOnDisk)

    def dbCopyCellView(self, newCellName, newViewName, origLibName, origCellName, origViewName):
        return _ui.library_dbCopyCellView(self, newCellName, newViewName, origLibName, origCellName, origViewName)

    def dbDeleteCell(self, cellname, deleteOnDisk=True):
        return _ui.library_dbDeleteCell(self, cellname, deleteOnDisk)

    def dbRenameCell(self, newCellName, origCellName, deleteOnDisk=True):
        return _ui.library_dbRenameCell(self, newCellName, origCellName, deleteOnDisk)

    def dbClose(self, *args):
        return _ui.library_dbClose(self, *args)

    def dbOpenLib(self, path, verbose=True, changeName=True):
        return _ui.library_dbOpenLib(self, path, verbose, changeName)

    def dbSaveLib(self, path, verbose=True, saveCells=True):
        return _ui.library_dbSaveLib(self, path, verbose, saveCells)

    def dbCreateView(self, viewName, type=maskLayout):
        return _ui.library_dbCreateView(self, viewName, type)

    def dbCreateCell(self, cellName):
        return _ui.library_dbCreateCell(self, cellName)

    def dbIsLockedCell(self, cellName, viewName):
        return _ui.library_dbIsLockedCell(self, cellName, viewName)

    def dbLockCell(self, cellName, viewName, lock):
        return _ui.library_dbLockCell(self, cellName, viewName, lock)

    def dbGetLockUser(self, cellName, viewName):
        return _ui.library_dbGetLockUser(self, cellName, viewName)

    def libName(self, *args):
        return _ui.library_libName(self, *args)

    def libPath(self, *args):
        return _ui.library_libPath(self, *args)

    def dbuPerUU(self, *args):
        return _ui.library_dbuPerUU(self, *args)

    def dbu(self, *args):
        return _ui.library_dbu(self, *args)

    def userUnits(self, *args):
        return _ui.library_userUnits(self, *args)

    def units(self):
        return _ui.library_units(self)

    def addSegParam(self, seg):
        return _ui.library_addSegParam(self, seg)

    def getSegParam(self, index):
        return _ui.library_getSegParam(self, index)

    def getSegParamByLayer(self, lyr):
        return _ui.library_getSegParamByLayer(self, lyr)

    def getSegIndexByLayerAndWidth(self, lyr, width):
        return _ui.library_getSegIndexByLayerAndWidth(self, lyr, width)

    def getSegIndexByLayerAndWidthAndStyle(self, lyr, width, style):
        return _ui.library_getSegIndexByLayerAndWidthAndStyle(self, lyr, width, style)

    def getSegIndexByLayer(self, lyr):
        return _ui.library_getSegIndexByLayer(self, lyr)

    def getNumSegParams(self):
        return _ui.library_getNumSegParams(self)

    def addVia(self, v, check=False):
        return _ui.library_addVia(self, v, check)

    def getVia(self, index):
        return _ui.library_getVia(self, index)

    def getViaByName(self, name):
        return _ui.library_getViaByName(self, name)

    def getViaIndexByName(self, name):
        return _ui.library_getViaIndexByName(self, name)

    def getViaNameByIndex(self, index):
        return _ui.library_getViaNameByIndex(self, index)

    def getNumVias(self):
        return _ui.library_getNumVias(self)

    def dbDeleteVia(self, name):
        return _ui.library_dbDeleteVia(self, name)

    def dbDeleteVias(self):
        return _ui.library_dbDeleteVias(self)

    def addStyle(self, id, s):
        return _ui.library_addStyle(self, id, s)

    def getStyle(self, index):
        return _ui.library_getStyle(self, index)

    def getNumStyles(self):
        return _ui.library_getNumStyles(self)

    def createNonDefRule(self, *args):
        return _ui.library_createNonDefRule(self, *args)

    def addNonDefRuleLayer(self, *args):
        return _ui.library_addNonDefRuleLayer(self, *args)

    def getNonDefRule(self, *args):
        return _ui.library_getNonDefRule(self, *args)

    def getNonDefRuleIndex(self, *args):
        return _ui.library_getNonDefRuleIndex(self, *args)

    def getNumNonDefRules(self):
        return _ui.library_getNumNonDefRules(self)

    def getNonDefRulesMap(self):
        return _ui.library_getNonDefRulesMap(self)

    def getMPPRulesMap(self):
        return _ui.library_getMPPRulesMap(self)

    def createMPPRule(self, *args):
        return _ui.library_createMPPRule(self, *args)

    def deleteMPPRule(self, name):
        return _ui.library_deleteMPPRule(self, name)

    def addMPPLayer(self, name, lyr):
        return _ui.library_addMPPLayer(self, name, lyr)

    def getMPPRule(self, name):
        return _ui.library_getMPPRule(self, name)

    def setMPPRule(self, rule):
        return _ui.library_setMPPRule(self, rule)

    def getNumMPPRules(self):
        return _ui.library_getNumMPPRules(self)

    def mppMaxWidth(self, ruleName):
        return _ui.library_mppMaxWidth(self, ruleName)

    def dbDeleteMPPs(self):
        return _ui.library_dbDeleteMPPs(self)

    def tech(self, *args):
        return _ui.library_tech(self, *args)

    def setDefUnits(self, units):
        return _ui.library_setDefUnits(self, units)

    def getDefUnits(self):
        return _ui.library_getDefUnits(self)

    def setLefUnits(self, units):
        return _ui.library_setLefUnits(self, units)

    def getLefUnits(self):
        return _ui.library_getLefUnits(self)

    def setDefDividerChar(self, c):
        return _ui.library_setDefDividerChar(self, c)

    def getDefDividerChar(self):
        return _ui.library_getDefDividerChar(self)

    def setDefBusBitChars(self, c):
        return _ui.library_setDefBusBitChars(self, c)

    def getDefBusBitChars(self):
        return _ui.library_getDefBusBitChars(self)

    def setLefBusBitChars(self, c):
        return _ui.library_setLefBusBitChars(self, c)

    def getLefBusBitChars(self):
        return _ui.library_getLefBusBitChars(self)

    def setVersion(self, version):
        return _ui.library_setVersion(self, version)

    def getVersion(self):
        return _ui.library_getVersion(self)

    def getCurrentVersion(self):
        return _ui.library_getCurrentVersion(self)

    def getCellTable(self):
        return _ui.library_getCellTable(self)

    def getViewTable(self):
        return _ui.library_getViewTable(self)

    def dbReadCell(self, s, verbose=True):
        return _ui.library_dbReadCell(self, s, verbose)

    def dbWriteCell(self, c, verbose=True):
        return _ui.library_dbWriteCell(self, c, verbose)

    def dbReadProp(self, obj, s):
        return _ui.library_dbReadProp(self, obj, s)

    def dbReadNets(self, obj, s):
        return _ui.library_dbReadNets(self, obj, s)

    def dbReadInstPins(self, cv, i, s):
        return _ui.library_dbReadInstPins(self, cv, i, s)

    def dbIsCellViewOnDisk(self, cellName, viewName):
        return _ui.library_dbIsCellViewOnDisk(self, cellName, viewName)

    def dbBindInstMasters(self):
        return _ui.library_dbBindInstMasters(self)

    def fixUpInstPins(self):
        return _ui.library_fixUpInstPins(self)
    m_open = property(_ui.library_m_open_get, _ui.library_m_open_set)
    m_curVersion = property(_ui.library_m_curVersion_get, _ui.library_m_curVersion_set)
    m_version = property(_ui.library_m_version_get, _ui.library_m_version_set)
    m_createDate = property(_ui.library_m_createDate_get, _ui.library_m_createDate_set)
    m_modDate = property(_ui.library_m_modDate_get, _ui.library_m_modDate_set)

    def getTopCells(self):
        return _ui.library_getTopCells(self)

    def cellNames(self):
        return _ui.library_cellNames(self)

    def viewNames(self):
        return _ui.library_viewNames(self)

    def getCells(self):
        return _ui.library_getCells(self)

    def getViews(self):
        return _ui.library_getViews(self)

# Register library in _ui:
_ui.library_swigregister(library)

class sort_cell_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, i, j):
        return _ui.sort_cell_list___call__(self, i, j)

    def __init__(self):
        _ui.sort_cell_list_swiginit(self, _ui.new_sort_cell_list())
    __swig_destroy__ = _ui.delete_sort_cell_list

# Register sort_cell_list in _ui:
_ui.sort_cell_list_swigregister(sort_cell_list)

class cellIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lib):
        _ui.cellIterator_swiginit(self, _ui.new_cellIterator(lib))
    __swig_destroy__ = _ui.delete_cellIterator

    def __ref__(self):
        return _ui.cellIterator___ref__(self)

    def value(self):
        return _ui.cellIterator_value(self)

    def next(self):
        return _ui.cellIterator_next(self)

# Register cellIterator in _ui:
_ui.cellIterator_swigregister(cellIterator)

class viewIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lib):
        _ui.viewIterator_swiginit(self, _ui.new_viewIterator(lib))
    __swig_destroy__ = _ui.delete_viewIterator

    def __ref__(self):
        return _ui.viewIterator___ref__(self)

    def value(self):
        return _ui.viewIterator_value(self)

    def next(self):
        return _ui.viewIterator_next(self)

# Register viewIterator in _ui:
_ui.viewIterator_swigregister(viewIterator)

class line(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.line_swiginit(self, _ui.new_line())
    __swig_destroy__ = _ui.delete_line

    def left(self):
        return _ui.line_left(self)

    def right(self):
        return _ui.line_right(self)

    def bottom(self):
        return _ui.line_bottom(self)

    def top(self):
        return _ui.line_top(self)

    def coord(self, disc):
        return _ui.line_coord(self, disc)

    def setLeft(self, val):
        return _ui.line_setLeft(self, val)

    def setRight(self, val):
        return _ui.line_setRight(self, val)

    def setBottom(self, val):
        return _ui.line_setBottom(self, val)

    def setTop(self, val):
        return _ui.line_setTop(self, val)

    def setLL(self, ll):
        return _ui.line_setLL(self, ll)

    def setUR(self, ur):
        return _ui.line_setUR(self, ur)

    def getLL(self):
        return _ui.line_getLL(self)

    def getUR(self):
        return _ui.line_getUR(self)

    def offGrid(self, grid):
        return _ui.line_offGrid(self, grid)

    def manhattan(self):
        return _ui.line_manhattan(self)

    def setWidth(self, w):
        return _ui.line_setWidth(self, w)

    def width(self):
        return _ui.line_width(self)

    def bBox(self, *args):
        return _ui.line_bBox(self, *args)

    def qBox(self):
        return _ui.line_qBox(self)

    def objType(self):
        return _ui.line_objType(self)

    def objName(self):
        return _ui.line_objName(self)

    def at(self, idx):
        return _ui.line_at(self, idx)

    def point(self, i):
        return _ui.line_point(self, i)

    def setPoint(self, *args):
        return _ui.line_setPoint(self, *args)

    def addPoint(self, p):
        return _ui.line_addPoint(self, p)

    def deletePoint(self, nPoint):
        return _ui.line_deletePoint(self, nPoint)

    def reshape(self, x, y, nPoints):
        return _ui.line_reshape(self, x, y, nPoints)

    def nPoints(self, *args):
        return _ui.line_nPoints(self, *args)

    def ptlist(self, *args):
        return _ui.line_ptlist(self, *args)

    def ptInPoly(self, *args):
        return _ui.line_ptInPoly(self, *args)

    def ptInRect(self, *args):
        return _ui.line_ptInRect(self, *args)

    def length(self):
        return _ui.line_length(self)

    def getLength(self):
        return _ui.line_getLength(self)

    def transform(self, *args):
        return _ui.line_transform(self, *args)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.line_getNearestEdge(self, p, edge, c, e)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.line_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.line_getVertexAdjPts(self, v, pt1, pt2)

    def getNearestVertex(self, p, v):
        return _ui.line_getNearestVertex(self, p, v)

    def getSegsInRect(self, r, segs):
        return _ui.line_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.line_getVertsInRect(self, r, verts)

    def deleteSeg(self, _from, seg):
        return _ui.line_deleteSeg(self, _from, seg)

    def getTransformPoints(self, trans, pts, scale=1.0):
        return _ui.line_getTransformPoints(self, trans, pts, scale)

    def getFirstVertex(self):
        return _ui.line_getFirstVertex(self)

    def getLastVertex(self):
        return _ui.line_getLastVertex(self)

    def setLastVertex(self, p):
        return _ui.line_setLastVertex(self, p)

    def Move(self, _from, delta, opt=True):
        return _ui.line_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.line_Copy(self, _from, delta, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.line_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.line_Stretch(self, *args)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.line_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.line_scale(self, scale, grid)

    def merge(self, other, cv=None):
        return _ui.line_merge(self, other, cv)

    def compressPoints(self):
        return _ui.line_compressPoints(self)

    def shapeToPoly(self, _from):
        return _ui.line_shapeToPoly(self, _from)

    def write(self, s):
        return _ui.line_write(self, s)

    def __eq__(self, other):
        return _ui.line___eq__(self, other)

    def __ne__(self, other):
        return _ui.line___ne__(self, other)

    def __lt__(self, other):
        return _ui.line___lt__(self, other)

    def __getitem__(self, i):
        return _ui.line___getitem__(self, i)

# Register line in _ui:
_ui.line_swigregister(line)

class lpp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.lpp_swiginit(self, _ui.new_lpp(*args))
    __swig_destroy__ = _ui.delete_lpp

    def clear(self, reallyDelete=True):
        return _ui.lpp_clear(self, reallyDelete)

    def layerName(self, *args):
        return _ui.lpp_layerName(self, *args)

    def purpose(self, *args):
        return _ui.lpp_purpose(self, *args)

    def layerNum(self, *args):
        return _ui.lpp_layerNum(self, *args)

    def priority(self, *args):
        return _ui.lpp_priority(self, *args)

    def numShapes(self):
        return _ui.lpp_numShapes(self)

    def cv(self):
        return _ui.lpp_cv(self)

    def insertObj(self, *args):
        return _ui.lpp_insertObj(self, *args)

    def deleteObj(self, s, reopt=True):
        return _ui.lpp_deleteObj(self, s, reopt)

    def bBox(self, *args):
        return _ui.lpp_bBox(self, *args)

    def getTree(self):
        return _ui.lpp_getTree(self)

    def isOptimised(self):
        return _ui.lpp_isOptimised(self)

    def size(self):
        return _ui.lpp_size(self)

    def vmusage(self):
        return _ui.lpp_vmusage(self)

    def sizeHint(self, size):
        return _ui.lpp_sizeHint(self, size)

    def optimiseTree(self, force=True):
        return _ui.lpp_optimiseTree(self, force)

    def dbGetOverlaps(self, *args):
        return _ui.lpp_dbGetOverlaps(self, *args)

    def findOverlaps(self, r):
        return _ui.lpp_findOverlaps(self, r)

    def setFilterSize(self, size):
        return _ui.lpp_setFilterSize(self, size)

    def getOverlaps(self, searchRect, filterSize=0):
        return _ui.lpp_getOverlaps(self, searchRect, filterSize)

# Register lpp in _ui:
_ui.lpp_swigregister(lpp)

class mppLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.mppLayer_swiginit(self, _ui.new_mppLayer())
    __swig_destroy__ = _ui.delete_mppLayer

    def setWidth(self, w):
        return _ui.mppLayer_setWidth(self, w)

    def width(self):
        return _ui.mppLayer_width(self)

    def setLength(self, l):
        return _ui.mppLayer_setLength(self, l)

    def length(self):
        return _ui.mppLayer_length(self)

    def setSpace(self, s):
        return _ui.mppLayer_setSpace(self, s)

    def space(self):
        return _ui.mppLayer_space(self)

    def setBegExt(self, e):
        return _ui.mppLayer_setBegExt(self, e)

    def begExt(self):
        return _ui.mppLayer_begExt(self)

    def setEndExt(self, e):
        return _ui.mppLayer_setEndExt(self, e)

    def endExt(self):
        return _ui.mppLayer_endExt(self)

    def setLayer(self, l):
        return _ui.mppLayer_setLayer(self, l)

    def layer(self):
        return _ui.mppLayer_layer(self)

    def offset(self):
        return _ui.mppLayer_offset(self)

    def setOffset(self, offset):
        return _ui.mppLayer_setOffset(self, offset)

# Register mppLayer in _ui:
_ui.mppLayer_swigregister(mppLayer)

class mppRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.mppRule_swiginit(self, _ui.new_mppRule(*args))
    __swig_destroy__ = _ui.delete_mppRule
    name = property(_ui.mppRule_name_get, _ui.mppRule_name_set)
    numLayers = property(_ui.mppRule_numLayers_get, _ui.mppRule_numLayers_set)
    layers = property(_ui.mppRule_layers_get, _ui.mppRule_layers_set)
    maxWidth = property(_ui.mppRule_maxWidth_get, _ui.mppRule_maxWidth_set)

# Register mppRule in _ui:
_ui.mppRule_swigregister(mppRule)

class mpp(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.mpp_swiginit(self, _ui.new_mpp())
    __swig_destroy__ = _ui.delete_mpp

    def addLayer(self, lyr):
        return _ui.mpp_addLayer(self, lyr)

    def getLayer(self, idx):
        return _ui.mpp_getLayer(self, idx)

    def getLayers(self):
        return _ui.mpp_getLayers(self)

    def setLayers(self, layers, num):
        return _ui.mpp_setLayers(self, layers, num)

    def numLayers(self):
        return _ui.mpp_numLayers(self)

    def setNumLayers(self, num):
        return _ui.mpp_setNumLayers(self, num)

    def setMppRule(self, rule):
        return _ui.mpp_setMppRule(self, rule)

    def getMppRule(self, lib):
        return _ui.mpp_getMppRule(self, lib)

    def getRuleName(self):
        return _ui.mpp_getRuleName(self)

    def left(self):
        return _ui.mpp_left(self)

    def right(self):
        return _ui.mpp_right(self)

    def bottom(self):
        return _ui.mpp_bottom(self)

    def top(self):
        return _ui.mpp_top(self)

    def coord(self, disc):
        return _ui.mpp_coord(self, disc)

    def maxWidth(self):
        return _ui.mpp_maxWidth(self)

    def maxBegExt(self):
        return _ui.mpp_maxBegExt(self)

    def maxEndExt(self):
        return _ui.mpp_maxEndExt(self)

    def offGrid(self, grid):
        return _ui.mpp_offGrid(self, grid)

    def manhattan(self):
        return _ui.mpp_manhattan(self)

    def rectXLo(self, pt):
        return _ui.mpp_rectXLo(self, pt)

    def rectYLo(self, pt):
        return _ui.mpp_rectYLo(self, pt)

    def rectXHi(self, pt):
        return _ui.mpp_rectXHi(self, pt)

    def rectYHi(self, pt):
        return _ui.mpp_rectYHi(self, pt)

    def ptlist(self, *args):
        return _ui.mpp_ptlist(self, *args)

    def nPoints(self):
        return _ui.mpp_nPoints(self)

    def layer(self):
        return _ui.mpp_layer(self)

    def reshape(self, x, y, nPoints):
        return _ui.mpp_reshape(self, x, y, nPoints)

    def bBox(self, *args):
        return _ui.mpp_bBox(self, *args)

    def qBox(self):
        return _ui.mpp_qBox(self)

    def objType(self):
        return _ui.mpp_objType(self)

    def objName(self):
        return _ui.mpp_objName(self)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.mpp_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.mpp_scale(self, scale, grid)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.mpp_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.mpp_getVertexAdjPts(self, v, pt1, pt2)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.mpp_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, v):
        return _ui.mpp_getNearestVertex(self, p, v)

    def getSegsInRect(self, r, segs):
        return _ui.mpp_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.mpp_getVertsInRect(self, r, verts)

    def addVertex(self, p):
        return _ui.mpp_addVertex(self, p)

    def area(self):
        return _ui.mpp_area(self)

    def perimeter(self):
        return _ui.mpp_perimeter(self)

    def chop(self, _from, r):
        return _ui.mpp_chop(self, _from, r)

    def getTransformPoints(self, trans, pts, scale=1.0):
        return _ui.mpp_getTransformPoints(self, trans, pts, scale)

    def transform(self, *args):
        return _ui.mpp_transform(self, *args)

    def ptInPoly(self, *args):
        return _ui.mpp_ptInPoly(self, *args)

    def getFirstVertex(self):
        return _ui.mpp_getFirstVertex(self)

    def getLastVertex(self):
        return _ui.mpp_getLastVertex(self)

    def setLastVertex(self, p):
        return _ui.mpp_setLastVertex(self, p)

    def point(self, i):
        return _ui.mpp_point(self, i)

    def setPoint(self, *args):
        return _ui.mpp_setPoint(self, *args)

    def createPolygon(self, layer, poly, numPoints, makeCCW=False):
        return _ui.mpp_createPolygon(self, layer, poly, numPoints, makeCCW)

    def createPolygons(self, xsnap=5, ysnap=5):
        return _ui.mpp_createPolygons(self, xsnap, ysnap)

    def addPoint(self, p):
        return _ui.mpp_addPoint(self, p)

    def deletePoint(self, nPoint):
        return _ui.mpp_deletePoint(self, nPoint)

    def Move(self, _from, delta, opt=True):
        return _ui.mpp_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.mpp_Copy(self, _from, delta, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.mpp_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.mpp_Stretch(self, *args)

    def compressPoints(self):
        return _ui.mpp_compressPoints(self)

    def length(self):
        return _ui.mpp_length(self)

    def shapeToPoly(self, _from):
        return _ui.mpp_shapeToPoly(self, _from)

    def __eq__(self, other):
        return _ui.mpp___eq__(self, other)

    def __ne__(self, other):
        return _ui.mpp___ne__(self, other)

    def __lt__(self, other):
        return _ui.mpp___lt__(self, other)

# Register mpp in _ui:
_ui.mpp_swigregister(mpp)

DB_SIGNAL = _ui.DB_SIGNAL
DB_ANALOG = _ui.DB_ANALOG
DB_CLOCK = _ui.DB_CLOCK
DB_GROUND = _ui.DB_GROUND
DB_POWER = _ui.DB_POWER
DB_RESET = _ui.DB_RESET
DB_SCAN = _ui.DB_SCAN
DB_TIEOFF = _ui.DB_TIEOFF
DB_TIEHI = _ui.DB_TIEHI
DB_TIELO = _ui.DB_TIELO
DB_DIST = _ui.DB_DIST
DB_NETLIST = _ui.DB_NETLIST
DB_TEST = _ui.DB_TEST
DB_TIMING = _ui.DB_TIMING
DB_USER = _ui.DB_USER
DB_BALANCED = _ui.DB_BALANCED
DB_STEINER = _ui.DB_STEINER
DB_TRUNK = _ui.DB_TRUNK
DB_WIREDLOGIC = _ui.DB_WIREDLOGIC
class net(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.net_swiginit(self, _ui.new_net(*args))
    __swig_destroy__ = _ui.delete_net

    def name(self, *args):
        return _ui.net_name(self, *args)

    def setCapacitance(self, val):
        return _ui.net_setCapacitance(self, val)

    def capacitance(self):
        return _ui.net_capacitance(self)

    def objType(self):
        return _ui.net_objType(self)

    def objName(self):
        return _ui.net_objName(self)

    def cellView(self):
        return _ui.net_cellView(self)

    def dbCreateInstPin(self, *args):
        return _ui.net_dbCreateInstPin(self, *args)

    def dbDeleteInstPin(self, *args):
        return _ui.net_dbDeleteInstPin(self, *args)

    def getHPWL(self, x, y):
        return _ui.net_getHPWL(self, x, y)

    def setUse(self, o):
        return _ui.net_setUse(self, o)

    def use(self):
        return _ui.net_use(self)

    def getUseStr(self):
        return _ui.net_getUseStr(self)

    def setSource(self, o):
        return _ui.net_setSource(self, o)

    def source(self):
        return _ui.net_source(self)

    def getSourceStr(self):
        return _ui.net_getSourceStr(self)

    def setPattern(self, o):
        return _ui.net_setPattern(self, o)

    def pattern(self):
        return _ui.net_pattern(self)

    def getPatternStr(self):
        return _ui.net_getPatternStr(self)

    def setGlobal(self, flag):
        return _ui.net_setGlobal(self, flag)

    def isGlobal(self):
        return _ui.net_isGlobal(self)

    def setSpecial(self, flag):
        return _ui.net_setSpecial(self, flag)

    def isSpecial(self):
        return _ui.net_isSpecial(self)

    def setNonDefRule(self, idx):
        return _ui.net_setNonDefRule(self, idx)

    def getNonDefRule(self):
        return _ui.net_getNonDefRule(self)

    def setPins(self, p):
        return _ui.net_setPins(self, p)

    def pins(self):
        return _ui.net_pins(self)

    def addPin(self, p, check=True):
        return _ui.net_addPin(self, p, check)

    def deletePin(self, p):
        return _ui.net_deletePin(self, p)

    def addShape(self, s, check=True):
        return _ui.net_addShape(self, s, check)

    def deleteShape(self, s):
        return _ui.net_deleteShape(self, s)

    def setShapes(self, list):
        return _ui.net_setShapes(self, list)

    def shapes(self):
        return _ui.net_shapes(self)

    def getNumShapes(self):
        return _ui.net_getNumShapes(self)

    def getNumInstPins(self):
        return _ui.net_getNumInstPins(self)

    def addInstPin(self, ip):
        return _ui.net_addInstPin(self, ip)

    def instPins(self):
        return _ui.net_instPins(self)

    def getSignals(self):
        return _ui.net_getSignals(self)

    def numBits(self):
        return _ui.net_numBits(self)

    def baseName(self):
        return _ui.net_baseName(self)

    def addSubNet(self, idx, node):
        return _ui.net_addSubNet(self, idx, node)

    def deleteSubnet(self, idx):
        return _ui.net_deleteSubnet(self, idx)

    def subnets(self):
        return _ui.net_subnets(self)

    def getNumSubnets(self):
        return _ui.net_getNumSubnets(self)

    def createSubNet(self, name, x, y):
        return _ui.net_createSubNet(self, name, x, y)

    def getSubNet(self, *args):
        return _ui.net_getSubNet(self, *args)

    def dbPrint(self, fp):
        return _ui.net_dbPrint(self, fp)

    def write(self, s):
        return _ui.net_write(self, s)

    def busBits(self, name, begin, end, step):
        return _ui.net_busBits(self, name, begin, end, step)

    def getShapes(self):
        return _ui.net_getShapes(self)

    def getPins(self):
        return _ui.net_getPins(self)

    def getInstPins(self):
        return _ui.net_getInstPins(self)

# Register net in _ui:
_ui.net_swigregister(net)

class capacitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ui.delete_capacitor

    def __init__(self, *args):
        _ui.capacitor_swiginit(self, _ui.new_capacitor(*args))

    def name(self):
        return _ui.capacitor_name(self)

    def x(self):
        return _ui.capacitor_x(self)

    def y(self):
        return _ui.capacitor_y(self)

    def setValue(self, val):
        return _ui.capacitor_setValue(self, val)

    def value(self):
        return _ui.capacitor_value(self)

    def setNode1(self, n):
        return _ui.capacitor_setNode1(self, n)

    def node1(self):
        return _ui.capacitor_node1(self)

    def setNode2(self, n):
        return _ui.capacitor_setNode2(self, n)

    def node2(self):
        return _ui.capacitor_node2(self)

    def setLayer1(self, lyr):
        return _ui.capacitor_setLayer1(self, lyr)

    def layer1(self):
        return _ui.capacitor_layer1(self)

    def setLayer2(self, lyr):
        return _ui.capacitor_setLayer2(self, lyr)

    def layer2(self):
        return _ui.capacitor_layer2(self)

    def otherNode(self, node):
        return _ui.capacitor_otherNode(self, node)

# Register capacitor in _ui:
_ui.capacitor_swigregister(capacitor)

class resistor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ui.delete_resistor

    def __init__(self, *args):
        _ui.resistor_swiginit(self, _ui.new_resistor(*args))

    def name(self):
        return _ui.resistor_name(self)

    def x(self):
        return _ui.resistor_x(self)

    def setX(self, x):
        return _ui.resistor_setX(self, x)

    def y(self):
        return _ui.resistor_y(self)

    def setY(self, y):
        return _ui.resistor_setY(self, y)

    def w(self):
        return _ui.resistor_w(self)

    def setW(self, w):
        return _ui.resistor_setW(self, w)

    def l(self):
        return _ui.resistor_l(self)

    def setL(self, l):
        return _ui.resistor_setL(self, l)

    def setValue(self, val):
        return _ui.resistor_setValue(self, val)

    def value(self):
        return _ui.resistor_value(self)

    def setNode1(self, n):
        return _ui.resistor_setNode1(self, n)

    def node1(self):
        return _ui.resistor_node1(self)

    def setNode2(self, n):
        return _ui.resistor_setNode2(self, n)

    def node2(self):
        return _ui.resistor_node2(self)

    def setLayer(self, lyr):
        return _ui.resistor_setLayer(self, lyr)

    def layer(self):
        return _ui.resistor_layer(self)

    def otherNode(self, node):
        return _ui.resistor_otherNode(self, node)

    def visited(self):
        return _ui.resistor_visited(self)

    def setVisited(self, b):
        return _ui.resistor_setVisited(self, b)

# Register resistor in _ui:
_ui.resistor_swigregister(resistor)

class path(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.path_swiginit(self, _ui.new_path())
    __swig_destroy__ = _ui.delete_path

    def left(self):
        return _ui.path_left(self)

    def right(self):
        return _ui.path_right(self)

    def bottom(self):
        return _ui.path_bottom(self)

    def top(self):
        return _ui.path_top(self)

    def coord(self, disc):
        return _ui.path_coord(self, disc)

    def offGrid(self, grid):
        return _ui.path_offGrid(self, grid)

    def manhattan(self):
        return _ui.path_manhattan(self)

    def rectXLo(self, pt):
        return _ui.path_rectXLo(self, pt)

    def rectYLo(self, pt):
        return _ui.path_rectYLo(self, pt)

    def rectXHi(self, pt):
        return _ui.path_rectXHi(self, pt)

    def rectYHi(self, pt):
        return _ui.path_rectYHi(self, pt)

    def width(self, *args):
        return _ui.path_width(self, *args)

    def beginExt(self, *args):
        return _ui.path_beginExt(self, *args)

    def endExt(self, *args):
        return _ui.path_endExt(self, *args)

    def bBox(self, *args):
        return _ui.path_bBox(self, *args)

    def qBox(self):
        return _ui.path_qBox(self)

    def objType(self):
        return _ui.path_objType(self)

    def objName(self):
        return _ui.path_objName(self)

    def nPoints(self):
        return _ui.path_nPoints(self)

    def ptlist(self, *args):
        return _ui.path_ptlist(self, *args)

    def length(self):
        return _ui.path_length(self)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.path_getNearestEdge(self, p, edge, c, e)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.path_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.path_getVertexAdjPts(self, v, pt1, pt2)

    def getNearestVertex(self, p, v):
        return _ui.path_getNearestVertex(self, p, v)

    def getSegsInRect(self, r, segs):
        return _ui.path_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.path_getVertsInRect(self, r, verts)

    def addVertex(self, p):
        return _ui.path_addVertex(self, p)

    def deleteSeg(self, _from, seg):
        return _ui.path_deleteSeg(self, _from, seg)

    def getTransformPoints(self, trans, pts, scale=1.0):
        return _ui.path_getTransformPoints(self, trans, pts, scale)

    def at(self, i):
        return _ui.path_at(self, i)

    def reshape(self, x, y, nPoints):
        return _ui.path_reshape(self, x, y, nPoints)

    def origin(self):
        return _ui.path_origin(self)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.path_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.path_scale(self, scale, grid)

    def area(self):
        return _ui.path_area(self)

    def perimeter(self):
        return _ui.path_perimeter(self)

    def chop(self, _from, r):
        return _ui.path_chop(self, _from, r)

    def transform(self, *args):
        return _ui.path_transform(self, *args)

    def ptInPoly(self, *args):
        return _ui.path_ptInPoly(self, *args)

    def getFirstVertex(self):
        return _ui.path_getFirstVertex(self)

    def getLastVertex(self):
        return _ui.path_getLastVertex(self)

    def setLastVertex(self, p):
        return _ui.path_setLastVertex(self, p)

    def point(self, i):
        return _ui.path_point(self, i)

    def setPoint(self, *args):
        return _ui.path_setPoint(self, *args)

    def createPolygon(self, *args):
        return _ui.path_createPolygon(self, *args)

    def addPoint(self, p):
        return _ui.path_addPoint(self, p)

    def deletePoint(self, nPoint):
        return _ui.path_deletePoint(self, nPoint)

    def Move(self, _from, delta, opt=True):
        return _ui.path_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.path_Copy(self, _from, delta, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.path_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.path_Stretch(self, *args)

    def compressPoints(self):
        return _ui.path_compressPoints(self)

    def shapeToPoly(self, _from):
        return _ui.path_shapeToPoly(self, _from)

    def __eq__(self, other):
        return _ui.path___eq__(self, other)

    def __ne__(self, other):
        return _ui.path___ne__(self, other)

    def __lt__(self, other):
        return _ui.path___lt__(self, other)

    def dbPrint(self, fp):
        return _ui.path_dbPrint(self, fp)

    def write(self, s):
        return _ui.path_write(self, s)

    def __getitem__(self, i):
        return _ui.path___getitem__(self, i)

# Register path in _ui:
_ui.path_swigregister(path)

DB_PIN_INPUT = _ui.DB_PIN_INPUT
DB_PIN_OUTPUT = _ui.DB_PIN_OUTPUT
DB_PIN_INOUT = _ui.DB_PIN_INOUT
DB_PIN_FEEDTHRU = _ui.DB_PIN_FEEDTHRU
DB_PIN_TRISTATE = _ui.DB_PIN_TRISTATE
DB_PIN_UNKNOWN = _ui.DB_PIN_UNKNOWN
DB_PIN_SIGNAL = _ui.DB_PIN_SIGNAL
DB_PIN_ANALOG = _ui.DB_PIN_ANALOG
DB_PIN_CLOCK = _ui.DB_PIN_CLOCK
DB_PIN_GROUND = _ui.DB_PIN_GROUND
DB_PIN_POWER = _ui.DB_PIN_POWER
DB_PIN_RESET = _ui.DB_PIN_RESET
DB_PIN_SCAN = _ui.DB_PIN_SCAN
DB_PIN_TIEOFF = _ui.DB_PIN_TIEOFF
DB_PIN_TIEHI = _ui.DB_PIN_TIEHI
DB_PIN_TIELO = _ui.DB_PIN_TIELO
DB_PIN_ABUTMENT = _ui.DB_PIN_ABUTMENT
DB_PIN_RING = _ui.DB_PIN_RING
DB_PIN_FEED = _ui.DB_PIN_FEED
class pin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.pin_swiginit(self, _ui.new_pin())
    __swig_destroy__ = _ui.delete_pin

    def name(self, *args):
        return _ui.pin_name(self, *args)

    def setUse(self, f):
        return _ui.pin_setUse(self, f)

    def getUse(self):
        return _ui.pin_getUse(self)

    def getUseStr(self):
        return _ui.pin_getUseStr(self)

    def setDir(self, f):
        return _ui.pin_setDir(self, f)

    def getDir(self):
        return _ui.pin_getDir(self)

    def getDirStr(self):
        return _ui.pin_getDirStr(self)

    def setShape(self, f):
        return _ui.pin_setShape(self, f)

    def getShape(self):
        return _ui.pin_getShape(self)

    def getShapeStr(self):
        return _ui.pin_getShapeStr(self)

    def setNet(self, n):
        return _ui.pin_setNet(self, n)

    def getNet(self):
        return _ui.pin_getNet(self)

    def getNetName(self):
        return _ui.pin_getNetName(self)

    def objType(self):
        return _ui.pin_objType(self)

    def objName(self):
        return _ui.pin_objName(self)

    def ports(self):
        return _ui.pin_ports(self)

    def setPorts(self, list):
        return _ui.pin_setPorts(self, list)

    def getNumPorts(self):
        return _ui.pin_getNumPorts(self)

    def addPort(self, p):
        return _ui.pin_addPort(self, p)

    def deletePort(self, p):
        return _ui.pin_deletePort(self, p)

    def dbPrint(self, fp):
        return _ui.pin_dbPrint(self, fp)

    def write(self, s):
        return _ui.pin_write(self, s)

    def setSpecial(self, flag):
        return _ui.pin_setSpecial(self, flag)

    def isSpecial(self):
        return _ui.pin_isSpecial(self)

    def setWired(self, flag):
        return _ui.pin_setWired(self, flag)

    def isWired(self):
        return _ui.pin_isWired(self)

    def setBits(self, bits):
        return _ui.pin_setBits(self, bits)

    def bits(self):
        return _ui.pin_bits(self)

    def getPorts(self):
        return _ui.pin_getPorts(self)

# Register pin in _ui:
_ui.pin_swigregister(pin)

class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.Point_swiginit(self, _ui.new_Point(*args))
    __swig_destroy__ = _ui.delete_Point

    def getX(self):
        return _ui.Point_getX(self)

    def getY(self):
        return _ui.Point_getY(self)

    def setX(self, val):
        return _ui.Point_setX(self, val)

    def setY(self, val):
        return _ui.Point_setY(self, val)

    def setCoord(self, xval, yval):
        return _ui.Point_setCoord(self, xval, yval)

    def __eq__(self, _from):
        return _ui.Point___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.Point___ne__(self, _from)

    def __lt__(self, _from):
        return _ui.Point___lt__(self, _from)

    def __gt__(self, _from):
        return _ui.Point___gt__(self, _from)

    def __add__(self, *args):
        return _ui.Point___add__(self, *args)

    def __sub__(self, *args):
        return _ui.Point___sub__(self, *args)

    def __mul__(self, mult):
        return _ui.Point___mul__(self, mult)

    def __truediv__(self, *args):
        return _ui.Point___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, *args):
        return _ui.Point___imul__(self, *args)

    def __itruediv__(self, *args):
        return _ui.Point___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        return _ui.Point___iadd__(self, *args)

    def __isub__(self, *args):
        return _ui.Point___isub__(self, *args)

    def offset(self, *args):
        return _ui.Point_offset(self, *args)
    x = property(_ui.Point_x_get, _ui.Point_x_set)
    y = property(_ui.Point_y_get, _ui.Point_y_set)

# Register Point in _ui:
_ui.Point_swigregister(Point)

class PointF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.PointF_swiginit(self, _ui.new_PointF(*args))
    __swig_destroy__ = _ui.delete_PointF

    def getX(self):
        return _ui.PointF_getX(self)

    def getY(self):
        return _ui.PointF_getY(self)

    def setX(self, val):
        return _ui.PointF_setX(self, val)

    def setY(self, val):
        return _ui.PointF_setY(self, val)

    def setCoord(self, xval, yval):
        return _ui.PointF_setCoord(self, xval, yval)

    def __eq__(self, _from):
        return _ui.PointF___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.PointF___ne__(self, _from)

    def __lt__(self, _from):
        return _ui.PointF___lt__(self, _from)

    def __gt__(self, _from):
        return _ui.PointF___gt__(self, _from)

    def __add__(self, *args):
        return _ui.PointF___add__(self, *args)

    def __sub__(self, *args):
        return _ui.PointF___sub__(self, *args)

    def __mul__(self, mult):
        return _ui.PointF___mul__(self, mult)

    def __truediv__(self, *args):
        return _ui.PointF___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, *args):
        return _ui.PointF___imul__(self, *args)

    def __itruediv__(self, *args):
        return _ui.PointF___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        return _ui.PointF___iadd__(self, *args)

    def __isub__(self, *args):
        return _ui.PointF___isub__(self, *args)

    def offset(self, *args):
        return _ui.PointF_offset(self, *args)
    x = property(_ui.PointF_x_get, _ui.PointF_x_set)
    y = property(_ui.PointF_y_get, _ui.PointF_y_set)

# Register PointF in _ui:
_ui.PointF_swigregister(PointF)

class pointList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.pointList_swiginit(self, _ui.new_pointList(*args))
    __swig_destroy__ = _ui.delete_pointList

    def __eq__(self, _from):
        return _ui.pointList___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.pointList___ne__(self, _from)

    def __lt__(self, _from):
        return _ui.pointList___lt__(self, _from)

    def setPtlist(self, *args):
        return _ui.pointList_setPtlist(self, *args)

    def points(self, *args):
        return _ui.pointList_points(self, *args)

    def append(self, *args):
        return _ui.pointList_append(self, *args)

    def at(self, idx):
        return _ui.pointList_at(self, idx)

    def numPts(self):
        return _ui.pointList_numPts(self)

    def bBox(self, *args):
        return _ui.pointList_bBox(self, *args)

    def area(self):
        return _ui.pointList_area(self)

    def perimeter(self):
        return _ui.pointList_perimeter(self)

    def transform(self, *args):
        return _ui.pointList_transform(self, *args)

    def scale(self, scale, grid):
        return _ui.pointList_scale(self, scale, grid)

    def compressPoints(self, ortho, xfirst):
        return _ui.pointList_compressPoints(self, ortho, xfirst)

    def setFirstVertex(self, xFirst, nPts):
        return _ui.pointList_setFirstVertex(self, xFirst, nPts)

    def isSelfIntersecting(self, isClosed=True):
        return _ui.pointList_isSelfIntersecting(self, isClosed)

    def overlaps(self, *args):
        return _ui.pointList_overlaps(self, *args)

    def contains(self, *args):
        return _ui.pointList_contains(self, *args)

    def intersectsAt(self, edge, isClosed=True):
        return _ui.pointList_intersectsAt(self, edge, isClosed)

    def isOrthogonal(self, isClosed=True):
        return _ui.pointList_isOrthogonal(self, isClosed)

    def vmusage(self):
        return _ui.pointList_vmusage(self)

    def ptlist(self):
        return _ui.pointList_ptlist(self)

    def __getitem__(self, i):
        return _ui.pointList___getitem__(self, i)

# Register pointList in _ui:
_ui.pointList_swigregister(pointList)

class polygon(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.polygon_swiginit(self, _ui.new_polygon())
    __swig_destroy__ = _ui.delete_polygon

    def right(self):
        return _ui.polygon_right(self)

    def bottom(self):
        return _ui.polygon_bottom(self)

    def top(self):
        return _ui.polygon_top(self)

    def coord(self, disc):
        return _ui.polygon_coord(self, disc)

    def offGrid(self, grid):
        return _ui.polygon_offGrid(self, grid)

    def manhattan(self):
        return _ui.polygon_manhattan(self)

    def ptlist(self, *args):
        return _ui.polygon_ptlist(self, *args)

    def pointlist(self):
        return _ui.polygon_pointlist(self)

    def reshape(self, x, y, nPoints):
        return _ui.polygon_reshape(self, x, y, nPoints)

    def qBox(self):
        return _ui.polygon_qBox(self)

    def bBox(self, *args):
        return _ui.polygon_bBox(self, *args)

    def objType(self):
        return _ui.polygon_objType(self)

    def objName(self):
        return _ui.polygon_objName(self)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.polygon_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.polygon_scale(self, scale, grid)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.polygon_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, v):
        return _ui.polygon_getNearestVertex(self, p, v)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.polygon_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.polygon_getVertexAdjPts(self, v, pt1, pt2)

    def getSegsInRect(self, r, segs):
        return _ui.polygon_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.polygon_getVertsInRect(self, r, verts)

    def ptInPoly(self, *args):
        return _ui.polygon_ptInPoly(self, *args)

    def addVertex(self, p):
        return _ui.polygon_addVertex(self, p)

    def area(self):
        return _ui.polygon_area(self)

    def perimeter(self):
        return _ui.polygon_perimeter(self)

    def nPoints(self, *args):
        return _ui.polygon_nPoints(self, *args)

    def getTransformPoints(self, trans, pts, scale=1.0):
        return _ui.polygon_getTransformPoints(self, trans, pts, scale)

    def transform(self, *args):
        return _ui.polygon_transform(self, *args)

    def getFirstVertex(self):
        return _ui.polygon_getFirstVertex(self)

    def getLastVertex(self):
        return _ui.polygon_getLastVertex(self)

    def Move(self, _from, delta, opt=True):
        return _ui.polygon_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.polygon_Copy(self, _from, delta, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.polygon_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.polygon_Stretch(self, *args)

    def compressPoints(self):
        return _ui.polygon_compressPoints(self)

    def setFirstVertex(self, xFirst):
        return _ui.polygon_setFirstVertex(self, xFirst)

    def shapeToPoly(self, _from):
        return _ui.polygon_shapeToPoly(self, _from)

    def length(self):
        return _ui.polygon_length(self)

    def selfIntersecting(self):
        return _ui.polygon_selfIntersecting(self)

    def at(self, i):
        return _ui.polygon_at(self, i)

    def isOrthogonal(self):
        return _ui.polygon_isOrthogonal(self)

    def __eq__(self, other):
        return _ui.polygon___eq__(self, other)

    def __ne__(self, other):
        return _ui.polygon___ne__(self, other)

    def __lt__(self, other):
        return _ui.polygon___lt__(self, other)

    def dbPrint(self, fp):
        return _ui.polygon_dbPrint(self, fp)

    def write(self, s):
        return _ui.polygon_write(self, s)

    def area2(self, ax, ay, bx, by, cx, cy):
        return _ui.polygon_area2(self, ax, ay, bx, by, cx, cy)

    def left(self, *args):
        return _ui.polygon_left(self, *args)

    def colinear(self, ax, ay, bx, by, cx, cy):
        return _ui.polygon_colinear(self, ax, ay, bx, by, cx, cy)

    def Xor(self, x, y):
        return _ui.polygon_Xor(self, x, y)

    def intersects(self, ax, ay, bx, by, cx, cy, dx, dy):
        return _ui.polygon_intersects(self, ax, ay, bx, by, cx, cy, dx, dy)

    def __getitem__(self, i):
        return _ui.polygon___getitem__(self, i)

# Register polygon in _ui:
_ui.polygon_swigregister(polygon)

class Rect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.Rect_swiginit(self, _ui.new_Rect(*args))
    __swig_destroy__ = _ui.delete_Rect

    def left(self):
        return _ui.Rect_left(self)

    def right(self):
        return _ui.Rect_right(self)

    def bottom(self):
        return _ui.Rect_bottom(self)

    def top(self):
        return _ui.Rect_top(self)

    def getXLo(self):
        return _ui.Rect_getXLo(self)

    def getXHi(self):
        return _ui.Rect_getXHi(self)

    def getYLo(self):
        return _ui.Rect_getYLo(self)

    def getYHi(self):
        return _ui.Rect_getYHi(self)

    def coord(self, disc):
        return _ui.Rect_coord(self, disc)

    def otherCoord(self, disc):
        return _ui.Rect_otherCoord(self, disc)

    def getLL(self):
        return _ui.Rect_getLL(self)

    def getLR(self):
        return _ui.Rect_getLR(self)

    def getUR(self):
        return _ui.Rect_getUR(self)

    def getUL(self):
        return _ui.Rect_getUL(self)

    def setLeft(self, c):
        return _ui.Rect_setLeft(self, c)

    def setRight(self, c):
        return _ui.Rect_setRight(self, c)

    def setBottom(self, c):
        return _ui.Rect_setBottom(self, c)

    def setTop(self, c):
        return _ui.Rect_setTop(self, c)

    def setXLo(self, c):
        return _ui.Rect_setXLo(self, c)

    def setXHi(self, c):
        return _ui.Rect_setXHi(self, c)

    def setYLo(self, c):
        return _ui.Rect_setYLo(self, c)

    def setYHi(self, c):
        return _ui.Rect_setYHi(self, c)

    def invalidate(self):
        return _ui.Rect_invalidate(self)

    def isNull(self):
        return _ui.Rect_isNull(self)

    def getQRect(self):
        return _ui.Rect_getQRect(self)

    def at(self, i):
        return _ui.Rect_at(self, i)

    def edge(self, i):
        return _ui.Rect_edge(self, i)

    def edgeF(self, i):
        return _ui.Rect_edgeF(self, i)

    def getEdge(self, *args):
        return _ui.Rect_getEdge(self, *args)

    def getEdgeF(self, *args):
        return _ui.Rect_getEdgeF(self, *args)

    def ptlist(self, pts):
        return _ui.Rect_ptlist(self, pts)

    def coords(self):
        return _ui.Rect_coords(self)

    def __eq__(self, _from):
        return _ui.Rect___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.Rect___ne__(self, _from)

    def __lt__(self, _from):
        return _ui.Rect___lt__(self, _from)

    def __gt__(self, _from):
        return _ui.Rect___gt__(self, _from)

    def __iadd__(self, pt):
        return _ui.Rect___iadd__(self, pt)

    def scale(self, *args):
        return _ui.Rect_scale(self, *args)

    def bias(self, *args):
        return _ui.Rect_bias(self, *args)

    def size(self, b):
        return _ui.Rect_size(self, b)

    def offset(self, *args):
        return _ui.Rect_offset(self, *args)

    def moveTo(self, origin):
        return _ui.Rect_moveTo(self, origin)

    def width(self, *args):
        return _ui.Rect_width(self, *args)

    def height(self, *args):
        return _ui.Rect_height(self, *args)

    def centre(self):
        return _ui.Rect_centre(self)

    def isSquare(self):
        return _ui.Rect_isSquare(self)

    def normalise(self):
        return _ui.Rect_normalise(self)

    def transform(self, *args):
        return _ui.Rect_transform(self, *args)

    def swapxy(self):
        return _ui.Rect_swapxy(self)

    def unionWith(self, *args):
        return _ui.Rect_unionWith(self, *args)

    def intersectsWith(self, *args):
        return _ui.Rect_intersectsWith(self, *args)

    def touchOrOverlaps(self, *args):
        return _ui.Rect_touchOrOverlaps(self, *args)

    def overlaps(self, *args):
        return _ui.Rect_overlaps(self, *args)

    def touch(self, *args):
        return _ui.Rect_touch(self, *args)

    def contains(self, *args):
        return _ui.Rect_contains(self, *args)
    m_coords = property(_ui.Rect_m_coords_get, _ui.Rect_m_coords_set)

# Register Rect in _ui:
_ui.Rect_swigregister(Rect)

class rectangle(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.rectangle_swiginit(self, _ui.new_rectangle(*args))
    __swig_destroy__ = _ui.delete_rectangle

    def left(self):
        return _ui.rectangle_left(self)

    def right(self):
        return _ui.rectangle_right(self)

    def bottom(self):
        return _ui.rectangle_bottom(self)

    def top(self):
        return _ui.rectangle_top(self)

    def coord(self, disc):
        return _ui.rectangle_coord(self, disc)

    def setLeft(self, val):
        return _ui.rectangle_setLeft(self, val)

    def setRight(self, val):
        return _ui.rectangle_setRight(self, val)

    def setBottom(self, val):
        return _ui.rectangle_setBottom(self, val)

    def setTop(self, val):
        return _ui.rectangle_setTop(self, val)

    def width(self, *args):
        return _ui.rectangle_width(self, *args)

    def height(self, *args):
        return _ui.rectangle_height(self, *args)

    def origin(self):
        return _ui.rectangle_origin(self)

    def qBox(self):
        return _ui.rectangle_qBox(self)

    def bBox(self, *args):
        return _ui.rectangle_bBox(self, *args)

    def objType(self):
        return _ui.rectangle_objType(self)

    def objName(self):
        return _ui.rectangle_objName(self)

    def centre(self):
        return _ui.rectangle_centre(self)

    def __eq__(self, _from):
        return _ui.rectangle___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.rectangle___ne__(self, _from)

    def __lt__(self, _from):
        return _ui.rectangle___lt__(self, _from)

    def __gt__(self, _from):
        return _ui.rectangle___gt__(self, _from)

    def transform(self, *args):
        return _ui.rectangle_transform(self, *args)

    def length(self):
        return _ui.rectangle_length(self)

    def nPoints(self):
        return _ui.rectangle_nPoints(self)

    def ptlist(self, *args):
        return _ui.rectangle_ptlist(self, *args)

    def coords(self):
        return _ui.rectangle_coords(self)

    def shapeToPoly(self, _from):
        return _ui.rectangle_shapeToPoly(self, _from)

    def area(self):
        return _ui.rectangle_area(self)

    def perimeter(self):
        return _ui.rectangle_perimeter(self)

    def offGrid(self, grid):
        return _ui.rectangle_offGrid(self, grid)

    def manhattan(self):
        return _ui.rectangle_manhattan(self)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.rectangle_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.rectangle_scale(self, scale, grid)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.rectangle_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, v):
        return _ui.rectangle_getNearestVertex(self, p, v)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.rectangle_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.rectangle_getVertexAdjPts(self, v, pt1, pt2)

    def getSegsInRect(self, r, segs):
        return _ui.rectangle_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.rectangle_getVertsInRect(self, r, verts)

    def ptInPoly(self, *args):
        return _ui.rectangle_ptInPoly(self, *args)

    def Move(self, _from, delta, opt=True):
        return _ui.rectangle_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.rectangle_Copy(self, _from, delta, lyr)

    def Flatten(self, to, trans, hier=True):
        return _ui.rectangle_Flatten(self, to, trans, hier)

    def Stretch(self, *args):
        return _ui.rectangle_Stretch(self, *args)

    def dbPrint(self, fp):
        return _ui.rectangle_dbPrint(self, fp)

    def write(self, s):
        return _ui.rectangle_write(self, s)

# Register rectangle in _ui:
_ui.rectangle_swigregister(rectangle)

class segment(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ui.delete_segment

    def __init__(self, *args):
        _ui.segment_swiginit(self, _ui.new_segment(*args))

    def __ne__(self, _from):
        return _ui.segment___ne__(self, _from)

    def __eq__(self, _from):
        return _ui.segment___eq__(self, _from)

    def null(self):
        return _ui.segment_null(self)

    def objType(self):
        return _ui.segment_objType(self)

    def objName(self):
        return _ui.segment_objName(self)

    def SetObj(self, obj):
        return _ui.segment_SetObj(self, obj)

    def GetObj(self):
        return _ui.segment_GetObj(self)

    def getEdge(self):
        return _ui.segment_getEdge(self)

    def length(self):
        return _ui.segment_length(self)

    def DistanceToPoint(self, p):
        return _ui.segment_DistanceToPoint(self, p)

    def NearestPoint(self, *args):
        return _ui.segment_NearestPoint(self, *args)

    def isXseg(self):
        return _ui.segment_isXseg(self)

    def isYseg(self):
        return _ui.segment_isYseg(self)

    def isDiag(self):
        return _ui.segment_isDiag(self)

    def isManhattan(self):
        return _ui.segment_isManhattan(self)

    def bBox(self, *args):
        return _ui.segment_bBox(self, *args)

    def qBox(self):
        return _ui.segment_qBox(self)

    def normalise(self):
        return _ui.segment_normalise(self)

    def segInRect(self, r):
        return _ui.segment_segInRect(self, r)

    def Move(self, _from, delta, opt=True):
        return _ui.segment_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.segment_Copy(self, _from, delta, lyr)

    def transform(self, *args):
        return _ui.segment_transform(self, *args)

    def setSpecial(self, flag):
        return _ui.segment_setSpecial(self, flag)

    def isSpecial(self):
        return _ui.segment_isSpecial(self)

    def layer(self):
        return _ui.segment_layer(self)
    p0 = property(_ui.segment_p0_get, _ui.segment_p0_set)
    p1 = property(_ui.segment_p1_get, _ui.segment_p1_set)

# Register segment in _ui:
_ui.segment_swigregister(segment)

class dbSegParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.dbSegParam_swiginit(self, _ui.new_dbSegParam())
    __swig_destroy__ = _ui.delete_dbSegParam

    def layer(self):
        return _ui.dbSegParam_layer(self)

    def setLayer(self, l):
        return _ui.dbSegParam_setLayer(self, l)

    def lib(self, *args):
        return _ui.dbSegParam_lib(self, *args)

    def width(self):
        return _ui.dbSegParam_width(self)

    def setWidth(self, w):
        return _ui.dbSegParam_setWidth(self, w)

    def beginExt(self):
        return _ui.dbSegParam_beginExt(self)

    def setBeginExt(self, e):
        return _ui.dbSegParam_setBeginExt(self, e)

    def endExt(self):
        return _ui.dbSegParam_endExt(self)

    def setEndExt(self, e):
        return _ui.dbSegParam_setEndExt(self, e)

    def style(self):
        return _ui.dbSegParam_style(self)

    def setStyle(self, s):
        return _ui.dbSegParam_setStyle(self, s)

# Register dbSegParam in _ui:
_ui.dbSegParam_swigregister(dbSegParam)

class signal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.signal_swiginit(self, _ui.new_signal(*args))
    __swig_destroy__ = _ui.delete_signal

    def setName(self, name):
        return _ui.signal_setName(self, name)

    def name(self):
        return _ui.signal_name(self)

    def setNet(self, net):
        return _ui.signal_setNet(self, net)

    def net(self):
        return _ui.signal_net(self)

    def objType(self):
        return _ui.signal_objType(self)

    def objName(self):
        return _ui.signal_objName(self)

# Register signal in _ui:
_ui.signal_swigregister(signal)

class subnet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, net, name, x=0, y=0):
        _ui.subnet_swiginit(self, _ui.new_subnet(net, name, x, y))
    __swig_destroy__ = _ui.delete_subnet

    def name(self, *args):
        return _ui.subnet_name(self, *args)

    def setOrigin(self, origin):
        return _ui.subnet_setOrigin(self, origin)

    def origin(self):
        return _ui.subnet_origin(self)

    def setX(self, x):
        return _ui.subnet_setX(self, x)

    def setY(self, y):
        return _ui.subnet_setY(self, y)

    def y(self):
        return _ui.subnet_y(self)

    def x(self):
        return _ui.subnet_x(self)

    def setNet(self, net):
        return _ui.subnet_setNet(self, net)

    def getNet(self):
        return _ui.subnet_getNet(self)

    def addResistor(self, res):
        return _ui.subnet_addResistor(self, res)

    def numResistors(self):
        return _ui.subnet_numResistors(self)

    def setResistorsUnvisited(self):
        return _ui.subnet_setResistorsUnvisited(self)

    def addCapacitor(self, cap):
        return _ui.subnet_addCapacitor(self, cap)

    def numCapacitors(self):
        return _ui.subnet_numCapacitors(self)

    def getResistors(self):
        return _ui.subnet_getResistors(self)

    def getCapacitors(self):
        return _ui.subnet_getCapacitors(self)

    def totalCap(self):
        return _ui.subnet_totalCap(self)

# Register subnet in _ui:
_ui.subnet_swigregister(subnet)

TECH_LINELENGTH = _ui.TECH_LINELENGTH
TECH_MAX_LAYERS = _ui.TECH_MAX_LAYERS
TECH_MAX_SYS_LAYERS = _ui.TECH_MAX_SYS_LAYERS
TECH_NONSELECT_LAYERS = _ui.TECH_NONSELECT_LAYERS
TECH_BACKGROUND_LAYER = _ui.TECH_BACKGROUND_LAYER
TECH_INSTANCE_LAYER = _ui.TECH_INSTANCE_LAYER
TECH_VIAINST_LAYER = _ui.TECH_VIAINST_LAYER
TECH_CURSOR_LAYER = _ui.TECH_CURSOR_LAYER
TECH_AXES_LAYER = _ui.TECH_AXES_LAYER
TECH_MAJORGRID_LAYER = _ui.TECH_MAJORGRID_LAYER
TECH_MINORGRID_LAYER = _ui.TECH_MINORGRID_LAYER
TECH_SELECT_LAYER = _ui.TECH_SELECT_LAYER
TECH_FLIGHTLINE_LAYER = _ui.TECH_FLIGHTLINE_LAYER
TECH_TEXT_LAYER = _ui.TECH_TEXT_LAYER
TECH_PIN_LAYER = _ui.TECH_PIN_LAYER
TECH_WIRE_LAYER = _ui.TECH_WIRE_LAYER
TECH_DEVICE_LAYER = _ui.TECH_DEVICE_LAYER
TECH_MARKER_LAYER = _ui.TECH_MARKER_LAYER
TECH_ROW_LAYER = _ui.TECH_ROW_LAYER
TECH_REGION_LAYER = _ui.TECH_REGION_LAYER
TECH_PRBOUNDARY_LAYER = _ui.TECH_PRBOUNDARY_LAYER
TECH_MPP_LAYER = _ui.TECH_MPP_LAYER
TECH_ANNOTATE9_LAYER = _ui.TECH_ANNOTATE9_LAYER
TECH_ANNOTATE8_LAYER = _ui.TECH_ANNOTATE8_LAYER
TECH_ANNOTATE7_LAYER = _ui.TECH_ANNOTATE7_LAYER
TECH_ANNOTATE6_LAYER = _ui.TECH_ANNOTATE6_LAYER
TECH_ANNOTATE5_LAYER = _ui.TECH_ANNOTATE5_LAYER
TECH_ANNOTATE4_LAYER = _ui.TECH_ANNOTATE4_LAYER
TECH_ANNOTATE3_LAYER = _ui.TECH_ANNOTATE3_LAYER
TECH_ANNOTATE2_LAYER = _ui.TECH_ANNOTATE2_LAYER
TECH_ANNOTATE1_LAYER = _ui.TECH_ANNOTATE1_LAYER
TECH_ANNOTATE_LAYER = _ui.TECH_ANNOTATE_LAYER
TECH_FIGGROUP_LAYER = _ui.TECH_FIGGROUP_LAYER
TECH_COUPLING_LAYER = _ui.TECH_COUPLING_LAYER
TECH_HILITE_LAYER = _ui.TECH_HILITE_LAYER
TECH_Y9_LAYER = _ui.TECH_Y9_LAYER
TECH_Y8_LAYER = _ui.TECH_Y8_LAYER
TECH_Y7_LAYER = _ui.TECH_Y7_LAYER
TECH_Y6_LAYER = _ui.TECH_Y6_LAYER
TECH_Y5_LAYER = _ui.TECH_Y5_LAYER
TECH_Y4_LAYER = _ui.TECH_Y4_LAYER
TECH_Y3_LAYER = _ui.TECH_Y3_LAYER
TECH_Y2_LAYER = _ui.TECH_Y2_LAYER
TECH_Y1_LAYER = _ui.TECH_Y1_LAYER
TECH_Y0_LAYER = _ui.TECH_Y0_LAYER
TECH_MAX_USER_LAYERS = _ui.TECH_MAX_USER_LAYERS
TECH_MAX_SELECT_LAYERS = _ui.TECH_MAX_SELECT_LAYERS
class skillpacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stipple_name = property(_ui.skillpacket_stipple_name_get, _ui.skillpacket_stipple_name_set)
    linestyle_name = property(_ui.skillpacket_linestyle_name_get, _ui.skillpacket_linestyle_name_set)
    fill_color = property(_ui.skillpacket_fill_color_get, _ui.skillpacket_fill_color_set)
    outline_color = property(_ui.skillpacket_outline_color_get, _ui.skillpacket_outline_color_set)

    def __init__(self):
        _ui.skillpacket_swiginit(self, _ui.new_skillpacket())
    __swig_destroy__ = _ui.delete_skillpacket

# Register skillpacket in _ui:
_ui.skillpacket_swigregister(skillpacket)

T_LAYER = _ui.T_LAYER
T_STIPPLE = _ui.T_STIPPLE
T_LINE = _ui.T_LINE
T_VIA = _ui.T_VIA
T_MINWIDTH = _ui.T_MINWIDTH
T_MINSPACE = _ui.T_MINSPACE
T_MINDIAGWIDTH = _ui.T_MINDIAGWIDTH
T_MINDIAGSPACE = _ui.T_MINDIAGSPACE
T_MINAREA = _ui.T_MINAREA
T_MINHOLEAREA = _ui.T_MINHOLEAREA
T_MINENC = _ui.T_MINENC
T_MINEXT = _ui.T_MINEXT
T_MINOVLP = _ui.T_MINOVLP
T_FUNCTION = _ui.T_FUNCTION
T_CONNECT = _ui.T_CONNECT
T_MPP = _ui.T_MPP
T_METLAYER = _ui.T_METLAYER
T_VIALAYER = _ui.T_VIALAYER
T_DIELECTRIC = _ui.T_DIELECTRIC
T_MAP = _ui.T_MAP
T_MFGGRID = _ui.T_MFGGRID
T_ROUTINGDIR = _ui.T_ROUTINGDIR
T_PITCH = _ui.T_PITCH
T_OFFSET = _ui.T_OFFSET
T_UNKNOWN = _ui.T_UNKNOWN
class stipple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lpBits = property(_ui.stipple_lpBits_get, _ui.stipple_lpBits_set)
    name = property(_ui.stipple_name_get, _ui.stipple_name_set)
    fillStyle = property(_ui.stipple_fillStyle_get, _ui.stipple_fillStyle_set)
    next = property(_ui.stipple_next_get, _ui.stipple_next_set)
    system = property(_ui.stipple_system_get, _ui.stipple_system_set)
    xbits = property(_ui.stipple_xbits_get, _ui.stipple_xbits_set)
    ybits = property(_ui.stipple_ybits_get, _ui.stipple_ybits_set)

    def __init__(self):
        _ui.stipple_swiginit(self, _ui.new_stipple())
    __swig_destroy__ = _ui.delete_stipple

# Register stipple in _ui:
_ui.stipple_swigregister(stipple)

class lineStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fillType = property(_ui.lineStyle_fillType_get, _ui.lineStyle_fillType_set)
    name = property(_ui.lineStyle_name_get, _ui.lineStyle_name_set)
    width = property(_ui.lineStyle_width_get, _ui.lineStyle_width_set)
    next = property(_ui.lineStyle_next_get, _ui.lineStyle_next_set)
    system = property(_ui.lineStyle_system_get, _ui.lineStyle_system_set)
    dashes = property(_ui.lineStyle_dashes_get, _ui.lineStyle_dashes_set)

    def __init__(self):
        _ui.lineStyle_swiginit(self, _ui.new_lineStyle())
    __swig_destroy__ = _ui.delete_lineStyle

# Register lineStyle in _ui:
_ui.lineStyle_swigregister(lineStyle)

class connectLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.connectLayer_swiginit(self, _ui.new_connectLayer(*args))
    __swig_destroy__ = _ui.delete_connectLayer

    def __eq__(self, other):
        return _ui.connectLayer___eq__(self, other)

    def lowerLayer(self):
        return _ui.connectLayer_lowerLayer(self)

    def viaLayer(self):
        return _ui.connectLayer_viaLayer(self)

    def upperLayer(self):
        return _ui.connectLayer_upperLayer(self)

    def hasVia(self):
        return _ui.connectLayer_hasVia(self)

    def setLowerLayer(self, lyr):
        return _ui.connectLayer_setLowerLayer(self, lyr)

    def setViaLayer(self, lyr):
        return _ui.connectLayer_setViaLayer(self, lyr)

    def setUpperLayer(self, lyr):
        return _ui.connectLayer_setUpperLayer(self, lyr)
    lower_layer = property(_ui.connectLayer_lower_layer_get, _ui.connectLayer_lower_layer_set)
    via_layer = property(_ui.connectLayer_via_layer_get, _ui.connectLayer_via_layer_set)
    upper_layer = property(_ui.connectLayer_upper_layer_get, _ui.connectLayer_upper_layer_set)

# Register connectLayer in _ui:
_ui.connectLayer_swigregister(connectLayer)

class techFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.techFile_swiginit(self, _ui.new_techFile())
    __swig_destroy__ = _ui.delete_techFile

    def techLoad(self, fileName, merge=True, chatty=True):
        return _ui.techFile_techLoad(self, fileName, merge, chatty)

    def techSave(self, fileName, saveSystem):
        return _ui.techFile_techSave(self, fileName, saveSystem)

    def techLoadLyp(self, fileName, merge=True, chatty=True):
        return _ui.techFile_techLoadLyp(self, fileName, merge, chatty)

    def mapLoad(self, fileName):
        return _ui.techFile_mapLoad(self, fileName)

    def getColour(self, name):
        return _ui.techFile_getColour(self, name)

    def layerTable(self, lyr):
        return _ui.techFile_layerTable(self, lyr)

    def setLayerTable(self, lyr, layer):
        return _ui.techFile_setLayerTable(self, lyr, layer)

    def lib(self, *args):
        return _ui.techFile_lib(self, *args)

    def isSelectable(self, lyr):
        return _ui.techFile_isSelectable(self, lyr)

    def selectable(self, lyr, b):
        return _ui.techFile_selectable(self, lyr, b)

    def isVisible(self, lyr):
        return _ui.techFile_isVisible(self, lyr)

    def visible(self, lyr, b):
        return _ui.techFile_visible(self, lyr, b)

    def setAllSelectable(self, b):
        return _ui.techFile_setAllSelectable(self, b)

    def setAllVisible(self, b):
        return _ui.techFile_setAllVisible(self, b)

    def isUsed(self, lyr):
        return _ui.techFile_isUsed(self, lyr)

    def setUsed(self, lyr, b):
        return _ui.techFile_setUsed(self, lyr, b)

    def isActive(self, lyr):
        return _ui.techFile_isActive(self, lyr)

    def setActive(self, lyr, b):
        return _ui.techFile_setActive(self, lyr, b)

    def setAllInactive(self):
        return _ui.techFile_setAllInactive(self)

    def isValid(self, lyr):
        return _ui.techFile_isValid(self, lyr)

    def setValid(self, lyr, b):
        return _ui.techFile_setValid(self, lyr, b)

    def getPen(self, lyr):
        return _ui.techFile_getPen(self, lyr)

    def setPen(self, lyr, pen):
        return _ui.techFile_setPen(self, lyr, pen)

    def getBrush(self, lyr):
        return _ui.techFile_getBrush(self, lyr)

    def setBrush(self, lyr, brush):
        return _ui.techFile_setBrush(self, lyr, brush)

    def color(self, *args):
        return _ui.techFile_color(self, *args)

    def getDimColor(self, lyr):
        return _ui.techFile_getDimColor(self, lyr)

    def setLayerName(self, lyr, name):
        return _ui.techFile_setLayerName(self, lyr, name)

    def getLayerName(self, lyr, ignoreUnused=False):
        return _ui.techFile_getLayerName(self, lyr, ignoreUnused)

    def setLayerPurpose(self, lyr, type):
        return _ui.techFile_setLayerPurpose(self, lyr, type)

    def getLayerPurpose(self, lyr, ignoreUnused=False):
        return _ui.techFile_getLayerPurpose(self, lyr, ignoreUnused)

    def getLayerPurposePair(self, lyr):
        return _ui.techFile_getLayerPurposePair(self, lyr)

    def setLayerGdsLayer(self, lyr, gdsLayer):
        return _ui.techFile_setLayerGdsLayer(self, lyr, gdsLayer)

    def getLayerGdsLayer(self, lyr):
        return _ui.techFile_getLayerGdsLayer(self, lyr)

    def setLayerDataType(self, lyr, dataType):
        return _ui.techFile_setLayerDataType(self, lyr, dataType)

    def getLayerDataType(self, lyr):
        return _ui.techFile_getLayerDataType(self, lyr)

    def clearLayerGDSPairs(self, lyr):
        return _ui.techFile_clearLayerGDSPairs(self, lyr)

    def addLayerGDSPair(self, *args):
        return _ui.techFile_addLayerGDSPair(self, *args)

    def getLayerGDSPair(self, lyr):
        return _ui.techFile_getLayerGDSPair(self, lyr)

    def getLayerNum(self, *args):
        return _ui.techFile_getLayerNum(self, *args)

    def createLayer(self, layerName, purpose, chatty=True):
        return _ui.techFile_createLayer(self, layerName, purpose, chatty)

    def deleteLayer(self, lyr):
        return _ui.techFile_deleteLayer(self, lyr)

    def setLayerType(self, lyr, type):
        return _ui.techFile_setLayerType(self, lyr, type)

    def getLayerType(self, lyr):
        return _ui.techFile_getLayerType(self, lyr)

    def getLayerTypeAsStr(self, lyr):
        return _ui.techFile_getLayerTypeAsStr(self, lyr)

    def getNumRoutingLayers(self):
        return _ui.techFile_getNumRoutingLayers(self)

    def getRoutingLayer(self, num):
        return _ui.techFile_getRoutingLayer(self, num)

    def getNumObsLayers(self):
        return _ui.techFile_getNumObsLayers(self)

    def getObsLayer(self, num):
        return _ui.techFile_getObsLayer(self, num)

    def getNumPinLayers(self):
        return _ui.techFile_getNumPinLayers(self)

    def getPinLayer(self, num):
        return _ui.techFile_getPinLayer(self, num)

    def setLayerWidth(self, lyr, width):
        return _ui.techFile_setLayerWidth(self, lyr, width)

    def getLayerWidth(self, *args):
        return _ui.techFile_getLayerWidth(self, *args)

    def setLayerDiagWidth(self, lyr, width):
        return _ui.techFile_setLayerDiagWidth(self, lyr, width)

    def getLayerDiagWidth(self, *args):
        return _ui.techFile_getLayerDiagWidth(self, *args)

    def setLayerWrongWayWidth(self, lyr, width):
        return _ui.techFile_setLayerWrongWayWidth(self, lyr, width)

    def getLayerWrongWayWidth(self, *args):
        return _ui.techFile_getLayerWrongWayWidth(self, *args)

    def setLayerSpacing(self, lyr, spacing):
        return _ui.techFile_setLayerSpacing(self, lyr, spacing)

    def getLayerSpacing(self, *args):
        return _ui.techFile_getLayerSpacing(self, *args)

    def setLayerDiagSpacing(self, lyr, spacing):
        return _ui.techFile_setLayerDiagSpacing(self, lyr, spacing)

    def getLayerDiagSpacing(self, *args):
        return _ui.techFile_getLayerDiagSpacing(self, *args)

    def clearTwoLayerRules(self):
        return _ui.techFile_clearTwoLayerRules(self)

    def set2LayerSpacing(self, lyr1, lyr2, spacing, reverse=False):
        return _ui.techFile_set2LayerSpacing(self, lyr1, lyr2, spacing, reverse)

    def get2LayerSpacing(self, *args):
        return _ui.techFile_get2LayerSpacing(self, *args)

    def layerSpacingRules(self, lyr):
        return _ui.techFile_layerSpacingRules(self, lyr)

    def setLayerEnc(self, lyr1, lyr2, enc, reverse=False):
        return _ui.techFile_setLayerEnc(self, lyr1, lyr2, enc, reverse)

    def getLayerEnc(self, *args):
        return _ui.techFile_getLayerEnc(self, *args)

    def enclosureRules(self, lyr):
        return _ui.techFile_enclosureRules(self, lyr)

    def setLayerExt(self, lyr1, lyr2, ovlp, reverse=False):
        return _ui.techFile_setLayerExt(self, lyr1, lyr2, ovlp, reverse)

    def getLayerExt(self, *args):
        return _ui.techFile_getLayerExt(self, *args)

    def extensionRules(self, lyr):
        return _ui.techFile_extensionRules(self, lyr)

    def setLayerOvlp(self, lyr1, lyr2, ovlp, reverse=False):
        return _ui.techFile_setLayerOvlp(self, lyr1, lyr2, ovlp, reverse)

    def getLayerOvlp(self, *args):
        return _ui.techFile_getLayerOvlp(self, *args)

    def overlapRules(self, lyr):
        return _ui.techFile_overlapRules(self, lyr)

    def setLayerArea(self, lyr, area):
        return _ui.techFile_setLayerArea(self, lyr, area)

    def getLayerArea(self, *args):
        return _ui.techFile_getLayerArea(self, *args)

    def setLayerHoleArea(self, lyr, area):
        return _ui.techFile_setLayerHoleArea(self, lyr, area)

    def getLayerHoleArea(self, *args):
        return _ui.techFile_getLayerHoleArea(self, *args)

    def setLayerPitch(self, lyr, pitch):
        return _ui.techFile_setLayerPitch(self, lyr, pitch)

    def getLayerPitch(self, lyr):
        return _ui.techFile_getLayerPitch(self, lyr)

    def setLayerOffset(self, lyr, pitch):
        return _ui.techFile_setLayerOffset(self, lyr, pitch)

    def getLayerOffset(self, lyr):
        return _ui.techFile_getLayerOffset(self, lyr)

    def setLayerDir(self, lyr, dir):
        return _ui.techFile_setLayerDir(self, lyr, dir)

    def getLayerDir(self, lyr):
        return _ui.techFile_getLayerDir(self, lyr)

    def getLayerDirAsStr(self, lyr):
        return _ui.techFile_getLayerDirAsStr(self, lyr)

    def setLayerResistance(self, lyr, r):
        return _ui.techFile_setLayerResistance(self, lyr, r)

    def getLayerResistance(self, lyr):
        return _ui.techFile_getLayerResistance(self, lyr)

    def setLayerAreaCap(self, lyr, c):
        return _ui.techFile_setLayerAreaCap(self, lyr, c)

    def getLayerAreaCap(self, lyr):
        return _ui.techFile_getLayerAreaCap(self, lyr)

    def setLayerEdgeCap(self, lyr, c):
        return _ui.techFile_setLayerEdgeCap(self, lyr, c)

    def getLayerEdgeCap(self, lyr):
        return _ui.techFile_getLayerEdgeCap(self, lyr)

    def getLayerUp(self, lyr):
        return _ui.techFile_getLayerUp(self, lyr)

    def getLayerDown(self, lyr):
        return _ui.techFile_getLayerDown(self, lyr)

    def setLayerByOrder(self, layer, order):
        return _ui.techFile_setLayerByOrder(self, layer, order)

    def getLayerByOrder(self, order):
        return _ui.techFile_getLayerByOrder(self, order)

    def getLayerOrder(self, layer):
        return _ui.techFile_getLayerOrder(self, layer)

    def changeLayerOrder(self, source, dest):
        return _ui.techFile_changeLayerOrder(self, source, dest)

    def getLineWidth(self, lyr):
        return _ui.techFile_getLineWidth(self, lyr)

    def setLineWidth(self, lyr, width):
        return _ui.techFile_setLineWidth(self, lyr, width)

    def changeFillStyle(self, lyr, s):
        return _ui.techFile_changeFillStyle(self, lyr, s)

    def getFillName(self, lyr):
        return _ui.techFile_getFillName(self, lyr)

    def setFillType(self, lyr, fill):
        return _ui.techFile_setFillType(self, lyr, fill)

    def getFillType(self, lyr):
        return _ui.techFile_getFillType(self, lyr)

    def setCurrentLayer(self, lyr):
        return _ui.techFile_setCurrentLayer(self, lyr)

    def getCurrentLayer(self):
        return _ui.techFile_getCurrentLayer(self)

    def getFillPattern(self, lyr):
        return _ui.techFile_getFillPattern(self, lyr)

    def setFillPattern(self, lyr, lpBits, exists=False, name=None, xBits=16, yBits=16):
        return _ui.techFile_setFillPattern(self, lyr, lpBits, exists, name, xBits, yBits)

    def setStippleTable(self, st):
        return _ui.techFile_setStippleTable(self, st)

    def getStippleTable(self):
        return _ui.techFile_getStippleTable(self)

    def addStipple(self, name, fillStyle, lpBits=None, system=False, xBits=16, yBits=16):
        return _ui.techFile_addStipple(self, name, fillStyle, lpBits, system, xBits, yBits)

    def setStipple(self, lyr, name):
        return _ui.techFile_setStipple(self, lyr, name)

    def setStippleName(self, lyr, name):
        return _ui.techFile_setStippleName(self, lyr, name)

    def setStippleType(self, name, system):
        return _ui.techFile_setStippleType(self, name, system)

    def getStipple(self, *args):
        return _ui.techFile_getStipple(self, *args)

    def getStippleBits(self, layer):
        return _ui.techFile_getStippleBits(self, layer)

    def setCrossFillPattern32(self, bits):
        return _ui.techFile_setCrossFillPattern32(self, bits)

    def setCrossFillPattern16(self, bits):
        return _ui.techFile_setCrossFillPattern16(self, bits)

    def setCrossFillPattern8(self, bits):
        return _ui.techFile_setCrossFillPattern8(self, bits)

    def checkIfCross(self, lpBits, xBits, yBits):
        return _ui.techFile_checkIfCross(self, lpBits, xBits, yBits)

    def getNumStipples(self):
        return _ui.techFile_getNumStipples(self)

    def getLineType(self, lyr):
        return _ui.techFile_getLineType(self, lyr)

    def getLineDashes(self, lyr):
        return _ui.techFile_getLineDashes(self, lyr)

    def setLineStyle(self, *args):
        return _ui.techFile_setLineStyle(self, *args)

    def setLineTable(self, l):
        return _ui.techFile_setLineTable(self, l)

    def getLineTable(self):
        return _ui.techFile_getLineTable(self)

    def getLineStyle(self, lyr):
        return _ui.techFile_getLineStyle(self, lyr)

    def addLine(self, *args):
        return _ui.techFile_addLine(self, *args)

    def setLine(self, lyr, name):
        return _ui.techFile_setLine(self, lyr, name)

    def setLineName(self, lyr, name):
        return _ui.techFile_setLineName(self, lyr, name)

    def getLineStyleName(self, lyr):
        return _ui.techFile_getLineStyleName(self, lyr)

    def getNumLineStyles(self):
        return _ui.techFile_getNumLineStyles(self)

    def setLayerDimFactor(self, lyr, pct):
        return _ui.techFile_setLayerDimFactor(self, lyr, pct)

    def getLayerDimFactor(self, lyr):
        return _ui.techFile_getLayerDimFactor(self, lyr)

    def setDimFactor(self, pct):
        return _ui.techFile_setDimFactor(self, pct)

    def getDimFactor(self):
        return _ui.techFile_getDimFactor(self)

    def getLayer(self, lyr):
        return _ui.techFile_getLayer(self, lyr)

    def setLayer(self, lyr, layer):
        return _ui.techFile_setLayer(self, lyr, layer)

    def getLayerHeight(self, lyr):
        return _ui.techFile_getLayerHeight(self, lyr)

    def setLayerHeight(self, lyr, val):
        return _ui.techFile_setLayerHeight(self, lyr, val)

    def getLayerThickness(self, lyr):
        return _ui.techFile_getLayerThickness(self, lyr)

    def setLayerThickness(self, lyr, val):
        return _ui.techFile_setLayerThickness(self, lyr, val)

    def getLayerEpsilon(self, lyr):
        return _ui.techFile_getLayerEpsilon(self, lyr)

    def setLayerEpsilon(self, lyr, val):
        return _ui.techFile_setLayerEpsilon(self, lyr, val)

    def isMetal(self, lyr):
        return _ui.techFile_isMetal(self, lyr)

    def isVia(self, lyr):
        return _ui.techFile_isVia(self, lyr)

    def setMfgGrid(self, grid):
        return _ui.techFile_setMfgGrid(self, grid)

    def mfgGrid(self):
        return _ui.techFile_mfgGrid(self)

    def getMapList(self):
        return _ui.techFile_getMapList(self)

    def setMapList(self, mapping):
        return _ui.techFile_setMapList(self, mapping)

    def getYBits(self):
        return _ui.techFile_getYBits(self)

    def getXBytes(self):
        return _ui.techFile_getXBytes(self)

    def getYStippleBits(self):
        return _ui.techFile_getYStippleBits(self)

    def getXStippleBytes(self):
        return _ui.techFile_getXStippleBytes(self)

    def getNextFreeSlot(self):
        return _ui.techFile_getNextFreeSlot(self)

    def addConnLayer(self, lyr):
        return _ui.techFile_addConnLayer(self, lyr)

    def getNumConnLayers(self):
        return _ui.techFile_getNumConnLayers(self)

    def getTotalConnLayers(self):
        return _ui.techFile_getTotalConnLayers(self)

    def getConnLayer(self, idx):
        return _ui.techFile_getConnLayer(self, idx)

    def clearConnLayers(self):
        return _ui.techFile_clearConnLayers(self)

    def getSize(self):
        return _ui.techFile_getSize(self)

    def setMaskNum(self, lyr, num):
        return _ui.techFile_setMaskNum(self, lyr, num)

    def maskNum(self, lyr):
        return _ui.techFile_maskNum(self, lyr)

    def insertColorTable(self, name, rgba):
        return _ui.techFile_insertColorTable(self, name, rgba)

    def lookupColorTable(self, name, value):
        return _ui.techFile_lookupColorTable(self, name, value)

    def insertPacketTable(self, name, pkt):
        return _ui.techFile_insertPacketTable(self, name, pkt)

    def lookupPacketTable(self, name, value):
        return _ui.techFile_lookupPacketTable(self, name, value)

    def insertCdsLayerTable(self, name, layer):
        return _ui.techFile_insertCdsLayerTable(self, name, layer)

    def lookupCdsLayerTable(self, layer):
        return _ui.techFile_lookupCdsLayerTable(self, layer)

# Register techFile in _ui:
_ui.techFile_swigregister(techFile)

class transform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ui.delete_transform

    def __init__(self, *args):
        _ui.transform_swiginit(self, _ui.new_transform(*args))

    def __eq__(self, src):
        return _ui.transform___eq__(self, src)

    def __ne__(self, src):
        return _ui.transform___ne__(self, src)

    def __lt__(self, src):
        return _ui.transform___lt__(self, src)

    def __imul__(self, src):
        return _ui.transform___imul__(self, src)

    def invert(self):
        return _ui.transform_invert(self)

    def inverseTransformRect(self, *args):
        return _ui.transform_inverseTransformRect(self, *args)

    def inverseTransformPoint(self, *args):
        return _ui.transform_inverseTransformPoint(self, *args)

    def transformRect(self, *args):
        return _ui.transform_transformRect(self, *args)

    def transformPoint(self, *args):
        return _ui.transform_transformPoint(self, *args)

    def transformPointList(self, *args):
        return _ui.transform_transformPointList(self, *args)

    def setOrient(self, orient, check=True):
        return _ui.transform_setOrient(self, orient, check)

    def getOrient(self):
        return _ui.transform_getOrient(self)

    def setOrigin(self, *args):
        return _ui.transform_setOrigin(self, *args)

    def getOrigin(self):
        return _ui.transform_getOrigin(self)

    def setMag(self, scale):
        return _ui.transform_setMag(self, scale)

    def getMag(self):
        return _ui.transform_getMag(self)

    def isXYSwapped(self):
        return _ui.transform_isXYSwapped(self)

    def name(self):
        return _ui.transform_name(self)

    def setT11(self, val):
        return _ui.transform_setT11(self, val)

    def T11(self):
        return _ui.transform_T11(self)

    def setT12(self, val):
        return _ui.transform_setT12(self, val)

    def T12(self):
        return _ui.transform_T12(self)

    def setT21(self, val):
        return _ui.transform_setT21(self, val)

    def T21(self):
        return _ui.transform_T21(self)

    def setT22(self, val):
        return _ui.transform_setT22(self, val)

    def T22(self):
        return _ui.transform_T22(self)

    def setT31(self, val):
        return _ui.transform_setT31(self, val)

    def T31(self):
        return _ui.transform_T31(self)

    def setT32(self, val):
        return _ui.transform_setT32(self, val)

    def T32(self):
        return _ui.transform_T32(self)

    def isNull(self):
        return _ui.transform_isNull(self)

# Register transform in _ui:
_ui.transform_swigregister(transform)

PI = _ui.PI
class transform64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ui.delete_transform64

    def __init__(self, *args):
        _ui.transform64_swiginit(self, _ui.new_transform64(*args))

    def __eq__(self, src):
        return _ui.transform64___eq__(self, src)

    def __ne__(self, src):
        return _ui.transform64___ne__(self, src)

    def __lt__(self, src):
        return _ui.transform64___lt__(self, src)

    def __imul__(self, src):
        return _ui.transform64___imul__(self, src)

    def invert(self):
        return _ui.transform64_invert(self)

    def inverseTransformRect(self, *args):
        return _ui.transform64_inverseTransformRect(self, *args)

    def inverseTransformPoint(self, *args):
        return _ui.transform64_inverseTransformPoint(self, *args)

    def transformRect(self, *args):
        return _ui.transform64_transformRect(self, *args)

    def transformPoint(self, *args):
        return _ui.transform64_transformPoint(self, *args)

    def transformPointList(self, *args):
        return _ui.transform64_transformPointList(self, *args)

    def setOrient(self, angle, check=True):
        return _ui.transform64_setOrient(self, angle, check)

    def getOrient(self):
        return _ui.transform64_getOrient(self)

    def setOrigin(self, *args):
        return _ui.transform64_setOrigin(self, *args)

    def getOrigin(self):
        return _ui.transform64_getOrigin(self)

    def setMag(self, scale):
        return _ui.transform64_setMag(self, scale)

    def isXYSwapped(self):
        return _ui.transform64_isXYSwapped(self)

    def name(self):
        return _ui.transform64_name(self)

    def setT11(self, val):
        return _ui.transform64_setT11(self, val)

    def T11(self):
        return _ui.transform64_T11(self)

    def setT12(self, val):
        return _ui.transform64_setT12(self, val)

    def T12(self):
        return _ui.transform64_T12(self)

    def setT21(self, val):
        return _ui.transform64_setT21(self, val)

    def T21(self):
        return _ui.transform64_T21(self)

    def setT22(self, val):
        return _ui.transform64_setT22(self, val)

    def T22(self):
        return _ui.transform64_T22(self)

    def setT31(self, val):
        return _ui.transform64_setT31(self, val)

    def T31(self):
        return _ui.transform64_T31(self)

    def setT32(self, val):
        return _ui.transform64_setT32(self, val)

    def T32(self):
        return _ui.transform64_T32(self)

    def isNull(self):
        return _ui.transform64_isNull(self)

# Register transform64 in _ui:
_ui.transform64_swigregister(transform64)

class Trapezoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.Trapezoid_swiginit(self, _ui.new_Trapezoid(*args))
    __swig_destroy__ = _ui.delete_Trapezoid

    def at(self, i):
        return _ui.Trapezoid_at(self, i)

    def edge(self, i):
        return _ui.Trapezoid_edge(self, i)

    def left(self):
        return _ui.Trapezoid_left(self)

    def right(self):
        return _ui.Trapezoid_right(self)

    def bottom(self):
        return _ui.Trapezoid_bottom(self)

    def top(self):
        return _ui.Trapezoid_top(self)

    def coord(self, disc):
        return _ui.Trapezoid_coord(self, disc)

    def setXlo(self, p):
        return _ui.Trapezoid_setXlo(self, p)

    def setXhi(self, p):
        return _ui.Trapezoid_setXhi(self, p)

    def setYlo1(self, p):
        return _ui.Trapezoid_setYlo1(self, p)

    def setYhi1(self, p):
        return _ui.Trapezoid_setYhi1(self, p)

    def setYlo2(self, p):
        return _ui.Trapezoid_setYlo2(self, p)

    def setYhi2(self, p):
        return _ui.Trapezoid_setYhi2(self, p)

    def getLL(self):
        return _ui.Trapezoid_getLL(self)

    def getLR(self):
        return _ui.Trapezoid_getLR(self)

    def getUR(self):
        return _ui.Trapezoid_getUR(self)

    def getUL(self):
        return _ui.Trapezoid_getUL(self)

    def width(self):
        return _ui.Trapezoid_width(self)

    def height(self):
        return _ui.Trapezoid_height(self)

    def origin(self):
        return _ui.Trapezoid_origin(self)

    def bBox(self):
        return _ui.Trapezoid_bBox(self)

    def qBox(self):
        return _ui.Trapezoid_qBox(self)

    def centre(self):
        return _ui.Trapezoid_centre(self)

    def invalidate(self):
        return _ui.Trapezoid_invalidate(self)

    def isNull(self):
        return _ui.Trapezoid_isNull(self)

    def __eq__(self, _from):
        return _ui.Trapezoid___eq__(self, _from)

    def __ne__(self, _from):
        return _ui.Trapezoid___ne__(self, _from)

    def __lt__(self, _from):
        return _ui.Trapezoid___lt__(self, _from)

    def __gt__(self, _from):
        return _ui.Trapezoid___gt__(self, _from)

    def transform(self, orient, p):
        return _ui.Trapezoid_transform(self, orient, p)

    def touchOrOverlaps(self, *args):
        return _ui.Trapezoid_touchOrOverlaps(self, *args)

    def overlaps(self, *args):
        return _ui.Trapezoid_overlaps(self, *args)

    def unionWith(self, *args):
        return _ui.Trapezoid_unionWith(self, *args)

    def intersects(self, *args):
        return _ui.Trapezoid_intersects(self, *args)

    def ptInPoly(self, p):
        return _ui.Trapezoid_ptInPoly(self, p)

    def nPoints(self):
        return _ui.Trapezoid_nPoints(self)

    def ptlist(self, *args):
        return _ui.Trapezoid_ptlist(self, *args)

    def coords(self):
        return _ui.Trapezoid_coords(self)

    def area(self):
        return _ui.Trapezoid_area(self)

    def perimeter(self):
        return _ui.Trapezoid_perimeter(self)

    def offGrid(self, grid):
        return _ui.Trapezoid_offGrid(self, grid)

    def manhattan(self):
        return _ui.Trapezoid_manhattan(self)

# Register Trapezoid in _ui:
_ui.Trapezoid_swigregister(Trapezoid)

class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.Vector_swiginit(self, _ui.new_Vector(*args))

    def setX(self, val):
        return _ui.Vector_setX(self, val)

    def setY(self, val):
        return _ui.Vector_setY(self, val)

    def __add__(self, _from):
        return _ui.Vector___add__(self, _from)

    def __iadd__(self, _from):
        return _ui.Vector___iadd__(self, _from)

    def __sub__(self, _from):
        return _ui.Vector___sub__(self, _from)

    def __isub__(self, _from):
        return _ui.Vector___isub__(self, _from)

    def __mul__(self, scalar):
        return _ui.Vector___mul__(self, scalar)

    def __imul__(self, scalar):
        return _ui.Vector___imul__(self, scalar)

    def __truediv__(self, *args):
        return _ui.Vector___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ui.Vector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def dotProduct(self, other):
        return _ui.Vector_dotProduct(self, other)

    def crossProduct(self, other):
        return _ui.Vector_crossProduct(self, other)

    def length(self):
        return _ui.Vector_length(self)

    def distance(self, v):
        return _ui.Vector_distance(self, v)

    def unit(self):
        return _ui.Vector_unit(self)

    def normal(self):
        return _ui.Vector_normal(self)
    x = property(_ui.Vector_x_get, _ui.Vector_x_set)
    y = property(_ui.Vector_y_get, _ui.Vector_y_set)
    __swig_destroy__ = _ui.delete_Vector

# Register Vector in _ui:
_ui.Vector_swigregister(Vector)

class vertex(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ui.delete_vertex

    def __init__(self, *args):
        _ui.vertex_swiginit(self, _ui.new_vertex(*args))

    def __ne__(self, _from):
        return _ui.vertex___ne__(self, _from)

    def __eq__(self, _from):
        return _ui.vertex___eq__(self, _from)

    def null(self):
        return _ui.vertex_null(self)

    def objType(self):
        return _ui.vertex_objType(self)

    def objName(self):
        return _ui.vertex_objName(self)

    def SetObj(self, obj):
        return _ui.vertex_SetObj(self, obj)

    def GetObj(self):
        return _ui.vertex_GetObj(self)

    def getPoint(self):
        return _ui.vertex_getPoint(self)

    def bBox(self, *args):
        return _ui.vertex_bBox(self, *args)

    def qBox(self):
        return _ui.vertex_qBox(self)

    def Move(self, _from, delta, opt=True):
        return _ui.vertex_Move(self, _from, delta, opt)

    def Copy(self, _from, delta, lyr=-1):
        return _ui.vertex_Copy(self, _from, delta, lyr)

    def transform(self, *args):
        return _ui.vertex_transform(self, *args)

    def x(self):
        return _ui.vertex_x(self)

    def y(self):
        return _ui.vertex_y(self)

    def setX(self, x):
        return _ui.vertex_setX(self, x)

    def setY(self, y):
        return _ui.vertex_setY(self, y)

    def setSpecial(self, flag):
        return _ui.vertex_setSpecial(self, flag)

    def isSpecial(self):
        return _ui.vertex_isSpecial(self)

    def layer(self):
        return _ui.vertex_layer(self)
    p = property(_ui.vertex_p_get, _ui.vertex_p_set)

# Register vertex in _ui:
_ui.vertex_swigregister(vertex)

class viaLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    layer = property(_ui.viaLayer_layer_get, _ui.viaLayer_layer_set)
    geom = property(_ui.viaLayer_geom_get, _ui.viaLayer_geom_set)
    next = property(_ui.viaLayer_next_get, _ui.viaLayer_next_set)

    def __init__(self):
        _ui.viaLayer_swiginit(self, _ui.new_viaLayer())
    __swig_destroy__ = _ui.delete_viaLayer

# Register viaLayer in _ui:
_ui.viaLayer_swigregister(viaLayer)

class via(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.via_swiginit(self, _ui.new_via(*args))
    __swig_destroy__ = _ui.delete_via

    def setViaName(self, name):
        return _ui.via_setViaName(self, name)

    def getViaName(self):
        return _ui.via_getViaName(self)

    def getViaLayerList(self):
        return _ui.via_getViaLayerList(self)

    def setViaLayerList(self, vl):
        return _ui.via_setViaLayerList(self, vl)

    def getNumLayers(self):
        return _ui.via_getNumLayers(self)

    def getFirstLayer(self):
        return _ui.via_getFirstLayer(self)

    def getLastLayer(self):
        return _ui.via_getLastLayer(self)

    def getCutLayer(self):
        return _ui.via_getCutLayer(self)

    def setViaDefault(self, flag):
        return _ui.via_setViaDefault(self, flag)

    def getViaDefault(self):
        return _ui.via_getViaDefault(self)

    def setSpecial(self, flag):
        return _ui.via_setSpecial(self, flag)

    def getSpecial(self):
        return _ui.via_getSpecial(self)

    def setNonDefaultName(self, name):
        return _ui.via_setNonDefaultName(self, name)

    def getNonDefaultName(self):
        return _ui.via_getNonDefaultName(self)

    def setRuleName(self, name):
        return _ui.via_setRuleName(self, name)

    def getRuleName(self):
        return _ui.via_getRuleName(self)

    def addViaLayer(self, lyr, geom):
        return _ui.via_addViaLayer(self, lyr, geom)

    def getOtherViaLayer(self, lyr):
        return _ui.via_getOtherViaLayer(self, lyr)

    def lib(self, *args):
        return _ui.via_lib(self, *args)

    def bBox(self, *args):
        return _ui.via_bBox(self, *args)

    def qBox(self):
        return _ui.via_qBox(self)

    def setResistance(self, r):
        return _ui.via_setResistance(self, r)

    def getResistance(self):
        return _ui.via_getResistance(self)

    def setPattern(self, name):
        return _ui.via_setPattern(self, name)

    def getPattern(self):
        return _ui.via_getPattern(self)

# Register via in _ui:
_ui.via_swigregister(via)

class viaInst(shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.viaInst_swiginit(self, _ui.new_viaInst(*args))
    __swig_destroy__ = _ui.delete_viaInst

    def left(self):
        return _ui.viaInst_left(self)

    def right(self):
        return _ui.viaInst_right(self)

    def bottom(self):
        return _ui.viaInst_bottom(self)

    def top(self):
        return _ui.viaInst_top(self)

    def coord(self, disc):
        return _ui.viaInst_coord(self, disc)

    def viaName(self):
        return _ui.viaInst_viaName(self)

    def bBox(self, *args):
        return _ui.viaInst_bBox(self, *args)

    def qBox(self):
        return _ui.viaInst_qBox(self)

    def getLowerLayer(self):
        return _ui.viaInst_getLowerLayer(self)

    def getCutLayer(self):
        return _ui.viaInst_getCutLayer(self)

    def getUpperLayer(self):
        return _ui.viaInst_getUpperLayer(self)

    def objType(self):
        return _ui.viaInst_objType(self)

    def objName(self):
        return _ui.viaInst_objName(self)

    def nPoints(self):
        return _ui.viaInst_nPoints(self)

    def ptlist(self):
        return _ui.viaInst_ptlist(self)

    def layer(self):
        return _ui.viaInst_layer(self)

    def transform(self, *args):
        return _ui.viaInst_transform(self, *args)

    def offGrid(self, grid):
        return _ui.viaInst_offGrid(self, grid)

    def manhattan(self):
        return _ui.viaInst_manhattan(self)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.viaInst_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, vert):
        return _ui.viaInst_getNearestVertex(self, p, vert)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.viaInst_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.viaInst_getVertexAdjPts(self, v, pt1, pt2)

    def lib(self):
        return _ui.viaInst_lib(self)

    def getViaIndex(self):
        return _ui.viaInst_getViaIndex(self)

    def setViaIndex(self, idx):
        return _ui.viaInst_setViaIndex(self, idx)

    def getVia(self, *args):
        return _ui.viaInst_getVia(self, *args)

    def origin(self, *args):
        return _ui.viaInst_origin(self, *args)

    def isDefault(self):
        return _ui.viaInst_isDefault(self)

    def ptInPoly(self, *args):
        return _ui.viaInst_ptInPoly(self, *args)

    def Move(self, _from, p, opt=True):
        return _ui.viaInst_Move(self, _from, p, opt)

    def Copy(self, _from, p, lyr=-1):
        return _ui.viaInst_Copy(self, _from, p, lyr)

    def Flatten(self, _from, trans, hier=True):
        return _ui.viaInst_Flatten(self, _from, trans, hier)

    def Stretch(self, *args):
        return _ui.viaInst_Stretch(self, *args)

    def bias(self, bias, Xgrid, Ygrid, lyr=-1):
        return _ui.viaInst_bias(self, bias, Xgrid, Ygrid, lyr)

    def scale(self, scale, grid):
        return _ui.viaInst_scale(self, scale, grid)

    def dbPrint(self, fp):
        return _ui.viaInst_dbPrint(self, fp)

    def write(self, s):
        return _ui.viaInst_write(self, s)

# Register viaInst in _ui:
_ui.viaInst_swigregister(viaInst)

class view(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.view_swiginit(self, _ui.new_view())
    __swig_destroy__ = _ui.delete_view

    def cellViews(self):
        return _ui.view_cellViews(self)

    def name(self, *args):
        return _ui.view_name(self, *args)

    def setViewType(self, t):
        return _ui.view_setViewType(self, t)

    def viewType(self):
        return _ui.view_viewType(self)

    def getViewTypeAsString(self):
        return _ui.view_getViewTypeAsString(self)

    def addCellView(self, cv):
        return _ui.view_addCellView(self, cv)

    def dbFindCellViewByCell(self, cellName):
        return _ui.view_dbFindCellViewByCell(self, cellName)

    def objType(self):
        return _ui.view_objType(self)

    def objName(self):
        return _ui.view_objName(self)

    def layer(self):
        return _ui.view_layer(self)

    def getCellViews(self):
        return _ui.view_getCellViews(self)

# Register view in _ui:
_ui.view_swigregister(view)

class VSeg(dbObj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.VSeg_swiginit(self, _ui.new_VSeg(*args))
    __swig_destroy__ = _ui.delete_VSeg

    def left(self):
        return _ui.VSeg_left(self)

    def right(self):
        return _ui.VSeg_right(self)

    def bottom(self):
        return _ui.VSeg_bottom(self)

    def top(self):
        return _ui.VSeg_top(self)

    def coord(self, disc):
        return _ui.VSeg_coord(self, disc)

    def offGrid(self, grid):
        return _ui.VSeg_offGrid(self, grid)

    def manhattan(self):
        return _ui.VSeg_manhattan(self)

    def setStyle(self, val):
        return _ui.VSeg_setStyle(self, val)

    def getStyle(self):
        return _ui.VSeg_getStyle(self)

    def setType(self, val):
        return _ui.VSeg_setType(self, val)

    def getType(self):
        return _ui.VSeg_getType(self)

    def getTypeStr(self):
        return _ui.VSeg_getTypeStr(self)

    def setShape(self, val):
        return _ui.VSeg_setShape(self, val)

    def getShape(self):
        return _ui.VSeg_getShape(self)

    def getShapeStr(self):
        return _ui.VSeg_getShapeStr(self)

    def orient(self, *args):
        return _ui.VSeg_orient(self, *args)

    def getOrientStr(self):
        return _ui.VSeg_getOrientStr(self)

    def setSpecial(self, val):
        return _ui.VSeg_setSpecial(self, val)

    def isSpecial(self):
        return _ui.VSeg_isSpecial(self)

    def setHasNet(self, val):
        return _ui.VSeg_setHasNet(self, val)

    def hasNet(self):
        return _ui.VSeg_hasNet(self)

    def setCv(self, cv):
        return _ui.VSeg_setCv(self, cv)

    def cv(self):
        return _ui.VSeg_cv(self)

    def setPoints(self, x1, y1, x2, y2):
        return _ui.VSeg_setPoints(self, x1, y1, x2, y2)

    def setNet(self, n, check=True):
        return _ui.VSeg_setNet(self, n, check)

    def getNet(self):
        return _ui.VSeg_getNet(self)

    def setIndex(self, i):
        return _ui.VSeg_setIndex(self, i)

    def index(self):
        return _ui.VSeg_index(self)

    def bBox(self, *args):
        return _ui.VSeg_bBox(self, *args)

    def qBox(self):
        return _ui.VSeg_qBox(self)

    def objType(self):
        return _ui.VSeg_objType(self)

    def objName(self):
        return _ui.VSeg_objName(self)

    def layer(self):
        return _ui.VSeg_layer(self)

    def width(self):
        return _ui.VSeg_width(self)

    def area(self):
        return _ui.VSeg_area(self)

    def perimeter(self):
        return _ui.VSeg_perimeter(self)

    def getFirstVertex(self):
        return _ui.VSeg_getFirstVertex(self)

    def getLastVertex(self):
        return _ui.VSeg_getLastVertex(self)

    def extent(self):
        return _ui.VSeg_extent(self)

    def setExtent(self, e):
        return _ui.VSeg_setExtent(self, e)

    def origin(self):
        return _ui.VSeg_origin(self)

    def setOrigin(self, x, y):
        return _ui.VSeg_setOrigin(self, x, y)

    def ptInPoly(self, *args):
        return _ui.VSeg_ptInPoly(self, *args)

    def Move(self, _from, delta, opt=True):
        return _ui.VSeg_Move(self, _from, delta, opt)

    def Copy(self, cv, delta, lyr=-1):
        return _ui.VSeg_Copy(self, cv, delta, lyr)

    def Flatten(self, cv, trans, hier=True):
        return _ui.VSeg_Flatten(self, cv, trans, hier)

    def getNearestEdge(self, p, edge, c=True, e=True):
        return _ui.VSeg_getNearestEdge(self, p, edge, c, e)

    def getNearestVertex(self, p, vert):
        return _ui.VSeg_getNearestVertex(self, p, vert)

    def getSegsInRect(self, r, segs):
        return _ui.VSeg_getSegsInRect(self, r, segs)

    def getVertsInRect(self, r, verts):
        return _ui.VSeg_getVertsInRect(self, r, verts)

    def getSegAdjPts(self, seg, pt1, pt2):
        return _ui.VSeg_getSegAdjPts(self, seg, pt1, pt2)

    def getVertexAdjPts(self, v, pt1, pt2):
        return _ui.VSeg_getVertexAdjPts(self, v, pt1, pt2)

    def transform(self, *args):
        return _ui.VSeg_transform(self, *args)

    def getNetName(self):
        return _ui.VSeg_getNetName(self)

    def length(self):
        return _ui.VSeg_length(self)

    def ptlist(self):
        return _ui.VSeg_ptlist(self)

    def nPoints(self):
        return _ui.VSeg_nPoints(self)

    def bias(self, bias, Xgrid, Ygrid):
        return _ui.VSeg_bias(self, bias, Xgrid, Ygrid)

    def scale(self, scale, grid):
        return _ui.VSeg_scale(self, scale, grid)

    def dbPrint(self, fp):
        return _ui.VSeg_dbPrint(self, fp)

    def write(self, s):
        return _ui.VSeg_write(self, s)

# Register VSeg in _ui:
_ui.VSeg_swigregister(VSeg)


def drcInit(cv):
    return _ui.drcInit(cv)

def geomBegin(cv):
    return _ui.geomBegin(cv)

def drcUnInit():
    return _ui.drcUnInit()

def geomEnd():
    return _ui.geomEnd()

def geomGetShapes(*args):
    return _ui.geomGetShapes(*args)

def geomGetRawShapes(*args):
    return _ui.geomGetRawShapes(*args)

def geomGetEdges(*args):
    return _ui.geomGetEdges(*args)

def geomAddShape(lyr1, shape):
    return _ui.geomAddShape(lyr1, shape)

def geomAddShapes(lyr1, shapes):
    return _ui.geomAddShapes(lyr1, shapes)

def geomStartPoly(ptlist):
    return _ui.geomStartPoly(ptlist)

def geomAddPoly(lyr1, ptlist):
    return _ui.geomAddPoly(lyr1, ptlist)

def geomMerge(lyr1):
    return _ui.geomMerge(lyr1)

def geomNot(lyr1):
    return _ui.geomNot(lyr1)

def geomLabel(*args):
    return _ui.geomLabel(*args)

def geomConnect(layers):
    return _ui.geomConnect(layers)

def geomOr(lyr1, lyr2):
    return _ui.geomOr(lyr1, lyr2)

def geomSelectOr(lyr1, lyr2):
    return _ui.geomSelectOr(lyr1, lyr2)

def geomAnd(*args):
    return _ui.geomAnd(*args)

def geomAndNot(lyr1, lyr2):
    return _ui.geomAndNot(lyr1, lyr2)

def geomXor(lyr1, lyr2):
    return _ui.geomXor(lyr1, lyr2)

def geomSize(lyr1, size, flags=0):
    return _ui.geomSize(lyr1, size, flags)

def geomTrapezoid(lyr1, manhattan=False):
    return _ui.geomTrapezoid(lyr1, manhattan)

def geomTouching(*args):
    return _ui.geomTouching(*args)

def geomNotTouching(*args):
    return _ui.geomNotTouching(*args)

def geomIntersecting(*args):
    return _ui.geomIntersecting(*args)

def geomNotIntersecting(*args):
    return _ui.geomNotIntersecting(*args)

def geomOverlapping(*args):
    return _ui.geomOverlapping(*args)

def geomNotOverlapping(*args):
    return _ui.geomNotOverlapping(*args)

def geomInside(*args):
    return _ui.geomInside(*args)

def geomNotInside(*args):
    return _ui.geomNotInside(*args)

def geomContains(*args):
    return _ui.geomContains(*args)

def geomOutside(*args):
    return _ui.geomOutside(*args)

def geomNotOutside(*args):
    return _ui.geomNotOutside(*args)

def geomAvoiding(*args):
    return _ui.geomAvoiding(*args)

def geomInteracts(*args):
    return _ui.geomInteracts(*args)

def geomNotInteracts(*args):
    return _ui.geomNotInteracts(*args)

def geomButting(*args):
    return _ui.geomButting(*args)

def geomNotButting(*args):
    return _ui.geomNotButting(*args)

def geomCoincident(*args):
    return _ui.geomCoincident(*args)

def geomNotCoincident(*args):
    return _ui.geomNotCoincident(*args)

def geomButtOrCoin(*args):
    return _ui.geomButtOrCoin(*args)

def geomNotButtOrCoin(*args):
    return _ui.geomNotButtOrCoin(*args)

def geomGetTexted(*args):
    return _ui.geomGetTexted(*args)

def geomGetNet(lyr1, netName):
    return _ui.geomGetNet(lyr1, netName)

def geomSetText(edgeFile1, x, y, labelName, createPin=True):
    return _ui.geomSetText(edgeFile1, x, y, labelName, createPin)

def geomSetTextFile(edgeFile, fileName, createPin=True):
    return _ui.geomSetTextFile(edgeFile, fileName, createPin)

def geomBkgnd(size=0.0):
    return _ui.geomBkgnd(size)

def geomEmpty():
    return _ui.geomEmpty()

def geomHoles(lyr1, flags=0, count=0):
    return _ui.geomHoles(lyr1, flags, count)

def geomNoHoles(lyr1, flags=0, count=0):
    return _ui.geomNoHoles(lyr1, flags, count)

def geomGetHoles(lyr1, flags=0, count=0):
    return _ui.geomGetHoles(lyr1, flags, count)

def geomGetHoled(lyr1, flags=0, count=0):
    return _ui.geomGetHoled(lyr1, flags, count)

def geomGetNon90(lyr1):
    return _ui.geomGetNon90(lyr1)

def geomGetNon45(lyr1):
    return _ui.geomGetNon45(lyr1)

def geomGetRectangles(lyr1):
    return _ui.geomGetRectangles(lyr1)

def geomGetPolygons(lyr1):
    return _ui.geomGetPolygons(lyr1)

def geomGetVertices(*args):
    return _ui.geomGetVertices(*args)

def setExtViewName(name):
    return _ui.setExtViewName(name)

def geomErase(*args):
    return _ui.geomErase(*args)

def saveDerived(*args):
    return _ui.saveDerived(*args)

def saveInterconnect(layers):
    return _ui.saveInterconnect(layers)

def extractDevice(mname, recLayer, terms):
    return _ui.extractDevice(mname, recLayer, terms)

def extractMOS(mname, recLayer, gateLayer, diffLayer, bulkLayer=None, isoLayer=None):
    return _ui.extractMOS(mname, recLayer, gateLayer, diffLayer, bulkLayer, isoLayer)

def extractMOSDevice(mname, recLayer, terms):
    return _ui.extractMOSDevice(mname, recLayer, terms)

def extractTFT(mname, recLayer, gateLayer, diffLayer):
    return _ui.extractTFT(mname, recLayer, gateLayer, diffLayer)

def extractTFTDevice(mname, recLayer, terms):
    return _ui.extractTFTDevice(mname, recLayer, terms)

def extractRes(mname, recLayer, termLayer, bulkLayer=None):
    return _ui.extractRes(mname, recLayer, termLayer, bulkLayer)

def extractResDevice(mname, recLayer, terms):
    return _ui.extractResDevice(mname, recLayer, terms)

def extractMosCap(mname, recLayer, gateLayer, diffLayer, bulkLayer=None):
    return _ui.extractMosCap(mname, recLayer, gateLayer, diffLayer, bulkLayer)

def extractMosCapDevice(mname, recLayer, terms):
    return _ui.extractMosCapDevice(mname, recLayer, terms)

def extractMimCap(mname, recLayer, plusLayer, minusLayer):
    return _ui.extractMimCap(mname, recLayer, plusLayer, minusLayer)

def extractMimCapDevice(mname, recLayer, terms):
    return _ui.extractMimCapDevice(mname, recLayer, terms)

def extractDio(mname, recLayer, anodeLayer, cathodeLayer, bulkLayer=None):
    return _ui.extractDio(mname, recLayer, anodeLayer, cathodeLayer, bulkLayer)

def extractDioDevice(mname, recLayer, terms):
    return _ui.extractDioDevice(mname, recLayer, terms)

def extractBjt(mname, recLayer, emitLayer, baseLayer, collLayer, bulkLayer=None):
    return _ui.extractBjt(mname, recLayer, emitLayer, baseLayer, collLayer, bulkLayer)

def extractBjtDevice(mname, recLayer, terms):
    return _ui.extractBjtDevice(mname, recLayer, terms)

def extractParasitic(metLayer, areaCap, periCap, gndname):
    return _ui.extractParasitic(metLayer, areaCap, periCap, gndname)

def extractParasitic2(met1Layer, met2Layer, areaCap, periCap):
    return _ui.extractParasitic2(met1Layer, met2Layer, areaCap, periCap)

def extractParasitic3(met1Layer, met2Layer, areaCap, periCap, slayers):
    return _ui.extractParasitic3(met1Layer, met2Layer, areaCap, periCap, slayers)

def extractParasitic3D(gndName, refName, tol=0.01, order=-1, depth=-1):
    return _ui.extractParasitic3D(gndName, refName, tol, order, depth)

def geomReportMarkers(val):
    return _ui.geomReportMarkers(val)

def geomWidth(*args):
    return _ui.geomWidth(*args)

def geomAllowedWidths(lyr1, widths, flags, message=None):
    return _ui.geomAllowedWidths(lyr1, widths, flags, message)

def geomLength(*args):
    return _ui.geomLength(*args)

def geomEdgeLength(lyr1, lyr2, rule, flags, message=None):
    return _ui.geomEdgeLength(lyr1, lyr2, rule, flags, message)

def geomNeighbours(lyr1, dist, rule, num=3, message=None):
    return _ui.geomNeighbours(lyr1, dist, rule, num, message)

def geomSpace2(lyr1, rule, width, length, flags=0, message=None):
    return _ui.geomSpace2(lyr1, rule, width, length, flags, message)

def geomAllowedSpaces(lyr1, spaces, flags, message=None):
    return _ui.geomAllowedSpaces(lyr1, spaces, flags, message)

def geom2DSpace(lyr1, rules, flags, message=None):
    return _ui.geom2DSpace(lyr1, rules, flags, message)

def geomSpace(*args):
    return _ui.geomSpace(*args)

def geomNotch(*args):
    return _ui.geomNotch(*args)

def geomMargin(lyr1, rule, message=None):
    return _ui.geomMargin(lyr1, rule, message)

def geomLineEnd(*args):
    return _ui.geomLineEnd(*args)

def geomPitch(lyr1, rule, flags=0, message=None):
    return _ui.geomPitch(lyr1, rule, flags, message)

def geomOverlap(*args):
    return _ui.geomOverlap(*args)

def geomEnclose(*args):
    return _ui.geomEnclose(*args)

def geomEnclose2(lyr1, lyr2, rule1, rule2, rule3, edges, message=None):
    return _ui.geomEnclose2(lyr1, lyr2, rule1, rule2, rule3, edges, message)

def geomAllowedEncs(lyr1, lyr2, encs, message=None):
    return _ui.geomAllowedEncs(lyr1, lyr2, encs, message)

def geomExtension(*args):
    return _ui.geomExtension(*args)

def geomArea(*args):
    return _ui.geomArea(*args)

def geomAreaIn(*args):
    return _ui.geomAreaIn(*args)

def geomHoleArea(*args):
    return _ui.geomHoleArea(*args)

def geomHoleAreaIn(*args):
    return _ui.geomHoleAreaIn(*args)

def geomOffGrid(lyr1, rule, size=0.1, message=None):
    return _ui.geomOffGrid(lyr1, rule, size, message)

def geomAdjLength(lyr1, rule, len, flags, message=None):
    return _ui.geomAdjLength(lyr1, rule, len, flags, message)

def geomAllowedSize(lyr1, encs, message=None):
    return _ui.geomAllowedSize(lyr1, encs, message)

def geomMaxDensity(lyr1, maxRule, message=None):
    return _ui.geomMaxDensity(lyr1, maxRule, message)

def geomMinDensity(lyr1, minRule, message=None):
    return _ui.geomMinDensity(lyr1, minRule, message)

def geomDensity(lyr1, window_x, window_y, step_x, step_y, rule, flags, message=None):
    return _ui.geomDensity(lyr1, window_x, window_y, step_x, step_y, rule, flags, message)

def geomGetCount():
    return _ui.geomGetCount()

def geomGetTotalCount():
    return _ui.geomGetTotalCount()

def geomNumShapes(layer):
    return _ui.geomNumShapes(layer)
class ui(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ui.ui_swiginit(self, _ui.new_ui())
    __swig_destroy__ = _ui.delete_ui

    def redraw(self, force=True):
        return _ui.ui_redraw(self, force)

    def loadPCell(self, libName, pcellName):
        return _ui.ui_loadPCell(self, libName, pcellName)

    def updatePCellMaster(self, PCellName):
        return _ui.ui_updatePCellMaster(self, PCellName)

    def setMaxErrCount(self, val):
        return _ui.ui_setMaxErrCount(self, val)

    def maxErrCount(self):
        return _ui.ui_maxErrCount(self)

    def editFile(self, fileName=None):
        return _ui.ui_editFile(self, fileName)

    def execPythonFile(self, fileName):
        return _ui.ui_execPythonFile(self, fileName)

    def load(self, moduleName):
        return _ui.ui_load(self, moduleName)

    def getEditCellView(self):
        return _ui.ui_getEditCellView(self)

    def getLibByName(self, name):
        return _ui.ui_getLibByName(self, name)

    def deleteLib(self, lib):
        return _ui.ui_deleteLib(self, lib)

    def getLibList(self):
        return _ui.ui_getLibList(self)

    def closeLib(self, libName):
        return _ui.ui_closeLib(self, libName)

    def getCellList(self):
        return _ui.ui_getCellList(self)

    def newCell(self, libName, cellName, viewName, viewType=maskLayout, pCellName=None, isPCell=False, openCell=True):
        return _ui.ui_newCell(self, libName, cellName, viewName, viewType, pCellName, isPCell, openCell)

    def openCellView(self, libName, cellName, viewName, editable=True):
        return _ui.ui_openCellView(self, libName, cellName, viewName, editable)

    def closeCellView(self, libName, cellName, viewName):
        return _ui.ui_closeCellView(self, libName, cellName, viewName)

    def closeAllWindows(self):
        return _ui.ui_closeAllWindows(self)

    def importTech(self, libName, techFileName, dbu=1000, merge=True, chatty=True):
        return _ui.ui_importTech(self, libName, techFileName, dbu, merge, chatty)

    def importLyp(self, libName, techFileName, dbu=1000, merge=True, chatty=True):
        return _ui.ui_importLyp(self, libName, techFileName, dbu, merge, chatty)

    def importMap(self, libName, mapFileName):
        return _ui.ui_importMap(self, libName, mapFileName)

    def exportTech(self, libName, techFileName, saveSystem=False):
        return _ui.ui_exportTech(self, libName, techFileName, saveSystem)

    def importGds2(self, libName, gdsFileName, dumpFile=None, csen=0, do_dump=False, gdsScaleFactor=1.0, gdsXOffset=0.0, gdsYOffset=0.0, gdsNetAttr=23, gdsDevAttr=7, gdsInstAttr=102, compressed=False, dubiousData=True, setDBUfromGDS=True, reportCells=False, conv=path2path, layers=allLayers, layer=0, dtype=0, openTopCell=False, SetLibName=False, convertVias=False, duplicates=0, viewName=None, importPCells=False, mapList=None):
        return _ui.ui_importGds2(self, libName, gdsFileName, dumpFile, csen, do_dump, gdsScaleFactor, gdsXOffset, gdsYOffset, gdsNetAttr, gdsDevAttr, gdsInstAttr, compressed, dubiousData, setDBUfromGDS, reportCells, conv, layers, layer, dtype, openTopCell, SetLibName, convertVias, duplicates, viewName, importPCells, mapList)

    def exportGds2(self, libName, viewNames, gdsFileName, outputLayers=-1, outputNetProps=False, outputDevProps=False, outputInstProps=False, outputAllCells=True, outputChildCells=True, topCellName=None, netAttr=23, devAttr=7, instAttr=102, compressed=False, reportCells=False, grid=0.005, writeViasAsCells=True, polyVertexLimit=8192, singleNet=False, netName=None, exportPCells=False, mapList=None, writeSegsAsPaths=True, alllowNonOrthoArrays=False):
        return _ui.ui_exportGds2(self, libName, viewNames, gdsFileName, outputLayers, outputNetProps, outputDevProps, outputInstProps, outputAllCells, outputChildCells, topCellName, netAttr, devAttr, instAttr, compressed, reportCells, grid, writeViasAsCells, polyVertexLimit, singleNet, netName, exportPCells, mapList, writeSegsAsPaths, alllowNonOrthoArrays)

    def importGerber(self, *args):
        return _ui.ui_importGerber(self, *args)

    def importLef(self, libName, lefFileName, compressed=False, generateLabels=True, size=0.25, allShapes=False, metLayers=False):
        return _ui.ui_importLef(self, libName, lefFileName, compressed, generateLabels, size, allShapes, metLayers)

    def exportLef(self, *args):
        return _ui.ui_exportLef(self, *args)

    def importDef(self, *args):
        return _ui.ui_importDef(self, *args)

    def exportDef(self, libName, cellName, viewName, defFileName, comps=True, pins=True, regular=True, special=True, regularRouting=True, specialRouting=True):
        return _ui.ui_exportDef(self, libName, cellName, viewName, defFileName, comps, pins, regular, special, regularRouting, specialRouting)

    def importVerilog(self, libName, verilogFileName, powerNet, groundNet, flatViewName, flatten, topCellName, hPinLayer, vPinLayer, aspect, utilisation):
        return _ui.ui_importVerilog(self, libName, verilogFileName, powerNet, groundNet, flatViewName, flatten, topCellName, hPinLayer, vPinLayer, aspect, utilisation)

    def exportVerilog(self, libName, cellName, viewName, verilogFileName, flatMode=True, switchList=None, stopList=None):
        return _ui.ui_exportVerilog(self, libName, cellName, viewName, verilogFileName, flatMode, switchList, stopList)

    def importECO(self, fileName):
        return _ui.ui_importECO(self, fileName)

    def importOasis(self, libName, fileName, dubiousData=True, allowNonPrtChar=True, reportCells=False, conv=path2path, openTopCell=False, scale=1.0, xoffset=0.0, yoffset=0.0, csen=0, duplicates=0, viewName=None, verbose=False, readLayers=False, annotateNets=False, netAttr=23, annotateDevs=False, devAttr=7, annotateInsts=False, instAttr=102, mapList=None):
        return _ui.ui_importOasis(self, libName, fileName, dubiousData, allowNonPrtChar, reportCells, conv, openTopCell, scale, xoffset, yoffset, csen, duplicates, viewName, verbose, readLayers, annotateNets, netAttr, annotateDevs, devAttr, annotateInsts, instAttr, mapList)

    def exportOasis(self, libName, viewNames, fileName, allCells=True, outputChildCells=True, cellNames=None, strict=True, cblock=True, cellOffsets=True, reportCells=False, grid=0.005, writeLayerNames=False, outputLayer=-1, writeSegsAsPaths=True, writeViasAsCells=False, allowNonPrtChar=True, useRectRepetition=False, mapList=None):
        return _ui.ui_exportOasis(self, libName, viewNames, fileName, allCells, outputChildCells, cellNames, strict, cblock, cellOffsets, reportCells, grid, writeLayerNames, outputLayer, writeSegsAsPaths, writeViasAsCells, allowNonPrtChar, useRectRepetition, mapList)

    def importDxf(self, libName, cellName, dxfFileName, dbu=10000):
        return _ui.ui_importDxf(self, libName, cellName, dxfFileName, dbu)

    def exportDxf(self, libName, cellName, dxfFileName, outputText=True, allLayers=True, netText=False, netHeight=1.0):
        return _ui.ui_exportDxf(self, libName, cellName, dxfFileName, outputText, allLayers, netText, netHeight)

    def importCDL(self, libName, cdlFileName):
        return _ui.ui_importCDL(self, libName, cdlFileName)

    def exportCDL(self, *args):
        return _ui.ui_exportCDL(self, *args)

    def importDSPF(self, *args):
        return _ui.ui_importDSPF(self, *args)

    def exportDSPF(self, libName, cellName, viewName, fileName):
        return _ui.ui_exportDSPF(self, libName, cellName, viewName, fileName)

    def importEdif(self, fileName, useScale):
        return _ui.ui_importEdif(self, fileName, useScale)

    def exportEdif(self, libName, cellName, viewName, fileName, extLibs):
        return _ui.ui_exportEdif(self, libName, cellName, viewName, fileName, extLibs)

    def importCds(self, libName, displayName, techName, dbu=1000, useMapFile=False, mapName=None):
        return _ui.ui_importCds(self, libName, displayName, techName, dbu, useMapFile, mapName)

    def importLaker(self, libName, displayName, techName, dbu=1000, useMapFile=False, mapName=None):
        return _ui.ui_importLaker(self, libName, displayName, techName, dbu, useMapFile, mapName)

    def importLaff(self, fileName):
        return _ui.ui_importLaff(self, fileName)

    def importHercules(self, fileName, libName, cellName, viewName):
        return _ui.ui_importHercules(self, fileName, libName, cellName, viewName)

    def importCalibre(self, fileName, libName, cellName, viewName):
        return _ui.ui_importCalibre(self, fileName, libName, cellName, viewName)

    def importSkill(self, libName, displayName, skillFileName, dbu=1000, useMapFile=False, mapFileName=None):
        return _ui.ui_importSkill(self, libName, displayName, skillFileName, dbu, useMapFile, mapFileName)

    def cdlFlatten(self, *args):
        return _ui.ui_cdlFlatten(self, *args)

    def scaleCells(self, cv, scaleFactor, grid, allCells=False):
        return _ui.ui_scaleCells(self, cv, scaleFactor, grid, allCells)

    def scaleCell(self, cv, scaleFactor, grid):
        return _ui.ui_scaleCell(self, cv, scaleFactor, grid)

    def biasCells(self, cv, layer, biasFactor, Xgrid, Ygrid, allCells=False):
        return _ui.ui_biasCells(self, cv, layer, biasFactor, Xgrid, Ygrid, allCells)

    def dbReadSkill(self, skillFileName):
        return _ui.ui_dbReadSkill(self, skillFileName)

    def dbReadSkillDir(self, skillDirName, liblist):
        return _ui.ui_dbReadSkillDir(self, skillDirName, liblist)

    def biasCell(self, cv, layer, biasFactor, Xgrid, Ygrid):
        return _ui.ui_biasCell(self, cv, layer, biasFactor, Xgrid, Ygrid)

    def updateCellBBox(self, c):
        return _ui.ui_updateCellBBox(self, c)

    def zoomIn(self, *args):
        return _ui.ui_zoomIn(self, *args)

    def zoomOut(self, *args):
        return _ui.ui_zoomOut(self, *args)

    def zoomToNet(self, netName):
        return _ui.ui_zoomToNet(self, netName)

    def zoomToNets(self, names):
        return _ui.ui_zoomToNets(self, names)

    def selectArea(self, x1, y1, x2, y2, add=False):
        return _ui.ui_selectArea(self, x1, y1, x2, y2, add)

    def deselectArea(self, x1, y1, x2, y2):
        return _ui.ui_deselectArea(self, x1, y1, x2, y2)

    def selectAll(self):
        return _ui.ui_selectAll(self)

    def deselectAll(self):
        return _ui.ui_deselectAll(self)

    def selectPoint(self, x1, y1, add=False):
        return _ui.ui_selectPoint(self, x1, y1, add)

    def deselectPoint(self, x1, y1):
        return _ui.ui_deselectPoint(self, x1, y1)

    def selectObj(self, *args):
        return _ui.ui_selectObj(self, *args)

    def deselectObj(self, *args):
        return _ui.ui_deselectObj(self, *args)

    def addSelected(self, *args):
        return _ui.ui_addSelected(self, *args)

    def getSelectedSet(self):
        return _ui.ui_getSelectedSet(self)

    def moveSelected(self, dist, orient):
        return _ui.ui_moveSelected(self, dist, orient)

    def copySelected(self, dist, orient):
        return _ui.ui_copySelected(self, dist, orient)

    def addMarker(self, *args):
        return _ui.ui_addMarker(self, *args)

    def clearMarkers(self):
        return _ui.ui_clearMarkers(self)

    def addHiliteByLayer(self, name, lyr, r, g, b, a=255):
        return _ui.ui_addHiliteByLayer(self, name, lyr, r, g, b, a)

    def addHilite(self, *args):
        return _ui.ui_addHilite(self, *args)

    def clearHilites(self):
        return _ui.ui_clearHilites(self)

    def hiliteSubNetsByCap(self, netName, a=128):
        return _ui.ui_hiliteSubNetsByCap(self, netName, a)

    def displayOnlyThisNet(self, name):
        return _ui.ui_displayOnlyThisNet(self, name)

    def displayAddThisNetS(self, name):
        return _ui.ui_displayAddThisNetS(self, name)

    def displayHideThisNet(self, name):
        return _ui.ui_displayHideThisNet(self, name)

    def displayAllNets(self):
        return _ui.ui_displayAllNets(self)

    def getDisplayNets(self):
        return _ui.ui_getDisplayNets(self)

    def isMemberOfDisplayNets(self, name):
        return _ui.ui_isMemberOfDisplayNets(self, name)

    def getHideNets(self):
        return _ui.ui_getHideNets(self)

    def isMemberOfHideNets(self, name):
        return _ui.ui_isMemberOfHideNets(self, name)

    def updateLibBrowser(self):
        return _ui.ui_updateLibBrowser(self)

    def updateLSW(self):
        return _ui.ui_updateLSW(self)

    def setLayerVisible(self, layerName, purpose, val):
        return _ui.ui_setLayerVisible(self, layerName, purpose, val)

    def isLayerVisible(self, layername, purpose):
        return _ui.ui_isLayerVisible(self, layername, purpose)

    def setAllVisible(self, val):
        return _ui.ui_setAllVisible(self, val)

    def setLayerSelectable(self, layerName, purpose, val):
        return _ui.ui_setLayerSelectable(self, layerName, purpose, val)

    def isLayerSelectable(self, layername, purpose):
        return _ui.ui_isLayerSelectable(self, layername, purpose)

    def setAllSelectable(self, val):
        return _ui.ui_setAllSelectable(self, val)

    def createMenu(self, *args):
        return _ui.ui_createMenu(self, *args)

    def createAction(self, *args):
        return _ui.ui_createAction(self, *args)

    def createActionGroup(self):
        return _ui.ui_createActionGroup(self)

    def setBindKey(self, action, key):
        return _ui.ui_setBindKey(self, action, key)

    def createMenuItem(self, menu, action):
        return _ui.ui_createMenuItem(self, menu, action)

    def createIcon(self, fileName):
        return _ui.ui_createIcon(self, fileName)

    def setIcon(self, *args):
        return _ui.ui_setIcon(self, *args)

    def createToolBar(self, name):
        return _ui.ui_createToolBar(self, name)

    def createToolBarItem(self, toolBar, action):
        return _ui.ui_createToolBarItem(self, toolBar, action)

    def addSeparator(self, *args):
        return _ui.ui_addSeparator(self, *args)

    def createDialog(self, okCallback):
        return _ui.ui_createDialog(self, okCallback)

    def traceNet(self, cv, start, mode, addConnectivity=False, netName=None, libName=None, cellName=None, viewName=None, red=255, green=255, blue=0, alpha=255):
        return _ui.ui_traceNet(self, cv, start, mode, addConnectivity, netName, libName, cellName, viewName, red, green, blue, alpha)

    def traceLabel(self, cv, label_layer, attach_layer, mode, useLabelNameForNet=False, labelName=None, libName=None, cellName=None, viewName=None, red=255, green=255, blue=0, alpha=255):
        return _ui.ui_traceLabel(self, cv, label_layer, attach_layer, mode, useLabelNameForNet, labelName, libName, cellName, viewName, red, green, blue, alpha)

    def shortTracer(self, cv, nt):
        return _ui.ui_shortTracer(self, cv, nt)

    def compareCells(self, *args):
        return _ui.ui_compareCells(self, *args)

    def compareCells2(self, *args):
        return _ui.ui_compareCells2(self, *args)

    def compareCells3(self, *args):
        return _ui.ui_compareCells3(self, *args)

    def booleanOp(self, *args):
        return _ui.ui_booleanOp(self, *args)

    def tiledBooleanOp(self, *args):
        return _ui.ui_tiledBooleanOp(self, *args)

    def runLVS(self, *args):
        return _ui.ui_runLVS(self, *args)

    def schCheck(self, libName, cellName, viewName, snapLabels=False, snapSize=0.0, instNamesSpice=True):
        return _ui.ui_schCheck(self, libName, cellName, viewName, snapLabels, snapSize, instNamesSpice)

    def symCheck(self, libName, cellName, viewName):
        return _ui.ui_symCheck(self, libName, cellName, viewName)

    def uiSchCheck(self, cv, fwires=2, finputs=2, foutputs=1, fios=1, dupinsts=1, soutputs=2, snapLabels=False, snapSize=5, instNamesSpice=True):
        return _ui.ui_uiSchCheck(self, cv, fwires, finputs, foutputs, fios, dupinsts, soutputs, snapLabels, snapSize, instNamesSpice)

    def uiSymCheck(self, cv):
        return _ui.ui_uiSymCheck(self, cv)

    def viewCheck(self, *args):
        return _ui.ui_viewCheck(self, *args)

    def createCellView(self, libName, cellName, viewName, shape=0, pinSize=4, snapGrid=0.0625):
        return _ui.ui_createCellView(self, libName, cellName, viewName, shape, pinSize, snapGrid)

    def schHNLOut(self, *args):
        return _ui.ui_schHNLOut(self, *args)

    def checkExtracted(self, cv):
        return _ui.ui_checkExtracted(self, cv)

    def routeWire(self, start, stop, netName=None, wrongWayCost=4.0, blockageCost=4.0, heuristic=1.2):
        return _ui.ui_routeWire(self, start, stop, netName, wrongWayCost, blockageCost, heuristic)

    def routeTrack(self, start, stop, layer, netName=None):
        return _ui.ui_routeTrack(self, start, stop, layer, netName)

    def execCallback(self, arg2):
        return _ui.ui_execCallback(self, arg2)

    def fileNewCell(self):
        return _ui.ui_fileNewCell(self)

    def fileOpenCell(self):
        return _ui.ui_fileOpenCell(self)

    def fileSaveCell(self):
        return _ui.ui_fileSaveCell(self)

    def fileSaveCellAs(self):
        return _ui.ui_fileSaveCellAs(self)

    def fileRestoreCell(self):
        return _ui.ui_fileRestoreCell(self)

    def fileNewLib(self):
        return _ui.ui_fileNewLib(self)

    def fileOpenLib(self):
        return _ui.ui_fileOpenLib(self)

    def fileSaveLib(self, verbose=True, saveCells=True):
        return _ui.ui_fileSaveLib(self, verbose, saveCells)

    def fileSaveLibAs(self, *args):
        return _ui.ui_fileSaveLibAs(self, *args)

    def fileCloseLib(self):
        return _ui.ui_fileCloseLib(self)

    def fileDumpGraphics(self):
        return _ui.ui_fileDumpGraphics(self)

    def filePrint(self):
        return _ui.ui_filePrint(self)

    def fileView(self):
        return _ui.ui_fileView(self)

    def fileExit(self, force=False):
        return _ui.ui_fileExit(self, force)

    def fileCheckAndSave(self):
        return _ui.ui_fileCheckAndSave(self)

    def winFit(self):
        return _ui.ui_winFit(self)

    def winFitPlus(self):
        return _ui.ui_winFitPlus(self)

    def winRedraw(self):
        return _ui.ui_winRedraw(self)

    def winCancel(self):
        return _ui.ui_winCancel(self)

    def winRuler(self):
        return _ui.ui_winRuler(self)

    def winDeleteRulers(self):
        return _ui.ui_winDeleteRulers(self)

    def winPan(self):
        return _ui.ui_winPan(self)

    def winPanLeft(self):
        return _ui.ui_winPanLeft(self)

    def winPanRight(self):
        return _ui.ui_winPanRight(self)

    def winPanUp(self):
        return _ui.ui_winPanUp(self)

    def winPanDown(self):
        return _ui.ui_winPanDown(self)

    def winPan2Point(self):
        return _ui.ui_winPan2Point(self)

    def winZoomIn(self):
        return _ui.ui_winZoomIn(self)

    def winZoomOut(self):
        return _ui.ui_winZoomOut(self)

    def winZoomSelected(self):
        return _ui.ui_winZoomSelected(self)

    def winZoomHilited(self):
        return _ui.ui_winZoomHilited(self)

    def winView0(self):
        return _ui.ui_winView0(self)

    def winView20(self):
        return _ui.ui_winView20(self)

    def winSelOpts(self):
        return _ui.ui_winSelOpts(self)

    def winDisplayPrefs(self):
        return _ui.ui_winDisplayPrefs(self)

    def winLastView(self):
        return _ui.ui_winLastView(self)

    def editYank(self):
        return _ui.ui_editYank(self)

    def editPaste(self):
        return _ui.ui_editPaste(self)

    def editUndo(self):
        return _ui.ui_editUndo(self)

    def editRedo(self):
        return _ui.ui_editRedo(self)

    def editCut(self):
        return _ui.ui_editCut(self)

    def editMove(self):
        return _ui.ui_editMove(self)

    def editMoveBy(self):
        return _ui.ui_editMoveBy(self)

    def editNudge(self):
        return _ui.ui_editNudge(self)

    def editCopy(self):
        return _ui.ui_editCopy(self)

    def editStretch(self):
        return _ui.ui_editStretch(self)

    def editReshape(self):
        return _ui.ui_editReshape(self)

    def editRoundCorners(self):
        return _ui.ui_editRoundCorners(self)

    def editSelNet(self):
        return _ui.ui_editSelNet(self)

    def editSelInst(self):
        return _ui.ui_editSelInst(self)

    def editSelAll(self):
        return _ui.ui_editSelAll(self)

    def editDeselAll(self):
        return _ui.ui_editDeselAll(self)

    def editHierAscend(self):
        return _ui.ui_editHierAscend(self)

    def editHierDescend(self):
        return _ui.ui_editHierDescend(self)

    def editHierCreate(self):
        return _ui.ui_editHierCreate(self)

    def editHierFlatten(self):
        return _ui.ui_editHierFlatten(self)

    def editFind(self):
        return _ui.ui_editFind(self)

    def editRotate(self):
        return _ui.ui_editRotate(self)

    def editChangeOrient(self, o):
        return _ui.ui_editChangeOrient(self, o)

    def editMirrorX(self):
        return _ui.ui_editMirrorX(self)

    def editMirrorY(self):
        return _ui.ui_editMirrorY(self)

    def editRotate90(self):
        return _ui.ui_editRotate90(self)

    def editMoveOrigin(self):
        return _ui.ui_editMoveOrigin(self)

    def editAddFillers(self):
        return _ui.ui_editAddFillers(self)

    def editDeleteFillers(self):
        return _ui.ui_editDeleteFillers(self)

    def editReplaceViews(self):
        return _ui.ui_editReplaceViews(self)

    def editBindkeys(self):
        return _ui.ui_editBindkeys(self)

    def editInPlace(self):
        return _ui.ui_editInPlace(self)

    def editReturnOneLevel(self):
        return _ui.ui_editReturnOneLevel(self)

    def editPath2Poly(self):
        return _ui.ui_editPath2Poly(self)

    def editAddVertex(self):
        return _ui.ui_editAddVertex(self)

    def editMergeSelected(self):
        return _ui.ui_editMergeSelected(self)

    def editChop(self):
        return _ui.ui_editChop(self)

    def editAlign(self):
        return _ui.ui_editAlign(self)

    def editScale(self):
        return _ui.ui_editScale(self)

    def editBias(self):
        return _ui.ui_editBias(self)

    def editBooleans(self):
        return _ui.ui_editBooleans(self)

    def editSetNet(self):
        return _ui.ui_editSetNet(self)

    def editCreatePinsFromLabels(self):
        return _ui.ui_editCreatePinsFromLabels(self)

    def editCreateInst(self):
        return _ui.ui_editCreateInst(self)

    def editCreateLabel(self):
        return _ui.ui_editCreateLabel(self)

    def editCreatePath(self):
        return _ui.ui_editCreatePath(self)

    def editCreateMPP(self):
        return _ui.ui_editCreateMPP(self)

    def editCreatePoly(self):
        return _ui.ui_editCreatePoly(self)

    def editCreateRect(self):
        return _ui.ui_editCreateRect(self)

    def editCreateArc(self):
        return _ui.ui_editCreateArc(self)

    def editCreateEllipse(self):
        return _ui.ui_editCreateEllipse(self)

    def editCreateVia(self):
        return _ui.ui_editCreateVia(self)

    def editCreatePin(self):
        return _ui.ui_editCreatePin(self)

    def editCreateLine(self):
        return _ui.ui_editCreateLine(self)

    def editCreateWire(self):
        return _ui.ui_editCreateWire(self)

    def editCreateBus(self):
        return _ui.ui_editCreateBus(self)

    def verifyCheckOffGrid(self):
        return _ui.ui_verifyCheckOffGrid(self)

    def verifyDRCRun(self):
        return _ui.ui_verifyDRCRun(self)

    def verifyDRCView(self):
        return _ui.ui_verifyDRCView(self)

    def verifyDRCClear(self):
        return _ui.ui_verifyDRCClear(self)

    def verifyLPERun(self):
        return _ui.ui_verifyLPERun(self)

    def verifyLVSRun(self):
        return _ui.ui_verifyLVSRun(self)

    def verifyCompare(self):
        return _ui.ui_verifyCompare(self)

    def verifyTraceNet(self):
        return _ui.ui_verifyTraceNet(self)

    def verifyLayerStack(self):
        return _ui.ui_verifyLayerStack(self)

    def verifyShortTracer(self):
        return _ui.ui_verifyShortTracer(self)

    def verifyClearHighlights(self):
        return _ui.ui_verifyClearHighlights(self)

    def fpInit(self):
        return _ui.ui_fpInit(self)

    def checkOverlaps(self):
        return _ui.ui_checkOverlaps(self)

    def fpCreateRows(self):
        return _ui.ui_fpCreateRows(self)

    def fpCreateRegion(self):
        return _ui.ui_fpCreateRegion(self)

    def fpCreateGroups(self):
        return _ui.ui_fpCreateGroups(self)

    def fpPlace(self):
        return _ui.ui_fpPlace(self)

    def fpUnplace(self):
        return _ui.ui_fpUnplace(self)

    def fpGlobalRoute(self):
        return _ui.ui_fpGlobalRoute(self)

    def fpDisplayGroute(self):
        return _ui.ui_fpDisplayGroute(self)

    def fpShowCongMap(self):
        return _ui.ui_fpShowCongMap(self)

    def fpNewGroute(self):
        return _ui.ui_fpNewGroute(self)

    def fpHighLightNetTypes(self):
        return _ui.ui_fpHighLightNetTypes(self)

    def viewHierarchy(self):
        return _ui.ui_viewHierarchy(self)

    def viewLSW(self):
        return _ui.ui_viewLSW(self)

    def viewLibBrowser(self):
        return _ui.ui_viewLibBrowser(self)

    def viewStatusbar(self):
        return _ui.ui_viewStatusbar(self)

    def tiledBooleans(self):
        return _ui.ui_tiledBooleans(self)

    def showMemStats(self):
        return _ui.ui_showMemStats(self)

    def showKDTreeStats(self):
        return _ui.ui_showKDTreeStats(self)

    def checkIfEdited(self, cv):
        return _ui.ui_checkIfEdited(self, cv)

    def saveCellView(self, *args):
        return _ui.ui_saveCellView(self, *args)

    def saveLib(self, lib, verbose=True, saveCells=True):
        return _ui.ui_saveLib(self, lib, verbose, saveCells)

    def deleteCellView(self, libName, cellName, viewName):
        return _ui.ui_deleteCellView(self, libName, cellName, viewName)

    def renameCellView(self, libName, cellName, viewName):
        return _ui.ui_renameCellView(self, libName, cellName, viewName)

    def copyCell(self, libName, cellName):
        return _ui.ui_copyCell(self, libName, cellName)

    def copyCellView(self, libName, cellName, viewName):
        return _ui.ui_copyCellView(self, libName, cellName, viewName)

    def properties(self, *args):
        return _ui.ui_properties(self, *args)

    def copyHierCellView(self, dest, cv):
        return _ui.ui_copyHierCellView(self, dest, cv)

    def fpPlaceReadDesign(self, exitCode, exitStatus):
        return _ui.ui_fpPlaceReadDesign(self, exitCode, exitStatus)

    def fpPlaceReadStdout(self):
        return _ui.ui_fpPlaceReadStdout(self)

    def fpPlaceReadStderr(self):
        return _ui.ui_fpPlaceReadStderr(self)

    def lvsStarted(self):
        return _ui.ui_lvsStarted(self)

    def lvsReadErrors(self, exitCode, exitStatus):
        return _ui.ui_lvsReadErrors(self, exitCode, exitStatus)

    def lvsReadStdout(self):
        return _ui.ui_lvsReadStdout(self)

    def lvsReadStderr(self):
        return _ui.ui_lvsReadStderr(self)

    def findTopCells(self, lib):
        return _ui.ui_findTopCells(self, lib)

# Register ui in _ui:
_ui.ui_swigregister(ui)
none = cvar.none
lessthan = cvar.lessthan
samenet = cvar.samenet
diffnet = cvar.diffnet
vertical = cvar.vertical
horizontal = cvar.horizontal
diagonal = cvar.diagonal
project = cvar.project
parallel = cvar.parallel
abut = cvar.abut
not_equal = cvar.not_equal
equals = cvar.equals
greaterthan = cvar.greaterthan
edges = cvar.edges
output_only = cvar.output_only
opposite = cvar.opposite
layer1 = cvar.layer1
layer2 = cvar.layer2
butting = cvar.butting
coincident = cvar.coincident
outside = cvar.outside
inside = cvar.inside
over = cvar.over
not_over = cvar.not_over
greaterorequal = cvar.greaterorequal
lessorequal = cvar.lessorequal
not_singular = cvar.not_singular
inner = cvar.inner

class arcList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.arcList_swiginit(self, _ui.new_arcList(*args))
    __swig_destroy__ = _ui.delete_arcList

    def clear(self):
        return _ui.arcList_clear(self)

    def size(self):
        return _ui.arcList_size(self)

    def isEmpty(self):
        return _ui.arcList_isEmpty(self)

    def member(self, d):
        return _ui.arcList_member(self, d)

    def prepend(self, d):
        return _ui.arcList_prepend(self, d)

    def append(self, d):
        return _ui.arcList_append(self, d)

    def concat(self, list):
        return _ui.arcList_concat(self, list)

    def remove(self, d):
        return _ui.arcList_remove(self, d)

    def pop(self):
        return _ui.arcList_pop(self)

    def first(self):
        return _ui.arcList_first(self)

    def next(self):
        return _ui.arcList_next(self)

    def peek(self):
        return _ui.arcList_peek(self)

    def last(self):
        return _ui.arcList_last(self)

    def sort(self, comp):
        return _ui.arcList_sort(self, comp)

    def reverse(self):
        return _ui.arcList_reverse(self)

# Register arcList in _ui:
_ui.arcList_swigregister(arcList)

class arrayList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.arrayList_swiginit(self, _ui.new_arrayList(*args))
    __swig_destroy__ = _ui.delete_arrayList

    def clear(self):
        return _ui.arrayList_clear(self)

    def size(self):
        return _ui.arrayList_size(self)

    def isEmpty(self):
        return _ui.arrayList_isEmpty(self)

    def member(self, d):
        return _ui.arrayList_member(self, d)

    def prepend(self, d):
        return _ui.arrayList_prepend(self, d)

    def append(self, d):
        return _ui.arrayList_append(self, d)

    def concat(self, list):
        return _ui.arrayList_concat(self, list)

    def remove(self, d):
        return _ui.arrayList_remove(self, d)

    def pop(self):
        return _ui.arrayList_pop(self)

    def first(self):
        return _ui.arrayList_first(self)

    def next(self):
        return _ui.arrayList_next(self)

    def peek(self):
        return _ui.arrayList_peek(self)

    def last(self):
        return _ui.arrayList_last(self)

    def sort(self, comp):
        return _ui.arrayList_sort(self, comp)

    def reverse(self):
        return _ui.arrayList_reverse(self)

# Register arrayList in _ui:
_ui.arrayList_swigregister(arrayList)

class cellViewList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.cellViewList_swiginit(self, _ui.new_cellViewList(*args))
    __swig_destroy__ = _ui.delete_cellViewList

    def clear(self):
        return _ui.cellViewList_clear(self)

    def size(self):
        return _ui.cellViewList_size(self)

    def isEmpty(self):
        return _ui.cellViewList_isEmpty(self)

    def member(self, d):
        return _ui.cellViewList_member(self, d)

    def prepend(self, d):
        return _ui.cellViewList_prepend(self, d)

    def append(self, d):
        return _ui.cellViewList_append(self, d)

    def concat(self, list):
        return _ui.cellViewList_concat(self, list)

    def remove(self, d):
        return _ui.cellViewList_remove(self, d)

    def pop(self):
        return _ui.cellViewList_pop(self)

    def first(self):
        return _ui.cellViewList_first(self)

    def next(self):
        return _ui.cellViewList_next(self)

    def peek(self):
        return _ui.cellViewList_peek(self)

    def last(self):
        return _ui.cellViewList_last(self)

    def sort(self, comp):
        return _ui.cellViewList_sort(self, comp)

    def reverse(self):
        return _ui.cellViewList_reverse(self)

# Register cellViewList in _ui:
_ui.cellViewList_swigregister(cellViewList)

class cellList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.cellList_swiginit(self, _ui.new_cellList(*args))
    __swig_destroy__ = _ui.delete_cellList

    def clear(self):
        return _ui.cellList_clear(self)

    def size(self):
        return _ui.cellList_size(self)

    def isEmpty(self):
        return _ui.cellList_isEmpty(self)

    def member(self, d):
        return _ui.cellList_member(self, d)

    def prepend(self, d):
        return _ui.cellList_prepend(self, d)

    def append(self, d):
        return _ui.cellList_append(self, d)

    def concat(self, list):
        return _ui.cellList_concat(self, list)

    def remove(self, d):
        return _ui.cellList_remove(self, d)

    def pop(self):
        return _ui.cellList_pop(self)

    def first(self):
        return _ui.cellList_first(self)

    def next(self):
        return _ui.cellList_next(self)

    def peek(self):
        return _ui.cellList_peek(self)

    def last(self):
        return _ui.cellList_last(self)

    def sort(self, comp):
        return _ui.cellList_sort(self, comp)

    def reverse(self):
        return _ui.cellList_reverse(self)

# Register cellList in _ui:
_ui.cellList_swigregister(cellList)

class lppList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.lppList_swiginit(self, _ui.new_lppList(*args))
    __swig_destroy__ = _ui.delete_lppList

    def clear(self):
        return _ui.lppList_clear(self)

    def size(self):
        return _ui.lppList_size(self)

    def isEmpty(self):
        return _ui.lppList_isEmpty(self)

    def member(self, d):
        return _ui.lppList_member(self, d)

    def prepend(self, d):
        return _ui.lppList_prepend(self, d)

    def append(self, d):
        return _ui.lppList_append(self, d)

    def concat(self, list):
        return _ui.lppList_concat(self, list)

    def remove(self, d):
        return _ui.lppList_remove(self, d)

    def pop(self):
        return _ui.lppList_pop(self)

    def first(self):
        return _ui.lppList_first(self)

    def next(self):
        return _ui.lppList_next(self)

    def peek(self):
        return _ui.lppList_peek(self)

    def last(self):
        return _ui.lppList_last(self)

    def sort(self, comp):
        return _ui.lppList_sort(self, comp)

    def reverse(self):
        return _ui.lppList_reverse(self)

# Register lppList in _ui:
_ui.lppList_swigregister(lppList)

class objList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.objList_swiginit(self, _ui.new_objList(*args))
    __swig_destroy__ = _ui.delete_objList

    def clear(self):
        return _ui.objList_clear(self)

    def size(self):
        return _ui.objList_size(self)

    def isEmpty(self):
        return _ui.objList_isEmpty(self)

    def member(self, d):
        return _ui.objList_member(self, d)

    def prepend(self, d):
        return _ui.objList_prepend(self, d)

    def append(self, d):
        return _ui.objList_append(self, d)

    def concat(self, list):
        return _ui.objList_concat(self, list)

    def remove(self, d):
        return _ui.objList_remove(self, d)

    def pop(self):
        return _ui.objList_pop(self)

    def first(self):
        return _ui.objList_first(self)

    def next(self):
        return _ui.objList_next(self)

    def peek(self):
        return _ui.objList_peek(self)

    def last(self):
        return _ui.objList_last(self)

    def sort(self, comp):
        return _ui.objList_sort(self, comp)

    def reverse(self):
        return _ui.objList_reverse(self)

# Register objList in _ui:
_ui.objList_swigregister(objList)

class ellipseList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.ellipseList_swiginit(self, _ui.new_ellipseList(*args))
    __swig_destroy__ = _ui.delete_ellipseList

    def clear(self):
        return _ui.ellipseList_clear(self)

    def size(self):
        return _ui.ellipseList_size(self)

    def isEmpty(self):
        return _ui.ellipseList_isEmpty(self)

    def member(self, d):
        return _ui.ellipseList_member(self, d)

    def prepend(self, d):
        return _ui.ellipseList_prepend(self, d)

    def append(self, d):
        return _ui.ellipseList_append(self, d)

    def concat(self, list):
        return _ui.ellipseList_concat(self, list)

    def remove(self, d):
        return _ui.ellipseList_remove(self, d)

    def pop(self):
        return _ui.ellipseList_pop(self)

    def first(self):
        return _ui.ellipseList_first(self)

    def next(self):
        return _ui.ellipseList_next(self)

    def peek(self):
        return _ui.ellipseList_peek(self)

    def last(self):
        return _ui.ellipseList_last(self)

    def sort(self, comp):
        return _ui.ellipseList_sort(self, comp)

    def reverse(self):
        return _ui.ellipseList_reverse(self)

# Register ellipseList in _ui:
_ui.ellipseList_swigregister(ellipseList)

class dbHierObjList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.dbHierObjList_swiginit(self, _ui.new_dbHierObjList(*args))
    __swig_destroy__ = _ui.delete_dbHierObjList

    def clear(self):
        return _ui.dbHierObjList_clear(self)

    def size(self):
        return _ui.dbHierObjList_size(self)

    def isEmpty(self):
        return _ui.dbHierObjList_isEmpty(self)

    def member(self, d):
        return _ui.dbHierObjList_member(self, d)

    def prepend(self, d):
        return _ui.dbHierObjList_prepend(self, d)

    def append(self, d):
        return _ui.dbHierObjList_append(self, d)

    def concat(self, list):
        return _ui.dbHierObjList_concat(self, list)

    def remove(self, d):
        return _ui.dbHierObjList_remove(self, d)

    def pop(self):
        return _ui.dbHierObjList_pop(self)

    def first(self):
        return _ui.dbHierObjList_first(self)

    def next(self):
        return _ui.dbHierObjList_next(self)

    def peek(self):
        return _ui.dbHierObjList_peek(self)

    def last(self):
        return _ui.dbHierObjList_last(self)

    def sort(self, comp):
        return _ui.dbHierObjList_sort(self, comp)

    def reverse(self):
        return _ui.dbHierObjList_reverse(self)

# Register dbHierObjList in _ui:
_ui.dbHierObjList_swigregister(dbHierObjList)

class hsegList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.hsegList_swiginit(self, _ui.new_hsegList(*args))
    __swig_destroy__ = _ui.delete_hsegList

    def clear(self):
        return _ui.hsegList_clear(self)

    def size(self):
        return _ui.hsegList_size(self)

    def isEmpty(self):
        return _ui.hsegList_isEmpty(self)

    def member(self, d):
        return _ui.hsegList_member(self, d)

    def prepend(self, d):
        return _ui.hsegList_prepend(self, d)

    def append(self, d):
        return _ui.hsegList_append(self, d)

    def concat(self, list):
        return _ui.hsegList_concat(self, list)

    def remove(self, d):
        return _ui.hsegList_remove(self, d)

    def pop(self):
        return _ui.hsegList_pop(self)

    def first(self):
        return _ui.hsegList_first(self)

    def next(self):
        return _ui.hsegList_next(self)

    def peek(self):
        return _ui.hsegList_peek(self)

    def last(self):
        return _ui.hsegList_last(self)

    def sort(self, comp):
        return _ui.hsegList_sort(self, comp)

    def reverse(self):
        return _ui.hsegList_reverse(self)

# Register hsegList in _ui:
_ui.hsegList_swigregister(hsegList)

class instList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.instList_swiginit(self, _ui.new_instList(*args))
    __swig_destroy__ = _ui.delete_instList

    def clear(self):
        return _ui.instList_clear(self)

    def size(self):
        return _ui.instList_size(self)

    def isEmpty(self):
        return _ui.instList_isEmpty(self)

    def member(self, d):
        return _ui.instList_member(self, d)

    def prepend(self, d):
        return _ui.instList_prepend(self, d)

    def append(self, d):
        return _ui.instList_append(self, d)

    def concat(self, list):
        return _ui.instList_concat(self, list)

    def remove(self, d):
        return _ui.instList_remove(self, d)

    def pop(self):
        return _ui.instList_pop(self)

    def first(self):
        return _ui.instList_first(self)

    def next(self):
        return _ui.instList_next(self)

    def peek(self):
        return _ui.instList_peek(self)

    def last(self):
        return _ui.instList_last(self)

    def sort(self, comp):
        return _ui.instList_sort(self, comp)

    def reverse(self):
        return _ui.instList_reverse(self)

# Register instList in _ui:
_ui.instList_swigregister(instList)

class instPinList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.instPinList_swiginit(self, _ui.new_instPinList(*args))
    __swig_destroy__ = _ui.delete_instPinList

    def clear(self):
        return _ui.instPinList_clear(self)

    def size(self):
        return _ui.instPinList_size(self)

    def isEmpty(self):
        return _ui.instPinList_isEmpty(self)

    def member(self, d):
        return _ui.instPinList_member(self, d)

    def prepend(self, d):
        return _ui.instPinList_prepend(self, d)

    def append(self, d):
        return _ui.instPinList_append(self, d)

    def concat(self, list):
        return _ui.instPinList_concat(self, list)

    def remove(self, d):
        return _ui.instPinList_remove(self, d)

    def pop(self):
        return _ui.instPinList_pop(self)

    def first(self):
        return _ui.instPinList_first(self)

    def next(self):
        return _ui.instPinList_next(self)

    def peek(self):
        return _ui.instPinList_peek(self)

    def last(self):
        return _ui.instPinList_last(self)

    def sort(self, comp):
        return _ui.instPinList_sort(self, comp)

    def reverse(self):
        return _ui.instPinList_reverse(self)

# Register instPinList in _ui:
_ui.instPinList_swigregister(instPinList)

class labelList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.labelList_swiginit(self, _ui.new_labelList(*args))
    __swig_destroy__ = _ui.delete_labelList

    def clear(self):
        return _ui.labelList_clear(self)

    def size(self):
        return _ui.labelList_size(self)

    def isEmpty(self):
        return _ui.labelList_isEmpty(self)

    def member(self, d):
        return _ui.labelList_member(self, d)

    def prepend(self, d):
        return _ui.labelList_prepend(self, d)

    def append(self, d):
        return _ui.labelList_append(self, d)

    def concat(self, list):
        return _ui.labelList_concat(self, list)

    def remove(self, d):
        return _ui.labelList_remove(self, d)

    def pop(self):
        return _ui.labelList_pop(self)

    def first(self):
        return _ui.labelList_first(self)

    def next(self):
        return _ui.labelList_next(self)

    def peek(self):
        return _ui.labelList_peek(self)

    def last(self):
        return _ui.labelList_last(self)

    def sort(self, comp):
        return _ui.labelList_sort(self, comp)

    def reverse(self):
        return _ui.labelList_reverse(self)

# Register labelList in _ui:
_ui.labelList_swigregister(labelList)

class libList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.libList_swiginit(self, _ui.new_libList(*args))
    __swig_destroy__ = _ui.delete_libList

    def clear(self):
        return _ui.libList_clear(self)

    def size(self):
        return _ui.libList_size(self)

    def isEmpty(self):
        return _ui.libList_isEmpty(self)

    def member(self, d):
        return _ui.libList_member(self, d)

    def prepend(self, d):
        return _ui.libList_prepend(self, d)

    def append(self, d):
        return _ui.libList_append(self, d)

    def concat(self, list):
        return _ui.libList_concat(self, list)

    def remove(self, d):
        return _ui.libList_remove(self, d)

    def pop(self):
        return _ui.libList_pop(self)

    def first(self):
        return _ui.libList_first(self)

    def next(self):
        return _ui.libList_next(self)

    def peek(self):
        return _ui.libList_peek(self)

    def last(self):
        return _ui.libList_last(self)

    def sort(self, comp):
        return _ui.libList_sort(self, comp)

    def reverse(self):
        return _ui.libList_reverse(self)

# Register libList in _ui:
_ui.libList_swigregister(libList)

class mppList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.mppList_swiginit(self, _ui.new_mppList(*args))
    __swig_destroy__ = _ui.delete_mppList

    def clear(self):
        return _ui.mppList_clear(self)

    def size(self):
        return _ui.mppList_size(self)

    def isEmpty(self):
        return _ui.mppList_isEmpty(self)

    def member(self, d):
        return _ui.mppList_member(self, d)

    def prepend(self, d):
        return _ui.mppList_prepend(self, d)

    def append(self, d):
        return _ui.mppList_append(self, d)

    def concat(self, list):
        return _ui.mppList_concat(self, list)

    def remove(self, d):
        return _ui.mppList_remove(self, d)

    def pop(self):
        return _ui.mppList_pop(self)

    def first(self):
        return _ui.mppList_first(self)

    def next(self):
        return _ui.mppList_next(self)

    def peek(self):
        return _ui.mppList_peek(self)

    def last(self):
        return _ui.mppList_last(self)

    def sort(self, comp):
        return _ui.mppList_sort(self, comp)

    def reverse(self):
        return _ui.mppList_reverse(self)

# Register mppList in _ui:
_ui.mppList_swigregister(mppList)

class netList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.netList_swiginit(self, _ui.new_netList(*args))
    __swig_destroy__ = _ui.delete_netList

    def clear(self):
        return _ui.netList_clear(self)

    def size(self):
        return _ui.netList_size(self)

    def isEmpty(self):
        return _ui.netList_isEmpty(self)

    def member(self, d):
        return _ui.netList_member(self, d)

    def prepend(self, d):
        return _ui.netList_prepend(self, d)

    def append(self, d):
        return _ui.netList_append(self, d)

    def concat(self, list):
        return _ui.netList_concat(self, list)

    def remove(self, d):
        return _ui.netList_remove(self, d)

    def pop(self):
        return _ui.netList_pop(self)

    def first(self):
        return _ui.netList_first(self)

    def next(self):
        return _ui.netList_next(self)

    def peek(self):
        return _ui.netList_peek(self)

    def last(self):
        return _ui.netList_last(self)

    def sort(self, comp):
        return _ui.netList_sort(self, comp)

    def reverse(self):
        return _ui.netList_reverse(self)

# Register netList in _ui:
_ui.netList_swigregister(netList)

class pathList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.pathList_swiginit(self, _ui.new_pathList(*args))
    __swig_destroy__ = _ui.delete_pathList

    def clear(self):
        return _ui.pathList_clear(self)

    def size(self):
        return _ui.pathList_size(self)

    def isEmpty(self):
        return _ui.pathList_isEmpty(self)

    def member(self, d):
        return _ui.pathList_member(self, d)

    def prepend(self, d):
        return _ui.pathList_prepend(self, d)

    def append(self, d):
        return _ui.pathList_append(self, d)

    def concat(self, list):
        return _ui.pathList_concat(self, list)

    def remove(self, d):
        return _ui.pathList_remove(self, d)

    def pop(self):
        return _ui.pathList_pop(self)

    def first(self):
        return _ui.pathList_first(self)

    def next(self):
        return _ui.pathList_next(self)

    def peek(self):
        return _ui.pathList_peek(self)

    def last(self):
        return _ui.pathList_last(self)

    def sort(self, comp):
        return _ui.pathList_sort(self, comp)

    def reverse(self):
        return _ui.pathList_reverse(self)

# Register pathList in _ui:
_ui.pathList_swigregister(pathList)

class pinList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.pinList_swiginit(self, _ui.new_pinList(*args))
    __swig_destroy__ = _ui.delete_pinList

    def clear(self):
        return _ui.pinList_clear(self)

    def size(self):
        return _ui.pinList_size(self)

    def isEmpty(self):
        return _ui.pinList_isEmpty(self)

    def member(self, d):
        return _ui.pinList_member(self, d)

    def prepend(self, d):
        return _ui.pinList_prepend(self, d)

    def append(self, d):
        return _ui.pinList_append(self, d)

    def concat(self, list):
        return _ui.pinList_concat(self, list)

    def remove(self, d):
        return _ui.pinList_remove(self, d)

    def pop(self):
        return _ui.pinList_pop(self)

    def first(self):
        return _ui.pinList_first(self)

    def next(self):
        return _ui.pinList_next(self)

    def peek(self):
        return _ui.pinList_peek(self)

    def last(self):
        return _ui.pinList_last(self)

    def sort(self, comp):
        return _ui.pinList_sort(self, comp)

    def reverse(self):
        return _ui.pinList_reverse(self)

# Register pinList in _ui:
_ui.pinList_swigregister(pinList)

class polyList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.polyList_swiginit(self, _ui.new_polyList(*args))
    __swig_destroy__ = _ui.delete_polyList

    def clear(self):
        return _ui.polyList_clear(self)

    def size(self):
        return _ui.polyList_size(self)

    def isEmpty(self):
        return _ui.polyList_isEmpty(self)

    def member(self, d):
        return _ui.polyList_member(self, d)

    def prepend(self, d):
        return _ui.polyList_prepend(self, d)

    def append(self, d):
        return _ui.polyList_append(self, d)

    def concat(self, list):
        return _ui.polyList_concat(self, list)

    def remove(self, d):
        return _ui.polyList_remove(self, d)

    def pop(self):
        return _ui.polyList_pop(self)

    def first(self):
        return _ui.polyList_first(self)

    def next(self):
        return _ui.polyList_next(self)

    def peek(self):
        return _ui.polyList_peek(self)

    def last(self):
        return _ui.polyList_last(self)

    def sort(self, comp):
        return _ui.polyList_sort(self, comp)

    def reverse(self):
        return _ui.polyList_reverse(self)

# Register polyList in _ui:
_ui.polyList_swigregister(polyList)

class rectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.rectList_swiginit(self, _ui.new_rectList(*args))
    __swig_destroy__ = _ui.delete_rectList

    def clear(self):
        return _ui.rectList_clear(self)

    def size(self):
        return _ui.rectList_size(self)

    def isEmpty(self):
        return _ui.rectList_isEmpty(self)

    def member(self, d):
        return _ui.rectList_member(self, d)

    def prepend(self, d):
        return _ui.rectList_prepend(self, d)

    def append(self, d):
        return _ui.rectList_append(self, d)

    def concat(self, list):
        return _ui.rectList_concat(self, list)

    def remove(self, d):
        return _ui.rectList_remove(self, d)

    def pop(self):
        return _ui.rectList_pop(self)

    def first(self):
        return _ui.rectList_first(self)

    def next(self):
        return _ui.rectList_next(self)

    def peek(self):
        return _ui.rectList_peek(self)

    def last(self):
        return _ui.rectList_last(self)

    def sort(self, comp):
        return _ui.rectList_sort(self, comp)

    def reverse(self):
        return _ui.rectList_reverse(self)

# Register rectList in _ui:
_ui.rectList_swigregister(rectList)

class shapeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.shapeList_swiginit(self, _ui.new_shapeList(*args))
    __swig_destroy__ = _ui.delete_shapeList

    def clear(self):
        return _ui.shapeList_clear(self)

    def size(self):
        return _ui.shapeList_size(self)

    def isEmpty(self):
        return _ui.shapeList_isEmpty(self)

    def member(self, d):
        return _ui.shapeList_member(self, d)

    def prepend(self, d):
        return _ui.shapeList_prepend(self, d)

    def append(self, d):
        return _ui.shapeList_append(self, d)

    def concat(self, list):
        return _ui.shapeList_concat(self, list)

    def remove(self, d):
        return _ui.shapeList_remove(self, d)

    def pop(self):
        return _ui.shapeList_pop(self)

    def first(self):
        return _ui.shapeList_first(self)

    def next(self):
        return _ui.shapeList_next(self)

    def peek(self):
        return _ui.shapeList_peek(self)

    def last(self):
        return _ui.shapeList_last(self)

    def sort(self, comp):
        return _ui.shapeList_sort(self, comp)

    def reverse(self):
        return _ui.shapeList_reverse(self)

# Register shapeList in _ui:
_ui.shapeList_swigregister(shapeList)

class signalList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.signalList_swiginit(self, _ui.new_signalList(*args))
    __swig_destroy__ = _ui.delete_signalList

    def clear(self):
        return _ui.signalList_clear(self)

    def size(self):
        return _ui.signalList_size(self)

    def isEmpty(self):
        return _ui.signalList_isEmpty(self)

    def member(self, d):
        return _ui.signalList_member(self, d)

    def prepend(self, d):
        return _ui.signalList_prepend(self, d)

    def append(self, d):
        return _ui.signalList_append(self, d)

    def concat(self, list):
        return _ui.signalList_concat(self, list)

    def remove(self, d):
        return _ui.signalList_remove(self, d)

    def pop(self):
        return _ui.signalList_pop(self)

    def first(self):
        return _ui.signalList_first(self)

    def next(self):
        return _ui.signalList_next(self)

    def peek(self):
        return _ui.signalList_peek(self)

    def last(self):
        return _ui.signalList_last(self)

    def sort(self, comp):
        return _ui.signalList_sort(self, comp)

    def reverse(self):
        return _ui.signalList_reverse(self)

# Register signalList in _ui:
_ui.signalList_swigregister(signalList)

class subnetList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.subnetList_swiginit(self, _ui.new_subnetList(*args))
    __swig_destroy__ = _ui.delete_subnetList

    def clear(self):
        return _ui.subnetList_clear(self)

    def size(self):
        return _ui.subnetList_size(self)

    def isEmpty(self):
        return _ui.subnetList_isEmpty(self)

    def member(self, d):
        return _ui.subnetList_member(self, d)

    def prepend(self, d):
        return _ui.subnetList_prepend(self, d)

    def append(self, d):
        return _ui.subnetList_append(self, d)

    def concat(self, list):
        return _ui.subnetList_concat(self, list)

    def remove(self, d):
        return _ui.subnetList_remove(self, d)

    def pop(self):
        return _ui.subnetList_pop(self)

    def first(self):
        return _ui.subnetList_first(self)

    def next(self):
        return _ui.subnetList_next(self)

    def peek(self):
        return _ui.subnetList_peek(self)

    def last(self):
        return _ui.subnetList_last(self)

    def sort(self, comp):
        return _ui.subnetList_sort(self, comp)

    def reverse(self):
        return _ui.subnetList_reverse(self)

# Register subnetList in _ui:
_ui.subnetList_swigregister(subnetList)

class viaList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.viaList_swiginit(self, _ui.new_viaList(*args))
    __swig_destroy__ = _ui.delete_viaList

    def clear(self):
        return _ui.viaList_clear(self)

    def size(self):
        return _ui.viaList_size(self)

    def isEmpty(self):
        return _ui.viaList_isEmpty(self)

    def member(self, d):
        return _ui.viaList_member(self, d)

    def prepend(self, d):
        return _ui.viaList_prepend(self, d)

    def append(self, d):
        return _ui.viaList_append(self, d)

    def concat(self, list):
        return _ui.viaList_concat(self, list)

    def remove(self, d):
        return _ui.viaList_remove(self, d)

    def pop(self):
        return _ui.viaList_pop(self)

    def first(self):
        return _ui.viaList_first(self)

    def next(self):
        return _ui.viaList_next(self)

    def peek(self):
        return _ui.viaList_peek(self)

    def last(self):
        return _ui.viaList_last(self)

    def sort(self, comp):
        return _ui.viaList_sort(self, comp)

    def reverse(self):
        return _ui.viaList_reverse(self)

# Register viaList in _ui:
_ui.viaList_swigregister(viaList)

class viaInstList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.viaInstList_swiginit(self, _ui.new_viaInstList(*args))
    __swig_destroy__ = _ui.delete_viaInstList

    def clear(self):
        return _ui.viaInstList_clear(self)

    def size(self):
        return _ui.viaInstList_size(self)

    def isEmpty(self):
        return _ui.viaInstList_isEmpty(self)

    def member(self, d):
        return _ui.viaInstList_member(self, d)

    def prepend(self, d):
        return _ui.viaInstList_prepend(self, d)

    def append(self, d):
        return _ui.viaInstList_append(self, d)

    def concat(self, list):
        return _ui.viaInstList_concat(self, list)

    def remove(self, d):
        return _ui.viaInstList_remove(self, d)

    def pop(self):
        return _ui.viaInstList_pop(self)

    def first(self):
        return _ui.viaInstList_first(self)

    def next(self):
        return _ui.viaInstList_next(self)

    def peek(self):
        return _ui.viaInstList_peek(self)

    def last(self):
        return _ui.viaInstList_last(self)

    def sort(self, comp):
        return _ui.viaInstList_sort(self, comp)

    def reverse(self):
        return _ui.viaInstList_reverse(self)

# Register viaInstList in _ui:
_ui.viaInstList_swigregister(viaInstList)

class viewList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.viewList_swiginit(self, _ui.new_viewList(*args))
    __swig_destroy__ = _ui.delete_viewList

    def clear(self):
        return _ui.viewList_clear(self)

    def size(self):
        return _ui.viewList_size(self)

    def isEmpty(self):
        return _ui.viewList_isEmpty(self)

    def member(self, d):
        return _ui.viewList_member(self, d)

    def prepend(self, d):
        return _ui.viewList_prepend(self, d)

    def append(self, d):
        return _ui.viewList_append(self, d)

    def concat(self, list):
        return _ui.viewList_concat(self, list)

    def remove(self, d):
        return _ui.viewList_remove(self, d)

    def pop(self):
        return _ui.viewList_pop(self)

    def first(self):
        return _ui.viewList_first(self)

    def next(self):
        return _ui.viewList_next(self)

    def peek(self):
        return _ui.viewList_peek(self)

    def last(self):
        return _ui.viewList_last(self)

    def sort(self, comp):
        return _ui.viewList_sort(self, comp)

    def reverse(self):
        return _ui.viewList_reverse(self)

# Register viewList in _ui:
_ui.viewList_swigregister(viewList)

class vsegList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ui.vsegList_swiginit(self, _ui.new_vsegList(*args))
    __swig_destroy__ = _ui.delete_vsegList

    def clear(self):
        return _ui.vsegList_clear(self)

    def size(self):
        return _ui.vsegList_size(self)

    def isEmpty(self):
        return _ui.vsegList_isEmpty(self)

    def member(self, d):
        return _ui.vsegList_member(self, d)

    def prepend(self, d):
        return _ui.vsegList_prepend(self, d)

    def append(self, d):
        return _ui.vsegList_append(self, d)

    def concat(self, list):
        return _ui.vsegList_concat(self, list)

    def remove(self, d):
        return _ui.vsegList_remove(self, d)

    def pop(self):
        return _ui.vsegList_pop(self)

    def first(self):
        return _ui.vsegList_first(self)

    def next(self):
        return _ui.vsegList_next(self)

    def peek(self):
        return _ui.vsegList_peek(self)

    def last(self):
        return _ui.vsegList_last(self)

    def sort(self, comp):
        return _ui.vsegList_sort(self, comp)

    def reverse(self):
        return _ui.vsegList_reverse(self)

# Register vsegList in _ui:
_ui.vsegList_swigregister(vsegList)

class intarray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _ui.intarray_swiginit(self, _ui.new_intarray(nelements))
    __swig_destroy__ = _ui.delete_intarray

    def __getitem__(self, index):
        return _ui.intarray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _ui.intarray___setitem__(self, index, value)

    def cast(self):
        return _ui.intarray_cast(self)

    @staticmethod
    def frompointer(t):
        return _ui.intarray_frompointer(t)

# Register intarray in _ui:
_ui.intarray_swigregister(intarray)

def intarray_frompointer(t):
    return _ui.intarray_frompointer(t)


def getSelectedSet() :
  result = []
  objs = cvar.uiptr.getSelectedSet()
  obj = objs.first()
  while obj :
    result.append(obj)
    obj = objs.next()
  return result


def selectObj(obj) :
  cvar.uiptr.selectObj(obj)


def addSelected(obj) :
  cvar.uiptr.addSelected(obj)


def getEditCellView() :
  return cvar.uiptr.getEditCellView()


def getLibByName(name) :
  return cvar.dbptr.getLibByName(name)


def deleteObj(obj) :
    cvar.uiptr.deselectObj(obj)
    cv = cvar.uiptr.getEditCellView()
    cv.dbDeleteObj(obj, True, True)


def getLibList() :
  result = []
  libs = cvar.uiptr.getLibList()
  lib = libs.first()
  while lib :
    result.append(lib)
    lib = libs.next()
  return result


def getCellList() :
  result = []
  cells = cvar.uiptr.getCellList()
  cv = cells.first()
  while cv :
    result.append(cv)
    cv = cells.next()
  return result



