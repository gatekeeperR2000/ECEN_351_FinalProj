<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
  <html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
  <head>
    <!-- #BeginEditable "doctitle" -->
    <title>Glade Reference Manual</title>
    <!-- #EndEditable -->
    <meta http-equiv="Content-Type"
    content="text/html; charset=iso-8859-1">
    <style type="text/css">
    body,td,th {
      font-family: Arial, Helvetica, sans-serif;
    }
    </style>
  </head>

  <body bgcolor="#FFFFFF">
    <div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
    </div>
    <div align="left">
      <p align="left"><font face="Arial, Helvetica, sans-serif">
        <b><font size="4">
          Glade Reference
        </font></b>
      </font></p>
      <hr>

      <!-- #BeginEditable "text" -->
      <h2><font face="Arial, Helvetica, sans-serif">Callbacks</font></h2>

      <p>
        Callbacks are python functions associated with properties. They provide a way of updating 
        some properties when others change. For example, consider a finfet nmos transistor. 
        The user is allowed to enter the number of fins as a parameter; the device width will be 
        a function of this number.
      </p>

      <p>We can define a callback python function, nmos_cb.py as:</p>

      <blockquote>
        <pre>
          #
          # Example callback for nmos device. To use, set the property
          # callback on the nmos symbol.
          #
          # The callback is always passed a parameter 'pyDBObject'
          # which is the dbObj we have set the callback on.
          #
          # This code just sets a w/l property based on the fingers/fins properties.
          # We assume they are integer types...
          #
          def nmos_cb(pyDBObject) :
              ##print('callback : nmos_cb()')
              #
              # We only want to apply this callback to instances.
              # Cast the object to an inst:
              inst = pyDBObject.toInst()
              if inst is not None :
                  fins = inst.dbGetIntProp('fins')
                  if fins &lt; 2 :
                  print('fins must be &gt; 1 (got ', fins, ')')
                  raise ValueError
                  fingers = inst.dbGetIntProp('fingers')
                  if fingers &lt; 1 :
                  print('fingers must be &gt; 0 (got ', fingers, ')')
                  raise ValueError 
                  #      
                  # Width is based on number of fins...
                  width = fingers * ((fins-1) * 0.040) + 0.08
                  #
                  # Length is fixed...
                  length = 0.020 
                  #   
                  # Convert the l/w values to a string.
                  # We should use dbU from instance, not 1000
                  w = str(int(width*1000)) + 'n'
                  l = str(int(length*1000)) + 'n'
                  #
                  # We use dbAddProp rather than dbReplaceProp 
                  # in case the property does not exist. If the
                  # property does exist, dbAddProp will replace
                  # it.
                  inst.dbAddProp('w', w)
                  inst.dbAddProp('l', l)
              # if inst
          # def
        </pre>
      </blockquote>
      <p>
        Note in the above we give the function a variable name 'pyDBObject' as argument. 
        The value of this will be the object the property is set on. Normally this would be 
        an instance, but it could be any object derived from a dbObj including a cellView, 
        rectangle etc.
      </p>
      <p>&nbsp;</p>

      <p>
        We then query the properties of the nmos symbol and add the callback function name 
        to the parameters 'fins' and 'fingers':
      </p>

      <p align="center"><img src="images/nmos_cb1.png" width="716" height="396" alt="cb1"></p>

      <p align="left">
        Note that we just specify the callback function name. We do not include the parenthesis or argument.
      </p>

      <p>&nbsp;</p>

      <p align="left">
        Now, if we place an instance of this symbol in a schematic and set its properties using the 
        Query property dialog or the Create Instance property dialog, if we change either the 
        fins or fingers property values and apply or OK the dialog, the w/l property values are 
        updated accordingly.  
      </p>

      <p align="center"><img src="images/nmos_cb2.png" width="725" height="453" alt="cb2"></p>

      <p>&nbsp;</p>

      <p align="left">
        The callback functions must be present in the PYTHONPATH env var, as is the case with PCells, 
        so Glade can find them. Their file names must match the function name also.
      </p>

      <p>&nbsp;</p>
      <p>&nbsp;</p>

      <!-- #EndEditable --> 
      <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
      <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop Design 2024.</font></p>
    </div>
  </body>
<!-- #EndTemplate --></html>
