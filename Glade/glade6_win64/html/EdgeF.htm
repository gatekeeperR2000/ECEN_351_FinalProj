<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
    <html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
    <head>
      <!-- #BeginEditable "doctitle" --> 
      <title>Glade Reference Manual</title>
      <link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
      <!-- #EndEditable -->
      <meta http-equiv="Content-Type"
      content="text/html; charset=iso-8859-1">
      <style type="text/css">
      body,td,th {
        font-family: Arial, Helvetica, sans-serif;
      }
      </style>
    </head>

    <body bgcolor="#ffffff">
    <div align="left">
        <img src="images/canvasview" width="32" height="32" align="right"><br>
    </div>
    <div align="left">
        <p align="left"><font face="Arial, Helvetica, sans-serif"><b>
            <font size="4">
            Glade Reference
            </font></b>
        </font></p>
        <hr>
        
        <!-- #BeginEditable "text" -->
        <h2><font face="Arial, Helvetica, sans-serif">
            EdgeF class
        </font></h2>

        <p>
            The EdgeF class represents an edge, i.e a connected pair of vertices.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::EdgeF
        </font></h4>

        <p>
            Creates an EdgeF object. The endpoints are undefined.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::EdgeF(<a href="Point.htm">Point </a>p0, <a href="Point.htm">Point </a>p1)
        </font></h4>
        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::EdgeF(<a href="PointF.htm">PointF </a>p0, <a href="PointF.htm">PointF </a>p1)
        </font></h4>

        <p>
            Creates and Edge object and initialises the endpoints to the two points.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::EdgeF(float64_t x0, float64_t y0, float64_t x1, float64_t y1)
        </font></h4>

        <p>
            Creates an EdgeF object and initialises the endpoints.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            <a href="PointF.htm">PointF </a>EdgeF::getP0()
        </font></h4>

        <p>
            Gets one endpoint P0.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            <a href="PointF.htm">PointF </a>EdgeF::getP1()
        </font></h4>

        <p>
            Gets the other endpoint P1.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::setP0(<a href="PointF.htm">PointF </a>p)
        </font></h4>

        <p>
            sets endpoint P0 to p.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::setP1(<a href="PointF.htm">PointF </a>p)
        </font></h4>

        <p>
            sets endpoint P1 to p.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::offset(int32_t dx, int32_t dy)
        </font></h4>
        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            EdgeF::offset(float64_t dx, float64_t dy)
        </font></h4>

        <p>
            Transposes the edge by the distance specified by dx, dy.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::operator ==
        </font></h4>

        <p>
            Returns true if the edges are the same i.e. endpoints P0 and P1 are identical.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::operator !=
        </font></h4>

        <p>
            Returns true if of the edges are not the same i.e. endpoints P0 and P1 are not identical.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            int EdgeF::length()
        </font></h4>

        <p>
            Returns the Euclidian length of the edge e.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::isHorizontal()
        </font></h4>

        <p>
            Returns true if the edge is horizontal.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::isVertical()
        </font></h4>

        <p>
            Returns true if the edge is vertical.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::isDiagonal()
        </font></h4>

        <p>
            Returns true if the edge is diagonal.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::isOrthogonal()
        </font></h4>

        <p>
        Returns true if the edge is either horizontal or vertical.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            float64_t EdgeF::deltax()
        </font></h4>

        <p>
            Returns the horizontal distance between the edges endpoints i.e. P1-P0.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            float64_t EdgeF::deltay()
        </font></h4>

        <p>
            Returns the vertical distance between the edges endpoints i.e. P1-P0.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::contains(const <a href="Point.htm">Point</a> &amp;p, bool includeEnds=true)
        </font></h4>
        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::contains(const <a href="PointF.htm">PointF</a> &amp;p, bool includeEnds=true)
        </font></h4>

        <p>
            Returns true if the point p lies on the edge e. If <em>includeEnds</em> is true, 
            the point <em>p</em> can lie on the endpoints of the edge and be considered &#39;
            contained&#39;.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::crosses(const <a href="Rect.htm"> Rect</a> &amp;r, bool touch = true)
        </font></h4>

        <p>
            Returns true if the edge crosses the <a href="Rect.htm">Rect</a> r, i.e. 
            if the edge intersects one of the Rect's edges. If touch is true, this 
            includes the endpoint of the edge touching an edge of the Rect.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::crosses(<a href="Point.htm">Point</a> *pts, int numPoints, bool touch = true)
        </font></h4>
        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::crosses(<a href="PointF.htm">PointF</a> *pts, int numPoints, bool touch = true)
        </font></h4>

        <p>
            Returns true if the edge crosses the polygon given by pts, i.e. if the edge 
            intersects one of the polygon's edges. If touch is true, this includes the 
            endpoint of the edge touching an edge of the polygon.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            int EdgeF::pointToEdge(<a href="Point.htm">const Point</a> &amp;p)
        </font></h4>
        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            int EdgeF::pointToEdge(<a href="PointF.htm">const PointF</a> &amp;p)
        </font></h4>

        <p>
            Returns the shortest distance of a point p to the edge.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            int EdgeF::distance(const EdgeF &amp;e)
        </font></h4>

        <p>
            Returns the shortest distance of the edge to another edge.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::intersects(const <a href="EdgeF.htm">EdgeF</a> &amp;other, bool includeEnds = true)
        </font></h4>

        <p>
            Returns true if the edges intersect at some point. If includeEnds is true, returns true 
            if the edges intersect at endpoint(s).
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            PointF EdgeF::interSectsAt(const <a href="EdgeF.htm"> EdgeF</a> &amp;other)
        </font></h4>

        <p>
            Returns the point of intersection of two edges. The result is only valid if the edges intersect.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::isColinear(const <a href="EdgeF.htm">EdgeF</a> &amp;other)
        </font></h4>

        <p>
            Returns true if the edges are colinear, i.e. the edges are parallel and a point of one edge is on the other edge.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::parallel(const EdgeF &amp;other)
        </font></h4>

        <p>
            Returns true if this edge is parallel to the other edge.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::left(const <a href="PointF.htm"> PointF &amp;</a>p)
        </font></h4>

        <p>
            Returns true if point p is to the left of edge e, i.e. &#39;inside&#39;.
            Note this assumes the direction of the Edge is from endpoint P0 to 
            endpoint P1.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            <a href="PointF.htm">PointF</a> EdgeF::nearestPoint(const <a href="PointF.htm"> PointF</a> &amp;pt)
        </font></h4>
        
        <p>
            Returns the point on the edge that is nearest the Point <em>pt</em>. The point 
            p is either on a line perpendicular to the edge, or if no such line exists, is 
            the nearest endpoint of the edge.
        </p>
        
        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            <a href="Vector.htm"> Vector</a> EdgeF::normalTo(const <a href="PointF.htm">PointF</a> &amp;pt)
        </font></h4>

        <p>
            Returns a <a href="Vector.htm">Vector</a> that is the perpendicular distance from 
            the Point <em>pt</em> to the edge.
        </p>

        <p>&nbsp;</p>

        <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
            bool EdgeF::projects(const <a href="EdgeF.htm">EdgeF</a> &amp;e1, const <a href="EdgeF.htm">EdgeF</a> &amp;e2, <a href="EdgeF.htm">EdgeF</a> &amp;e3, <a href="EdgeF.htm">EdgeF</a> &amp;e4)
        </font></h4>

        <p>
            Returns true if edges E1 and E2 are parallel and project. 
            e3 and e4 are the resulting projecting edges.
        </p>

        <p>&nbsp;</p>
        <p>&nbsp;</p>

        <!-- #EndEditable --> 
        <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
        <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop Design 2024.</font></p>
    </div>
    </body>
<!-- #EndTemplate --></html>
