<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
  <head>
    <!-- #BeginEditable "doctitle" --> 
    <title>Glade Reference Manual</title>
    <link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
    <!-- #EndEditable -->
    <meta http-equiv="Content-Type"
    content="text/html; charset=iso-8859-1">
    <style type="text/css">
    body,td,th {
      font-family: Arial, Helvetica, sans-serif;
    }
    </style>
  </head>
  <body bgcolor="#FFFFFF">
    <div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
    </div>
    <div align="left">
      <p align="left"><font face="Arial, Helvetica, sans-serif">
        <b><font size="4">
          Glade Reference
        </font></b>
      </font></p>
      <hr>

      <!-- #BeginEditable "text" --> 
      <h2><font face="Arial, Helvetica, sans-serif">polygon class</font></h2>

      <p>
        The polygon class is derived from a shape. This class is 
        normally created in a cellView using the dbCreatePoly() function. Note that 
        dbCreatePoly() will create a square or a rectangle if the polygon 
        has 4 points. A polygon is represented by a series of points, which 
        represent the vertices of the polygon. There is an implicit edge between 
        the first and last point.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="Rect.htm">Rect</a>  polygon::bBox()
      </font></h4>

      <p>
        Get the bounding box of this polygon.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        polygon::bBox(<a href="Rect.htm">Rect</a> b)
      </font></h4>

      <p>
        Set the bounding box of this polygon. 
        Not useful and will throw an exception if called.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        db_Type polygon::objType()
      </font></h4>

      <p>
        Returns the object type of this  polygon as POLYGON.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        const char * = polygon::objName()
      </font></h4>

      <p>
        Returns the object name of this polygon as "POLYGON".
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t  polygon::nPoints()
      </font></h4>

      <p>
        Returns the number of points of the polygon's boundary. Note that polygons are not 
        closed as they are in GDS2.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="Point.htm">Point</a> * polygon::ptlist()
      </font></h4>

      <p>
        Returns the point list of this polygon as a C array of Points.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="Point.htm">Point</a> polygon::[index]
      </font></h4>

      <p>
        Returns the Point <em>p</em> at the <em>index</em> into the list of points.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        polygon::bias(int32_t bias, float64_t grid)
      </font></h4>

      <p>
        Bias this polygon by <i>bias</i>,  snapping to the grid <i>grid</i>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        p.scale(float64_t scale, float64_t grid)
      </font></h4>

      <p>
        Scale this polygon by <i>scale</i>, snapping to the grid <i>grid</i>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t polygon::getNearestEdge(<a href="Point.htm">Point</a> p, <a href="segment.htm">segment</a> &amp;s)
      </font></h4>

      <p>
        Get the distance of the nearest segment <i>s</i> of this polygon to the point <i>p</i>;
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t polygon::getNearestVertex(<a href="Point.htm">Point</a> p, <a href="vertex.htm">vertex</a> &amp;s)
      </font></h4>

      <p>
        Get the distance of the nearest vertex <i>s</i> of this polygon to the point <i>p</i>;
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        bool polygon::ptInPoly(<a href="Point.htm">Point</a> p)
      </font></h4>

      <p>
        Returns true if the point in inside 
        or on the edge of the polygon.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        float64_t polygon::area()
      </font></h4>

      <p>
        Get the area of this polygon.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t polygon::perimeter()
      </font></h4>

      <p>
        Get the perimeter of this polygon.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        polygon::transform(<a href="transform.htm">transform</a> trans)
      </font></h4>

      <p>
        Transform this polygon using <i>trans</i>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        polygon::Move(<a href="cellview.htm">cellView</a> *cv, <a href="Point.htm">Point</a> delta, bool opt = true)
      </font></h4>

      <p>
        Move this polygon by distance <i>delta</i>. If opt is true then the database is re-optimised 
        for the new polygon position. If there are a lot of objects to move it makes 
        sense to turn this off and instead use the cellView update() function after 
        moving them all. 
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="dbObj.htm">dbObj</a> *obj = polygon::Copy(<a href="cellview.htm">cellView</a> *cv, 
        <a href="Point.htm">Point</a> delta, int layer = -1)
      </font></h4>

      <p>
        Copy this polygon to cellView <i>cv</i>,  with offset <i>delta</i>. If layerNum is 
        non-negative the polygon will be copied to the new layer number.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="dbObj.htm">dbObj</a> *obj = polygon::Flatten(<a href="cellview.htm">cellView</a> *cv, <a href="transform.htm">transform</a> trans)
      </font></h4>

      <p>
        Flatten this polygon into cellView 
        <i>cv</i> with transformation <i>trans</i>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        polygon::Stretch(<a href="Point.htm">Point</a> delta, <a href="segment.htm">segment</a> seg)
      </font></h4>

      <p>
        Stretch segment <i>seg</i> of this polygon by <i>delta</i>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        polygon::Stretch(<a href="Point.htm">Point</a> delta, <a href="vertex.htm">vertex</a> v)
      </font></h4>

      <p>
        Stretch vertex <i>v</i> of this polygon by <i>delta</i>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        polygon::compressPoints()
      </font></h4>

      <p>
        Removes colinear points, sets the point order to be counterclockwise and sets the 
        first point to be the smallest in X and Y.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        bool polygon::selfIntersecting()
      </font></h4>

      <p>
        Returns true if the polygon is self-intersecting.
      </p>

    <p>&nbsp;</p>
    <p>&nbsp;</p>

    <!-- #EndEditable --> 
      <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
      <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop Design 2024.</font></p>
    </div>
  </body>
<!-- #EndTemplate --></html>
