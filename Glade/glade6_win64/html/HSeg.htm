<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
  <head>
    <!-- #BeginEditable "doctitle" -->
    <title>Glade Reference Manual</title>
    <link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
    <!-- #EndEditable -->
    <meta http-equiv="Content-Type"
    content="text/html; charset=iso-8859-1">
    <style type="text/css">
    body,td,th {
      font-family: Arial, Helvetica, sans-serif;
    }
    </style>
  </head>
  <body bgcolor="#FFFFFF">
    <div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
    </div>
    <div align="left">
      <p align="left"><font face="Arial, Helvetica, sans-serif">
        <b><font size="4">
          Glade  Reference
        </font></b>
      </font></p>
      <hr>

      <!-- #BeginEditable "text" -->
      <h2><font face="Arial, Helvetica, sans-serif">
        HSeg class
      </font></h2>

      <p>A <a href="#_HSeg_class">HSeg</a> represents a wiring segment for 
        place&amp;route data. It is a 2 vertex  horizontal path. A 
        <a href="#_HSeg_class">HSeg</a> is normally created by the 
        cellView::dbCreateHSeg()  function.
      </p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        HSeg::setPoints(int32_t x1,  int32_t y1, int32_t x2, int32_t y2)
      </font></h4>

      <p>
        Sets the vertices of the <a href="#_HSeg_class">HSeg</a>
      </p>

      <p>&nbsp;</p>

    
      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::left()
      </font></h4>

      <p>
        Gets the leftmost X coordinate of a <a href="#_HSeg_class">HSeg.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::right()
      </font></h4>

      <p>
        Gets the rightmost X coordinate of a <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::bottom()
      </font></h4>

      <p>
        Gets the lowest Y coordinate of a <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::top()
      </font></h4>

      <p>
        Gets the highest Y coordinate of a <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::width()
      </font></h4>

      <p>
        Gets the <a href="#_HSeg_class">HSeg</a> width.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        HSeg::setStyle(int32_t s)
      </font></h4>

      <p>
        Sets the <a href="#_HSeg_class">HSeg</a> style, i.e. the  type of the path end. 
        The style can be one of: 0 - truncate, 1 - round, 2 -  extend, 4 - varextend, 8 - octagonal. 
        Python global variables TRUNCATE, ROUND,  EXTEND, VAREXTEND, OCTAGONAL are defined to these values.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::getStyle()
      </font></h4>

      <p>
        Gets the <a href="#_HSeg_class">HSeg</a> style.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        HSeg::setSpecial(bool  val)
      </font></h4>

      <p>
        Sets the <a href="#_HSeg_class">HSeg</a> specialNet status
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        v.isSpecial()
      </font></h4>

      <p>
        Returns true is the <a href="#_HSeg_class">HSeg</a> is a  specialNet.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        HSeg::setNet(net *n)
      </font></h4>

      <p>
        Sets the <a href="#_HSeg_class">HSeg</a> <a href="net.htm">net</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        net * HSeg::getNet()
      </font></h4>

      <p>
        Returns the <a href="#_HSeg_class">HSeg</a> <a href="net.htm">net</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_Rect_class">Rect</a> HSeg::bBox()
      </font></h4>

      <p>
        Get the bounding box of this <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        dbtype_t HSeg::objType()
      </font></h4>

      <p>
        Returns the object type of this <a href="#_HSeg_class">HSeg</a> as HSEG.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        const char * HSeg::objName()
      </font></h4>

      <p>
        Returns the object name of this <a href="#_HSeg_class">HSeg</a> as &quot;HSEG&quot;.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::nPoints()
      </font></h4>

      <p>
        Returns the number of points of the <a href="#_HSeg_class">HSeg</a> (2).
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_Point_class">Point</a> *  HSeg::ptlist()
      </font></h4>

      <p>
        Returns the point list of this <a href="#_HSeg_class">HSeg</a> as a C array of Points.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        float64_t HSeg::area()
      </font></h4>

      <p>
        Get the area of this <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::perimeter()
      </font></h4>

      <p>
        Get the perimeter of this <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_Point_class">Point</a> HSeg::origin()
      </font></h4>

      <p>
        Returns the origin point of a <a href="#_HSeg_class">HSeg</a>
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        v.setOrigin(const <a href="#_Point_class">Point</a> &amp;p)
      </font></h4>

      <p>
        Sets the origin of a <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::extent()
      </font></h4>

      <p>
        Returns the extent, i.e. the length of the <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        HSeg::setExtent(int32_t e)
      </font></h4>

      <p>
        Sets the extent of the <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_Point_class">Point</a> HSeg::getFirstVertex()
      </font></h4>

      <p>
        Gets the first vertex of this <a href="#_HSeg_class">HSeg</a>
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_Point_class">Point</a> HSeg::getLastVertex()
      </font></h4>

      <p>
        Gets the last vertex of this <a href="#_HSeg_class">HSeg</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        bool HSeg::ptInPoly(const <a href="#_Point_class">Point</a> &amp;p)
      </font></h4>

      <p>
        Returns true if the <a href="#_Point_class">Point</a> p is contained 
        in the <a href="#_HSeg_class">HSeg</a> or on its edges.
      </p>
      
      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        HSeg::Move(<a href="#_cellView_class">cellView</a> *dest, <a href="#_Point_class">Point</a> delta, bool opt = true)
      </font></h4>
      
      <p>
        Move this <a href="#_HSeg_class">HSeg</a> by distance <em>delta</em>. 
        If <em>opt</em> is true then the database is re-optimised for the new 
        <a href="#_HSeg_class">HSeg</a> position. If there are a lot of objects to 
        move it  makes sense to turn this off and instead use the <a href="#_cellView_class">cellView</a>
        update() function after moving them all.
      </p>

      <p>&nbsp; </p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_dbObj_class">dbObj</a> *obj = HSeg::Copy(<a href="#_cellView_class">cellView</a> 
        *dest, <a href="#_Point_class">Point</a> delta, int layerNum = -1)
      </font></h4>
      
      <p><br>
        Copy this <a href="#_HSeg_class">HSeg</a> to <a href="#_cellView_class">cellView</a>
        <em>dest</em>,  with offset <em>delta</em>. If <em>layer</em> is a positive integer 
        the <a href="#_HSeg_class">HSeg</a> will be copied to the new layer number.
      </p>
      
      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_dbObj_class">dbObj</a> *obj = v.Flatten(<a href="#_cellView_class">cellView</a> 
        *dest,<a href="#_transform_class">transform</a> trans)
      </font></h4>
      
      <p>
        Flatten this <a href="#_HSeg_class">HSeg</a> into <a href="#_cellView_class">cellView</a>
        <em>dest</em> with transformation <em>trans</em>.
      </p>
      
      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t HSeg::getNearestEdge(<a href="#_Point__class">Point</a> p, <a href="#_segment_class">segment</a> &amp;edge, bool centreLine=true, bool  outLine=true)
      </font></h4>
      
      <p>
        Gets the nearest segment <em>edge</em> to the <a href="#_HSeg_class">HSeg</a> from 
        the <a href="#_Point_class">Point</a> <em>p</em> and returns the distance. 
        If <em>centreline</em> is true, the centre line of  the <a href="#_HSeg_class">HSeg</a> 
        is considered. If <em>outLine</em> is true, the outline edges of the 
        <a href="#_HSeg_class">HSeg</a> are considered.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int dist =  v.getNearestVertex(<a href="#_Point__class">Point</a> p, <a href="#_vertex_class">vertex</a>&amp;vert)
      </font></h4>

      <p>
        Gets the nearest vertex &nbsp;<em>vert </em>to  the <a href="#_HSeg_class">HSeg</a> from 
        the <a href="#_Point_class">Point</a> p and returns the distance.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        const char * HSeg::getNetName()
      </font></h4>

      <p>
        Returns the <a href="#_HSeg_class">HSeg</a> net name as a  string.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        bool HSeg::offGrid(int32_t  grid)
      </font></h4>

      <p>
        Returns true if the <a href="#_HSeg_class">HSeg</a> is  offgrid.
      </p>

      <p>&nbsp;</p>
      <p>&nbsp;</p>

      <!-- #EndEditable --> 
      <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
      <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop Design 2024.</font></p>
    </div>
  </body>
<!-- #EndTemplate --></html>
