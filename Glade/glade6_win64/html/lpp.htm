<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
  <head>
    <!-- #BeginEditable "doctitle" --> 
    <title>Glade Reference Manual</title>
    <link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
    <!-- #EndEditable -->
    <meta http-equiv="Content-Type"
    content="text/html; charset=iso-8859-1">
    <style type="text/css">
    body,td,th {
      font-family: Arial, Helvetica, sans-serif;
    }
    </style>
  </head>
  <body bgcolor="#FFFFFF">
    <div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
    </div>
    <div align="left">
      <p align="left"><font face="Arial, Helvetica, sans-serif">
        <b><font size="4">
          Glade  Reference
        </font></b>
      </font></p>
      <hr>
      
      <!-- #BeginEditable "text" -->
    <h2>
      lpp class
    </h2>

    <p>
      A lpp object forms a layer-purpose pair. It manages objects in a tree structure for fast spatial searching.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::lpp(<a href="cellview.htm">cellView </a> * cv)
    </font></h4>

    <p>
      Constructs a lpp object with master cellView <em>cv</em>. Normally never used - lpps are created and 
      managed by a cellView object. You can use the cellView getLpp() function to get an existing 
      lpp by name or by number
    </p>

    <p>&nbsp;</p>

    <p class="shadowHeading1">lpp::clear()</p>

    <p>
      Clears the lpp. All objects managed by the lpp are removed leaving it empty. They are not deleted, 
      however.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::layerName(const char *name)
    </font></h4>

    <p>
      Sets the layer name of the lpp.</font> Note this will not change the layer name used in the 
      techfile, so beware.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      const char * lpp::layerName()
    </font></h4>

    <p>
      Gets the lpp&#39;s layer name
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::purpose(const char *name)
    </font></h4>

    <p><font face="Arial, Helvetica, sans-serif">
      Sets the purpose name of the lpp.  Note this will not change the purpose name used in the 
      techfile, so beware.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      const char * lpp::purpose()
    </font></h4>

    <p>
      Gets the lpp&#39;s purpose name
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::layerNum(int32_t layerNum)
    </font></h4>

    <p>
      Sets the layer number of the lpp. Note this will not change the layer number 
      used in the techfile, so beware.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      int32_t lpp::layerNum()
    </font></h4>

    <p>
      Gets the lpp&#39;s layer number
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      int32_t lpp::numShapes()
    </font></h4>

    <p>
      Gets the number of shapes in this lpp.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      <a href="cellview.htm">cellView</a> * lpp::cv()
    </font></h4>

    <p>
      Get the cellView for this lpp.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      <a href="Rect.htm">Rect</a> lpp::bBox()
    </font></h4>

    <p>
      Get the bounding box of all shapes in this lpp.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::bBox(<a href="Rect.htm">Rect</a> box)
    </font></h4>

    <p>
      Set the bounding box of the lpp. Should not normally be used.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::optimiseTree()
    </font></h4>

    <p>
      Optimise the lpp. Must be carried out after adding objects.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::updateTree(<a href="dbObj.htm">dbObj</a> * obj)
    </font></h4>

    <p>
      Update the lpp for a single object.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      int32_t lpp::dbGetOverlaps (<a href="dbObjList.htm">dbObjList</a>&lt;<a href="dbObj.htm">dbObj</a>&gt;
       *list, const <a href="Rect.htm">Rect</a> &amp;searchRect, int filterSize=0)
    </font></h4>

    <p>
      Search the lpp for shapes overlapping the search rectangle <i>searchRect</i>, returning those found 
      in <em>list </em>(which must be passed in by the caller). If <i>filterSize</i> is non-zero, only 
      shapes with a width and height greater than <i>filterSize</i> are reported. The number of 
      shapes found is returned.
    </p>

    <p pbzloc="1298">&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      lpp::getOverlaps (<a href="Rect.htm">Rect </a>searchRect, int filterSize=0)
    </font></h4>

    <p>
      As above, but returns a Python list.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      int32_t lpp::dbGetOverlaps (<a href="dbObjList.htm">dbObjList</a>&lt;<a href="dbObj.htm">dbHierObj</a>&gt; *list, 
      <a href="transform.htm">transform</a> trans, const <a href="Rect.htm">Rect</a> &amp;searchRect, int filterSize=0)
    </font></h4>

    <p>
      Search the lpp for shapes overlapping the search rectangle <i>searchRect</i>, returning those as dbHierObj 
      created using the transform trans, in <em>list </em>(which must be passed in by the caller). If <i>filterSize</i> 
      is non-zero, only shapes with a width and height greater than <i>filterSize</i> are reported.
      The number of shapes found is returned.
    </p>

    <p>&nbsp;</p>

    <h2>
      <b><u>Iterator</u></b>
    </font></h2>

    <p>
      An iterator to allow traversing the objects in the lpp using Python.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      iter = objIterator(lpp *l)</strong>
    </font></h4>

    <p>
      Initialises the <a href="dbObj.htm">dbObj</a> iterator for the lpp. For example:
    </p>

    <blockquote>
      <pre>
          iter = objIterator(lpp)
          while not iter.end() :
          &nbsp;&nbsp;&nbsp; obj = iter.value()
          &nbsp;&nbsp;&nbsp; type = obj.objType()
          &nbsp;&nbsp;&nbsp; print &quot;object type = &quot;, type
          &nbsp;&nbsp;&nbsp; iter.next() 
        </pre>
    </blockquote>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      <a href="dbObj.htm">dbObj</a> * iter.value()
    </font></h4>

    <p>
      Returns the current object.
    </p>

    <p>&nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      iter.next()
    </font></h4>

    <p>
      Advances the iterator to the next dbObj.
    </p>

    &nbsp;</p>

    <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
      bool iter.end()
    </font></h4>

    <p>
      Returns false if there are more objects, else returns true if there are no more.
    </p>

    <p>&nbsp;</p>
    <p>&nbsp;</p>

    <!-- #EndEditable --> 
      <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
      <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop Design 2024.</font></p>
    </div>
  </body>
<!-- #EndTemplate --></html>
