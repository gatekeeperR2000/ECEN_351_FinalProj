<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
  <head>
    <!-- #BeginEditable "doctitle" -->
    <title>Glade Reference Manual</title>
    <link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
    <!-- #EndEditable -->
    <meta http-equiv="Content-Type"
    content="text/html; charset=iso-8859-1">
    <style type="text/css">
    body,td,th {
      font-family: Arial, Helvetica, sans-serif;
    }
    </style>
  </head>
  <body bgcolor="#FFFFFF">
    <div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
    </div>
    <div align="left">
      <p align="left"><font face="Arial, Helvetica, sans-serif">
        <b><font size="4">
          Glade  Reference
        </font></b>
      </font></p>
      <hr>

      <!-- #BeginEditable "text" -->
      <h2>ellipse class</h2>

      <p>
        An <a href="#_ellipse_class">ellipse</a> is represented by a centre point and an X and Y radius. 
        If X and Y are equal,  you have a circle. An <a href="#_ellipse_class">ellipse</a> is normally 
        created  by the cellView::dbCreateEllipse() or cellView::dbCreateCircle() function.
      </p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t  ellipse::left()
      </font></h4>

      <p>
        Returns the least X value of the <a href="#_ellipse_class">ellipse</a>&rsquo;s  bounding box.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::right()
      </font></h4>

      <p>
        Returns the greatest X value of the <a href="#_ellipse_class">ellipse</a>&rsquo;s  bounding box.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::bottom()
      </font></h4>

      <p>
        Returns the lowest Y value of the <a href="#_ellipse_class">ellipse</a>&rsquo;s  bounding box.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::top()
      </font></h4>

      <p>
        Returns the highest Y value of the <a href="#_ellipse_class">ellipse</a>&rsquo;s  bounding box.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::setOrigin(const <a href="Point.htm">Point</a>  &amp;origin)
      </font></h4>
      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"></font>
        ellipse::setOrigin(int32_t x,  int32_t y)
      </font></h4>

      <p>
        Sets the <a href="#_ellipse_class">ellipse</a>&rsquo;s centre point.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="Point.htm">Point</a> ellipse::origin()
      </font></h4>

      <p>
        Returns the <a href="#_ellipse_class">ellipse</a>&rsquo;s centre  point.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::height()
      </font></h4>

      <p>
        Returns the height of the <a href="#_ellipse_class">ellipse</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::width()
      </font></h4>

      <p>
        Returns the width of the <a href="#_ellipse_class">ellipse</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="Rect.htm">Rect</a> ellipse::bBox()
      </font></h4>

      <p>
        Returns the <a href="#_ellipse_class">ellipse</a>&rsquo;s bounding  box.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::setXRadius(int32_t r)
      </font></h4>

      <p>
        Set the X radius of the <a href="#_ellipse_class">ellipse</a>
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::setYRadius(int32_t r)
      </font></h4>
      <p>
        Set the Y radius of the <a href="#_ellipse_class">ellipse</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::xRadius()
      </font></h4>

      <p>
        Returns the X radius of the <a href="#_ellipse_class">ellipse</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::yRadius()
      </font></h4>

      <p>
        Returns the Y radius of the <a href="#_ellipse_class">ellipse</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::setNumChords(int32_t n)
      </font></h4>

      <p>
        Sets the number of edges that the <a href="#_ellipse_class">ellipse</a> will be fractured 
        into when converting to a polygon.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::numChords()
      </font></h4>

      <p>
        Get the number of edges for the <a href="#_ellipse_class">ellipse</a>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        dbtype_t ellipse::objType()
      </font></h4>

      <p>
        Returns the object&rsquo;s type as ELLIPSE
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        const char * ellipse::objName()
      </font></h4>

      <p>
        Returns the object&rsquo;s name as &ldquo;ELLIPSE&rdquo;
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        float64_t ellipse::area()
      </font></h4>

      <p><br>
        Returns the <a href="#_ellipse_class">ellipse</a>&rsquo;s area.
      </p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        int32_t ellipse::perimeter()
      </font></h4>

      <p>
        Returns the <a href="#_ellipse_class">ellipse</a>&rsquo;s  perimeter.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        bool ellipse::offGrid(int32_t grid)
      </font></h4>

      <p>
        Returns true if the <a href="#_ellipse_class">ellipse</a>&rsquo;s  xRadius or yRadius is offgrid.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::transform(<a href="#_transform_class">transform</a> trans)
      </font></h4>

      <p>
        Transforms the <a href="#_ellipse_class">ellipse</a> by <em>trans</em>.
      </p>
      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::Move(<a href="#_cellView_class">cellView</a> *dest, <a href="#_Point_class">Point</a> delta, bool opt=true)
      </font></h4>

      <p>
        Move this <a href="#_ellipse_class">ellipse</a> by distance <em>delta</em>.&nbsp;If <em>opt</em> is True 
        then the database is re-optimised for the new rectangle  position. If there are a lot of objects to 
        move it makes sense to turn this off  and instead use the cellView update() function after moving them all.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_dbObj_class">dbObj</a> * ellipse::Copy(<a href="#_cellView_class">cellView</a> *dest, <a href="#_Point_class">Point</a> delta, layer=-1)
      </font></h4>
      
      <p>
        Copy this <a href="#_ellipse_class">ellipse</a> to cellView <em>dest</em>, with offset <em>delta</em>. 
        If <em>layer</em> is non  negative the rectangle will be copied to the new layer number.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="#_dbObjList_class">dbObjList</a>&lt;<a href="#_dbObj_class">dbObj</a>&gt; * ellipse::Flatten(<a href="#_cellView_class">cellView</a> *dest, <a href="#_transform_class">transform</a> trans, bool hier=true)
      </font></h4>
      
      <p>
        Flatten this <a href="#_ellipse_class">ellipse</a> into <a href="#_cellView_class">cellView</a> <em>dest</em> with transformation <em>trans</em>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::bias(int32_t bias, int32_t  xgrid, int32_t ygrid, int16_t layer=-1)
      </font></h4>

      <p>
        Bias this <a href="#_ellipse_class">ellipse</a> by bias, snapping to the grid <em>xgrid</em> and <em>ygrid</em>.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        ellipse::scale(float64_t scale,  int32_t grid)
      </font></h4>

      <p>
        Scale this <a href="#_ellipse_class">ellipse</a> by <em>scale</em>, snapping to the grid <em>grid</em>.  
      </p>

      <p>&nbsp;</p>
      <p>&nbsp;</p>

      <!-- #EndEditable --> 
      <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
      <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop Design 2024.</font></p>
    </div>
  </body>
<!-- #EndTemplate --></html>
