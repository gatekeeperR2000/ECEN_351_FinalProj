<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
  <head>
    <!-- #BeginEditable "doctitle" --> 
    <title>Glade Reference Manual</title>
    <link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
    <!-- #EndEditable -->
    <meta http-equiv="Content-Type"
    content="text/html; charset=iso-8859-1">
    <style type="text/css">
    body,td,th {
      font-family: Arial, Helvetica, sans-serif;
    }
    </style>
  </head>
  <body bgcolor="#FFFFFF">
    <div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
    </div>
    <div align="left">
      <p align="left"><font face="Arial, Helvetica, sans-serif">
        <b><font size="4">
          Glade Reference
        </font></b>
      </font></p>
      <hr>

      <!-- #BeginEditable "text" --> 
      <h2><font face="Arial, Helvetica, sans-serif">transform64</font></h2>

      <p>
        The transform64 class contains functions to transform coordinates in subcells 
        placed with offset, rotation and magnification.<br>
        <br>
        It differs from the transform class in that internally it uses float64_t precision 
        for the matrix elements, allowing any angle rotation and non-integer scaling. 
        Note that all coordinates after 
        transform are converted to integer database units; no grid snapping 
        is performed.<br>
        <br>
        All of this code is based on the fact that a point with coordinates x, y can 
        be transformed by a transformation matrix T by:<br>
        <br>
        [x', y', 1] = [x, y, 1]T
      </p>

      <p>
        The transformation matrix for 
        an offset (a,b) with no rotation or magnification can be described as:
      </p>

      <pre> 
          T = [ 1  0  0 ]
              [ 0  1  0 ]
              [ a  b  1 ]
      </pre>
      <p>
        Rotations are e.g.
      </p>

      <pre>
         T90 = [ 0  1  0 ]
               [ -1 0  0 ]
               [ 0  0  1 ]
      </pre>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64 transform64::transform64(float64_t angle, <a href="Point.htm">Point</a> &amp;p, float scale)
      </font></h4>

      <p>
        Construct a transform with orientation 
        <i>angle</i>, origin <i>p</i> and magnification <i>scale</i> . 
        The orientation is specified in degrees.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64 transform64::transform64(float64_t angle, <a href="Point.htm">Point</a> &amp;p)
      </font></h4>

      <h4><font face="Arial, Helvetica, sans-serif">
        transform64::transform64(float64_t angle, int32_t x, int32_t y)
      </font></h4>

      <p>
        Construct a transform with orientation angle, origin p or x/y.The 
        orientation is specified in degrees.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64 transform64::transform64(float64_t angle,  int32_t x, int32_t y, float scale)
      </font></h4>

      <p>
        Construct a transform with orientation <i>angle</i>, origin <i>p</i> and 
        magnification <i>scale</i>. The orientation is specified in degrees.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64 transform64::transform64(float64_t angle)
      </font></h4>

      <p>
        Construct a transform with orientation angle.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64 transform64::transform64()
      </font></h4>

      <p>
        Construct a transform with orientation 
        R0.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64 transform64::invert()
      </font></h4>

      <p>
        Invert a transformation matrix
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::inverseTransformRect(<a href="Rect.htm">Rect</a> &amp;box)
      </font></h4>

      <p>
        Transform a Rect by the inverse of the transformation matrix. Useful if you 
        want to take a Rect and transform it into the coordinate space of an instance 
        with a transform. For example if you want to find if any shapes in an instance 
        overlap a search box for a top level cell, use the inverse transform of the 
        search box on all the instance's shapes. This means doing just one transform 
        of the search box rather than one transform for each shape in the instance.
      </p>

      <p>&nbsp;</p>

      <<h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::inverseTransformPoint(<a href="Point.htm">Point</a> &amp;p)
      </font></h4>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        trans.inverseTransformPoint(int32_t x, int32_t y)
      </font></h4>

      <p>
        Transform a Point by the inverse of the transformation matrix
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::transformRect(<a href="Rect.htm">Rect</a> &amp;box)
      </font></h4>

      <p>
        Transform a Rect by the transformation matrix.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::transformRect(<a href="Rect.htm">Rect</a> &amp;box, <a href="Point.htm">Point</a> &amp;origin)
      </font></h4>

      <p>
        Transform a Rect by the transformation matrix about a point origin.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::transformPoint(<a href="Point.htm">Point</a> &amp;p)
      </font></h4>

      <p>
        Transform a Point by the transformation matrix
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::transformPoint(<a href="Point.htm">Point</a> &amp;p, <a href="Point.htm">Point</a> &amp;origin)
      </font></h4>

      <p><font face="Arial, Helvetica, sans-serif">Transform a point by the transformation 
        matrix about a point origin.</font></p>

        <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::transformPointList(<a href="Point.htm">Point</a> *ptlist, int32_t size)
      </font></h4>

      <p>
        Transform an array of points of size size by the transformation matrix.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::transformPointList(<a href="Point.htm">Point</a> *ptlist, int32_t size, <a href="Point.htm">Point</a> &amp;origin)
      </font></h4>

      <p>
        Transform an array of points of 
        size size by the transformation matrix about a point origin.
      </p>

      <p>&nbsp;</p>
    
      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::setOrigin(<a href="Point.htm">Point</a> &amp;p)
      </font></h4>

      <h4><font face="Arial, Helvetica, sans-serif">
        transform64::setOrigin(int32_t x, int32_t y)
      </font></h4>

      <p>
        Set the transformation origin.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        <a href="Point.htm">Point</a> transform64::getOrigin()
      </font></h4>

      <p>
        Get the transformation origin.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::setMag(float scale)
      </font></h4>

      <p>
        Set the transformation matrix scale.
      </p>

      <p>&nbsp;</p>

      <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">
        transform64::setOrient(float64_t angle)
      </font></h4>

      <p>
        Set the transformation angle. Any existing scale will be reset to 1.0
      </p>

      <p>&nbsp;</p>

      <h4><font face="Arial, Helvetica, sans-serif">
        bool transform64::isXYSwapped()
      </font></h4>

      <p>
        Returns true if the transformation is such that the objects XY 
        coordinates would be swapped, e,g. if the object is R90.
      </p>

      <p>&nbsp;</p>
      <p>&nbsp;</p>


      <!-- #EndEditable --> 
      <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
      <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop Design 2024.</font></p>
    </div>
  </body>
<!-- #EndTemplate --></html>
